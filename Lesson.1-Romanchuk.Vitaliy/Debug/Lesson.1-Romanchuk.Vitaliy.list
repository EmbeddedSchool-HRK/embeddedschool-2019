
Lesson.1-Romanchuk.Vitaliy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b0  080076b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b8  080076b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080076c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08007750  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08007750  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f80  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039e4  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003db78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024008  00000000  00000000  0003eb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a17  00000000  00000000  00062b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca0d5  00000000  00000000  0007553f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  0013f690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800767c 	.word	0x0800767c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800767c 	.word	0x0800767c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b71      	ldr	r3, [pc, #452]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a70      	ldr	r2, [pc, #448]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b6e      	ldr	r3, [pc, #440]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b6a      	ldr	r3, [pc, #424]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a69      	ldr	r2, [pc, #420]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b67      	ldr	r3, [pc, #412]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b63      	ldr	r3, [pc, #396]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a62      	ldr	r2, [pc, #392]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b60      	ldr	r3, [pc, #384]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b5c      	ldr	r3, [pc, #368]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a5b      	ldr	r2, [pc, #364]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b55      	ldr	r3, [pc, #340]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a54      	ldr	r2, [pc, #336]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b52      	ldr	r3, [pc, #328]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b4e      	ldr	r3, [pc, #312]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a4d      	ldr	r2, [pc, #308]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b4b      	ldr	r3, [pc, #300]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	4848      	ldr	r0, [pc, #288]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800058c:	f000 ff56 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4846      	ldr	r0, [pc, #280]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 8000596:	f000 ff51 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800059a:	2200      	movs	r2, #0
 800059c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a0:	4844      	ldr	r0, [pc, #272]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 80005a2:	f000 ff4b 	bl	800143c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005a6:	2308      	movs	r3, #8
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	4619      	mov	r1, r3
 80005bc:	483b      	ldr	r0, [pc, #236]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80005be:	f000 fda3 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4835      	ldr	r0, [pc, #212]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 80005da:	f000 fd95 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005de:	2308      	movs	r3, #8
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ee:	2305      	movs	r3, #5
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	482d      	ldr	r0, [pc, #180]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 80005fa:	f000 fd85 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fe:	2301      	movs	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 8000604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	482a      	ldr	r0, [pc, #168]	; (80006bc <MX_GPIO_Init+0x1f4>)
 8000612:	f000 fd79 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000616:	2304      	movs	r3, #4
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <MX_GPIO_Init+0x1f8>)
 800062a:	f000 fd6d 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000640:	2305      	movs	r3, #5
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	481d      	ldr	r0, [pc, #116]	; (80006c0 <MX_GPIO_Init+0x1f8>)
 800064c:	f000 fd5c 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000650:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000654:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 800066a:	f000 fd4d 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800066e:	2320      	movs	r3, #32
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 8000682:	f000 fd41 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000686:	2302      	movs	r3, #2
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_GPIO_Init+0x1e4>)
 800069a:	f000 fd35 	bl	8001108 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3730      	adds	r7, #48	; 0x30
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020c00 	.word	0x40020c00
 80006b8:	10120000 	.word	0x10120000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400

080006c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f002 fb1b 	bl	8002d3c <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f9e4 	bl	8000ad8 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000c0 	.word	0x200000c0
 8000718:	40005400 	.word	0x40005400
 800071c:	000186a0 	.word	0x000186a0

08000720 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_I2C_MspInit+0x84>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d12c      	bne.n	800079c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800075e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000764:	2312      	movs	r3, #18
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000770:	2304      	movs	r3, #4
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <HAL_I2C_MspInit+0x8c>)
 800077c:	f000 fcc4 	bl	8001108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40005400 	.word	0x40005400
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400

080007b0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2S3_Init+0x54>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_I2S3_Init+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_I2S3_Init+0x5c>)
 80007da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2S3_Init+0x54>)
 80007f0:	f002 fbcc 	bl	8002f8c <HAL_I2S_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 f96d 	bl	8000ad8 <Error_Handler>
  }

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000114 	.word	0x20000114
 8000808:	40003c00 	.word	0x40003c00
 800080c:	00017700 	.word	0x00017700

08000810 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <HAL_I2S_MspInit+0xc0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d14a      	bne.n	80008c8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 800083c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000896:	2306      	movs	r3, #6
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_I2S_MspInit+0xc8>)
 80008a2:	f000 fc31 	bl	8001108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b8:	2306      	movs	r3, #6
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_I2S_MspInit+0xcc>)
 80008c4:	f000 fc20 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fa6a 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f874 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff fdec 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f0:	f7ff fee8 	bl	80006c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008f4:	f7ff ff5c 	bl	80007b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008f8:	f000 f8f6 	bl	8000ae8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008fc:	f006 faba 	bl	8006e74 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000900:	f006 fade 	bl	8006ec0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin (GPIOD, (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15), GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800090a:	4831      	ldr	r0, [pc, #196]	; (80009d0 <main+0xf0>)
 800090c:	f000 fd96 	bl	800143c <HAL_GPIO_WritePin>
    HAL_Delay(5000);
 8000910:	f241 3088 	movw	r0, #5000	; 0x1388
 8000914:	f000 fac4 	bl	8000ea0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, (GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15), GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800091e:	482c      	ldr	r0, [pc, #176]	; (80009d0 <main+0xf0>)
 8000920:	f000 fd8c 	bl	800143c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000928:	f000 faba 	bl	8000ea0 <HAL_Delay>
    while(1) {
    	HAL_GPIO_WritePin (LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4827      	ldr	r0, [pc, #156]	; (80009d0 <main+0xf0>)
 8000934:	f000 fd82 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8000938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093c:	f000 fab0 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000946:	4822      	ldr	r0, [pc, #136]	; (80009d0 <main+0xf0>)
 8000948:	f000 fd78 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 800094c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000950:	f000 faa6 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095a:	481d      	ldr	r0, [pc, #116]	; (80009d0 <main+0xf0>)
 800095c:	f000 fd6e 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f000 fa9c 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <main+0xf0>)
 8000970:	f000 fd64 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000978:	f000 fa92 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <main+0xf0>)
 8000984:	f000 fd5a 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098c:	f000 fa88 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <main+0xf0>)
 8000998:	f000 fd50 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 800099c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a0:	f000 fa7e 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <main+0xf0>)
 80009ac:	f000 fd46 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 80009b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b4:	f000 fa74 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <main+0xf0>)
 80009c0:	f000 fd3c 	bl	800143c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 80009c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c8:	f000 fa6a 	bl	8000ea0 <HAL_Delay>
    	HAL_GPIO_WritePin (LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009cc:	e7ae      	b.n	800092c <main+0x4c>
 80009ce:	bf00      	nop
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b098      	sub	sp, #96	; 0x60
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f006 fd88 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <SystemClock_Config+0xfc>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <SystemClock_Config+0x100>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <SystemClock_Config+0x100>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0x100>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a52:	2308      	movs	r3, #8
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a56:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 ff2f 	bl	80038cc <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a74:	f000 f830 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2105      	movs	r1, #5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f95a 	bl	8003d50 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aa2:	f000 f819 	bl	8000ad8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aaa:	23c0      	movs	r3, #192	; 0xc0
 8000aac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fb24 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ac2:	f000 f809 	bl	8000ad8 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3760      	adds	r7, #96	; 0x60
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <MX_SPI1_Init+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b34:	220a      	movs	r2, #10
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b3a:	f003 fc21 	bl	8004380 <HAL_SPI_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b44:	f7ff ffc8 	bl	8000ad8 <Error_Handler>
  }

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000015c 	.word	0x2000015c
 8000b50:	40013000 	.word	0x40013000

08000b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fa9d 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f8ea 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <OTG_FS_IRQHandler+0x10>)
 8000c96:	f000 fe6f 	bl	8001978 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000584 	.word	0x20000584

08000ca4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x50>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x16>
		heap_end = &end;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <_sbrk+0x50>)
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <_sbrk+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <_sbrk+0x50>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <_sbrk+0x50>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	466a      	mov	r2, sp
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d907      	bls.n	8000cde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cce:	f006 fbd9 	bl	8007484 <__errno>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	e006      	b.n	8000cec <_sbrk+0x48>
	}

	heap_end += incr;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <_sbrk+0x50>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <_sbrk+0x50>)
 8000ce8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000ac 	.word	0x200000ac
 8000cf8:	20000850 	.word	0x20000850

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <SystemInit+0x60>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <SystemInit+0x60>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <SystemInit+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <SystemInit+0x64>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <SystemInit+0x64>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <SystemInit+0x64>)
 8000d28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <SystemInit+0x64>)
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <SystemInit+0x68>)
 8000d36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <SystemInit+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <SystemInit+0x64>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x60>)
 8000d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d50:	609a      	str	r2, [r3, #8]
#endif
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	40023800 	.word	0x40023800
 8000d64:	24003010 	.word	0x24003010

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
  ldr  r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffb3 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f006 fb7b 	bl	8007490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fda1 	bl	80008e0 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da4:	080076c0 	.word	0x080076c0
  ldr  r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dac:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000db0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000db4:	2000084c 	.word	0x2000084c

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f94d 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fef8 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f965 	bl	80010ee <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f92d 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200001b4 	.word	0x200001b4

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001b4 	.word	0x200001b4

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_Delay+0x40>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e16b      	b.n	80013fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 815a 	bne.w	80013f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x4a>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b12      	cmp	r3, #18
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	69b9      	ldr	r1, [r7, #24]
 8001196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0203 	and.w	r2, r3, #3
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d00b      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80b4 	beq.w	80013f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b5f      	ldr	r3, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x308>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a5e      	ldr	r2, [pc, #376]	; (8001410 <HAL_GPIO_Init+0x308>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x308>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <HAL_GPIO_Init+0x30c>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x310>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d025      	beq.n	800132a <HAL_GPIO_Init+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01f      	beq.n	8001326 <HAL_GPIO_Init+0x21e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x216>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x212>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x20e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x20a>
 800130e:	2307      	movs	r3, #7
 8001310:	e00e      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001312:	2308      	movs	r3, #8
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001316:	2306      	movs	r3, #6
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800132e:	2300      	movs	r3, #0
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001340:	4934      	ldr	r1, [pc, #208]	; (8001414 <HAL_GPIO_Init+0x30c>)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <HAL_GPIO_Init+0x330>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001372:	4a31      	ldr	r2, [pc, #196]	; (8001438 <HAL_GPIO_Init+0x330>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_GPIO_Init+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x330>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3301      	adds	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	f67f ae90 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001404:	bf00      	nop
 8001406:	3724      	adds	r7, #36	; 0x24
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800146e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001470:	b08f      	sub	sp, #60	; 0x3c
 8001472:	af0a      	add	r7, sp, #40	; 0x28
 8001474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e054      	b.n	800152a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f005 fd48 	bl	8006f30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f834 	bl	800452c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	687e      	ldr	r6, [r7, #4]
 80014cc:	466d      	mov	r5, sp
 80014ce:	f106 0410 	add.w	r4, r6, #16
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014de:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e2:	1d33      	adds	r3, r6, #4
 80014e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f002 ffae 	bl	8004448 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 f82b 	bl	800454e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	687e      	ldr	r6, [r7, #4]
 8001500:	466d      	mov	r5, sp
 8001502:	f106 0410 	add.w	r4, r6, #16
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001512:	e885 0003 	stmia.w	r5, {r0, r1}
 8001516:	1d33      	adds	r3, r6, #4
 8001518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f003 f93e 	bl	800479c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001532 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b089      	sub	sp, #36	; 0x24
 8001536:	af04      	add	r7, sp, #16
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	460b      	mov	r3, r1
 8001546:	70bb      	strb	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_HCD_HC_Init+0x28>
 8001556:	2302      	movs	r3, #2
 8001558:	e07f      	b.n	800165a <HAL_HCD_HC_Init+0x128>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	333d      	adds	r3, #61	; 0x3d
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3338      	adds	r3, #56	; 0x38
 8001586:	787a      	ldrb	r2, [r7, #1]
 8001588:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3340      	adds	r3, #64	; 0x40
 800159a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3339      	adds	r3, #57	; 0x39
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	333f      	adds	r3, #63	; 0x3f
 80015c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	78bb      	ldrb	r3, [r7, #2]
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	333a      	adds	r3, #58	; 0x3a
 80015e0:	4602      	mov	r2, r0
 80015e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da0a      	bge.n	8001602 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	333b      	adds	r3, #59	; 0x3b
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e009      	b.n	8001616 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	333b      	adds	r3, #59	; 0x3b
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	333c      	adds	r3, #60	; 0x3c
 8001626:	f897 2020 	ldrb.w	r2, [r7, #32]
 800162a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	787c      	ldrb	r4, [r7, #1]
 8001632:	78ba      	ldrb	r2, [r7, #2]
 8001634:	78f9      	ldrb	r1, [r7, #3]
 8001636:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4623      	mov	r3, r4
 8001648:	f003 fa2a 	bl	8004aa0 <USB_HC_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}

08001662 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_HCD_HC_Halt+0x1e>
 800167c:	2302      	movs	r3, #2
 800167e:	e00f      	b.n	80016a0 <HAL_HCD_HC_Halt+0x3e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fc64 	bl	8004f5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	70fb      	strb	r3, [r7, #3]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70bb      	strb	r3, [r7, #2]
 80016be:	4613      	mov	r3, r2
 80016c0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	333b      	adds	r3, #59	; 0x3b
 80016d2:	78ba      	ldrb	r2, [r7, #2]
 80016d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	333f      	adds	r3, #63	; 0x3f
 80016e6:	787a      	ldrb	r2, [r7, #1]
 80016e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016ea:	7c3b      	ldrb	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10a      	bne.n	8001706 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3342      	adds	r3, #66	; 0x42
 8001700:	2203      	movs	r2, #3
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e009      	b.n	800171a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3342      	adds	r3, #66	; 0x42
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800171a:	787b      	ldrb	r3, [r7, #1]
 800171c:	2b03      	cmp	r3, #3
 800171e:	f200 80d6 	bhi.w	80018ce <HAL_HCD_HC_SubmitRequest+0x226>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001739 	.word	0x08001739
 800172c:	080018b9 	.word	0x080018b9
 8001730:	080017a5 	.word	0x080017a5
 8001734:	0800182f 	.word	0x0800182f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001738:	7c3b      	ldrb	r3, [r7, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 80c9 	bne.w	80018d2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 80c5 	bne.w	80018d2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001748:	8b3b      	ldrh	r3, [r7, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3351      	adds	r3, #81	; 0x51
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3351      	adds	r3, #81	; 0x51
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10a      	bne.n	800178e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	3342      	adds	r3, #66	; 0x42
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800178c:	e0a1      	b.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	3342      	adds	r3, #66	; 0x42
 800179e:	2202      	movs	r2, #2
 80017a0:	701a      	strb	r2, [r3, #0]
      break;
 80017a2:	e096      	b.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d120      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3351      	adds	r3, #81	; 0x51
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017d4:	e07e      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e073      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3350      	adds	r3, #80	; 0x50
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e05d      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3342      	adds	r3, #66	; 0x42
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
      break;
 800182c:	e052      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d120      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3351      	adds	r3, #81	; 0x51
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800185e:	e039      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e02e      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3350      	adds	r3, #80	; 0x50
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10a      	bne.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3342      	adds	r3, #66	; 0x42
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
      break;
 80018a0:	e018      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3342      	adds	r3, #66	; 0x42
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      break;
 80018b6:	e00d      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3342      	adds	r3, #66	; 0x42
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
      break;
 80018cc:	e002      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80018ce:	bf00      	nop
 80018d0:	e000      	b.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80018d2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3344      	adds	r3, #68	; 0x44
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	8b39      	ldrh	r1, [r7, #24]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4403      	add	r3, r0
 80018f8:	3348      	adds	r3, #72	; 0x48
 80018fa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	335c      	adds	r3, #92	; 0x5c
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	334c      	adds	r3, #76	; 0x4c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3339      	adds	r3, #57	; 0x39
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	335d      	adds	r3, #93	; 0x5d
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	3338      	adds	r3, #56	; 0x38
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	18d1      	adds	r1, r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	f003 f9a4 	bl	8004cb4 <USB_HC_StartXfer>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fec1 	bl	8004716 <USB_GetMode>
 8001994:	4603      	mov	r3, r0
 8001996:	2b01      	cmp	r3, #1
 8001998:	f040 80f1 	bne.w	8001b7e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fea5 	bl	80046f0 <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80e7 	beq.w	8001b7c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fe9c 	bl	80046f0 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fe8c 	bl	80046f0 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019e2:	d104      	bne.n	80019ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fe7c 	bl	80046f0 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a02:	d104      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fe6c 	bl	80046f0 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d103      	bne.n	8001a2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2202      	movs	r2, #2
 8001a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fe5e 	bl	80046f0 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a3e:	d117      	bne.n	8001a70 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a52:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 fae9 	bl	800702c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 ff57 	bl	8004914 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fe3b 	bl	80046f0 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a84:	d102      	bne.n	8001a8c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 f8c8 	bl	8002c1c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fe2d 	bl	80046f0 <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d106      	bne.n	8001aae <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 faa7 	bl	8006ff4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fe1c 	bl	80046f0 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac2:	d138      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 fa37 	bl	8004f3c <USB_HC_ReadInterrupt>
 8001ace:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e025      	b.n	8001b22 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d018      	beq.n	8001b1c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b00:	d106      	bne.n	8001b10 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8cf 	bl	8001cac <HCD_HC_IN_IRQHandler>
 8001b0e:	e005      	b.n	8001b1c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fc5f 	bl	80023da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3d4      	bcc.n	8001ad6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fdd8 	bl	80046f0 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d101      	bne.n	8001b4e <HAL_HCD_IRQHandler+0x1d6>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_HCD_IRQHandler+0x1d8>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0210 	bic.w	r2, r2, #16
 8001b62:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 ffad 	bl	8002ac4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0210 	orr.w	r2, r2, #16
 8001b78:	619a      	str	r2, [r3, #24]
 8001b7a:	e000      	b.n	8001b7e <HAL_HCD_IRQHandler+0x206>
      return;
 8001b7c:	bf00      	nop
    }
  }
}
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_HCD_Start+0x16>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e013      	b.n	8001bc2 <HAL_HCD_Start+0x3e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fcaf 	bl	800450a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 ff12 	bl	80049dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_HCD_Stop+0x16>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e00d      	b.n	8001bfc <HAL_HCD_Stop+0x32>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 faf1 	bl	80051d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 feb9 	bl	8004988 <USB_ResetPort>
 8001c16:	4603      	mov	r3, r0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	335c      	adds	r3, #92	; 0x5c
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	334c      	adds	r3, #76	; 0x4c
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fefb 	bl	8004a7c <USB_GetCurrentFrame>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fed6 	bl	8004a4e <USB_GetHostSpeed>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d119      	bne.n	8001d10 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2304      	movs	r3, #4
 8001cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	0151      	lsls	r1, r2, #5
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	440a      	add	r2, r1
 8001d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	60d3      	str	r3, [r2, #12]
 8001d0e:	e095      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d109      	bne.n	8001d3a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	2320      	movs	r3, #32
 8001d36:	6093      	str	r3, [r2, #8]
 8001d38:	e080      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d134      	bne.n	8001dba <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	0151      	lsls	r1, r2, #5
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	440a      	add	r2, r1
 8001d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335d      	adds	r3, #93	; 0x5d
 8001d80:	2205      	movs	r2, #5
 8001d82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	2310      	movs	r3, #16
 8001d94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	461a      	mov	r2, r3
 8001da4:	2308      	movs	r3, #8
 8001da6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f8d3 	bl	8004f5e <USB_HC_Halt>
 8001db8:	e040      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd0:	d134      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	0151      	lsls	r1, r2, #5
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	440a      	add	r2, r1
 8001de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 f8ae 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2310      	movs	r3, #16
 8001e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	335d      	adds	r3, #93	; 0x5d
 8001e24:	2208      	movs	r2, #8
 8001e26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	461a      	mov	r2, r3
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e52:	d122      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	0151      	lsls	r1, r2, #5
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	440a      	add	r2, r1
 8001e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 f86d 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e98:	e29b      	b.n	80023d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 80c1 	bne.w	8002034 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d01b      	beq.n	8001ef2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3348      	adds	r3, #72	; 0x48
 8001eca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0159      	lsls	r1, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ede:	1ad1      	subs	r1, r2, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4403      	add	r3, r0
 8001eee:	334c      	adds	r3, #76	; 0x4c
 8001ef0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	335d      	adds	r3, #93	; 0x5d
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3358      	adds	r3, #88	; 0x58
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	333f      	adds	r3, #63	; 0x3f
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333f      	adds	r3, #63	; 0x3f
 8001f52:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d121      	bne.n	8001f9c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	0151      	lsls	r1, r2, #5
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	440a      	add	r2, r1
 8001f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 ffeb 	bl	8004f5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2310      	movs	r3, #16
 8001f98:	6093      	str	r3, [r2, #8]
 8001f9a:	e034      	b.n	8002006 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	333f      	adds	r3, #63	; 0x3f
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d129      	bne.n	8002006 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	0151      	lsls	r1, r2, #5
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fd0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	335c      	adds	r3, #92	; 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	b2d8      	uxtb	r0, r3
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	335c      	adds	r3, #92	; 0x5c
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4601      	mov	r1, r0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f005 f821 	bl	8007048 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3350      	adds	r3, #80	; 0x50
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2d8      	uxtb	r0, r3
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	3350      	adds	r3, #80	; 0x50
 800202e:	4602      	mov	r2, r0
 8002030:	701a      	strb	r2, [r3, #0]
}
 8002032:	e1ce      	b.n	80023d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	f040 80f1 	bne.w	800222e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	0151      	lsls	r1, r2, #5
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	440a      	add	r2, r1
 8002062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002066:	f023 0302 	bic.w	r3, r3, #2
 800206a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	335d      	adds	r3, #93	; 0x5d
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10a      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	335c      	adds	r3, #92	; 0x5c
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e0b0      	b.n	80021fa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	335d      	adds	r3, #93	; 0x5d
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d10a      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	335c      	adds	r3, #92	; 0x5c
 80020be:	2205      	movs	r2, #5
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e09a      	b.n	80021fa <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d00a      	beq.n	80020f0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335d      	adds	r3, #93	; 0x5d
 80020ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d156      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3358      	adds	r3, #88	; 0x58
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4403      	add	r3, r0
 8002112:	3358      	adds	r3, #88	; 0x58
 8002114:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3358      	adds	r3, #88	; 0x58
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d914      	bls.n	8002156 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	3358      	adds	r3, #88	; 0x58
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	335c      	adds	r3, #92	; 0x5c
 8002150:	2204      	movs	r2, #4
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e009      	b.n	800216a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	335c      	adds	r3, #92	; 0x5c
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002180:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002188:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02d      	b.n	80021fa <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	335d      	adds	r3, #93	; 0x5d
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d122      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	2202      	movs	r2, #2
 80021c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	2302      	movs	r3, #2
 800220a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	335c      	adds	r3, #92	; 0x5c
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4601      	mov	r1, r0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f004 ff0e 	bl	8007048 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800222c:	e0d1      	b.n	80023d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d13e      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	0151      	lsls	r1, r2, #5
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	440a      	add	r2, r1
 800225a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	3358      	adds	r3, #88	; 0x58
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4403      	add	r3, r0
 8002286:	3358      	adds	r3, #88	; 0x58
 8002288:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	335d      	adds	r3, #93	; 0x5d
 800229a:	2206      	movs	r2, #6
 800229c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fe58 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	e087      	b.n	80023d2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d17c      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	333f      	adds	r3, #63	; 0x3f
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d122      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3358      	adds	r3, #88	; 0x58
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	0151      	lsls	r1, r2, #5
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	440a      	add	r2, r1
 8002318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f002 fe16 	bl	8004f5e <USB_HC_Halt>
 8002332:	e045      	b.n	80023c0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	333f      	adds	r3, #63	; 0x3f
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	333f      	adds	r3, #63	; 0x3f
 800235a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800235c:	2b02      	cmp	r3, #2
 800235e:	d12f      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3358      	adds	r3, #88	; 0x58
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d121      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335d      	adds	r3, #93	; 0x5d
 800238c:	2203      	movs	r2, #3
 800238e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fdcf 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	2310      	movs	r3, #16
 80023d0:	6093      	str	r3, [r2, #8]
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d119      	bne.n	800243e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2304      	movs	r3, #4
 800241a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	0151      	lsls	r1, r2, #5
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	440a      	add	r2, r1
 8002432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800243c:	e33e      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b20      	cmp	r3, #32
 8002452:	d141      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2320      	movs	r3, #32
 8002464:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	333d      	adds	r3, #61	; 0x3d
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	f040 831f 	bne.w	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	333d      	adds	r3, #61	; 0x3d
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fd44 	bl	8004f5e <USB_HC_Halt>
}
 80024d6:	e2f1      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d13f      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	335d      	adds	r3, #93	; 0x5d
 80024fe:	2204      	movs	r2, #4
 8002500:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	333d      	adds	r3, #61	; 0x3d
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3358      	adds	r3, #88	; 0x58
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	0151      	lsls	r1, r2, #5
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	440a      	add	r2, r1
 8002540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fd02 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2340      	movs	r3, #64	; 0x40
 800256a:	6093      	str	r3, [r2, #8]
}
 800256c:	e2a6      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d122      	bne.n	80025cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	440a      	add	r2, r1
 800259c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fcd4 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c8:	6093      	str	r3, [r2, #8]
}
 80025ca:	e277      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d135      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	3358      	adds	r3, #88	; 0x58
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	0151      	lsls	r1, r2, #5
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	440a      	add	r2, r1
 800260c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fc9c 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	335d      	adds	r3, #93	; 0x5d
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
}
 800264c:	e236      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b08      	cmp	r3, #8
 8002662:	d12b      	bne.n	80026bc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2308      	movs	r3, #8
 8002674:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	440a      	add	r2, r1
 800268c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fc5c 	bl	8004f5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335d      	adds	r3, #93	; 0x5d
 80026b6:	2205      	movs	r2, #5
 80026b8:	701a      	strb	r2, [r3, #0]
}
 80026ba:	e1ff      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d155      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	3358      	adds	r3, #88	; 0x58
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335d      	adds	r3, #93	; 0x5d
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	333d      	adds	r3, #61	; 0x3d
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d114      	bne.n	800273a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	333c      	adds	r3, #60	; 0x3c
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	333d      	adds	r3, #61	; 0x3d
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	440a      	add	r2, r1
 8002750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fbfa 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	461a      	mov	r2, r3
 8002778:	2310      	movs	r3, #16
 800277a:	6093      	str	r3, [r2, #8]
}
 800277c:	e19e      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d12b      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	0151      	lsls	r1, r2, #5
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	440a      	add	r2, r1
 80027aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fbcd 	bl	8004f5e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335d      	adds	r3, #93	; 0x5d
 80027d4:	2206      	movs	r2, #6
 80027d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	6093      	str	r3, [r2, #8]
}
 80027ea:	e167      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002802:	d135      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	0151      	lsls	r1, r2, #5
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	440a      	add	r2, r1
 800281a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fb95 	bl	8004f5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2310      	movs	r3, #16
 8002844:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002858:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	335d      	adds	r3, #93	; 0x5d
 800286a:	2208      	movs	r2, #8
 800286c:	701a      	strb	r2, [r3, #0]
}
 800286e:	e125      	b.n	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	f040 811a 	bne.w	8002abc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	440a      	add	r2, r1
 800289e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a2:	f023 0302 	bic.w	r3, r3, #2
 80028a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	335d      	adds	r3, #93	; 0x5d
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d137      	bne.n	800292e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	335c      	adds	r3, #92	; 0x5c
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	333f      	adds	r3, #63	; 0x3f
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d00b      	beq.n	8002900 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	333f      	adds	r3, #63	; 0x3f
 80028f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	f040 80c5 	bne.w	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3351      	adds	r3, #81	; 0x51
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2d8      	uxtb	r0, r3
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	3351      	adds	r3, #81	; 0x51
 8002928:	4602      	mov	r2, r0
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e0ad      	b.n	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	335d      	adds	r3, #93	; 0x5d
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d10a      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e097      	b.n	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	335d      	adds	r3, #93	; 0x5d
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d10a      	bne.n	8002986 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	335c      	adds	r3, #92	; 0x5c
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e081      	b.n	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	335d      	adds	r3, #93	; 0x5d
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10a      	bne.n	80029b2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	2205      	movs	r2, #5
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e06b      	b.n	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	335d      	adds	r3, #93	; 0x5d
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d00a      	beq.n	80029de <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	335d      	adds	r3, #93	; 0x5d
 80029d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d155      	bne.n	8002a8a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3358      	adds	r3, #88	; 0x58
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c59      	adds	r1, r3, #1
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4403      	add	r3, r0
 8002a00:	3358      	adds	r3, #88	; 0x58
 8002a02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	3358      	adds	r3, #88	; 0x58
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d914      	bls.n	8002a44 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	3358      	adds	r3, #88	; 0x58
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	2204      	movs	r2, #4
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e009      	b.n	8002a58 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	2302      	movs	r3, #2
 8002a9a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	b2d8      	uxtb	r0, r3
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f004 fac6 	bl	8007048 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	0c5b      	lsrs	r3, r3, #17
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d003      	beq.n	8002b08 <HCD_RXQLVL_IRQHandler+0x44>
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	f000 8082 	beq.w	8002c0a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b06:	e083      	b.n	8002c10 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d07f      	beq.n	8002c0e <HCD_RXQLVL_IRQHandler+0x14a>
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d074      	beq.n	8002c0e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3344      	adds	r3, #68	; 0x44
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f001 fdad 	bl	800469e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3344      	adds	r3, #68	; 0x44
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	18d1      	adds	r1, r2, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4403      	add	r3, r0
 8002b68:	3344      	adds	r3, #68	; 0x44
 8002b6a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	; 0x4c
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	18d1      	adds	r1, r2, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4403      	add	r3, r0
 8002b90:	334c      	adds	r3, #76	; 0x4c
 8002b92:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HCD_RXQLVL_IRQHandler+0x154>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d031      	beq.n	8002c0e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	f083 0301 	eor.w	r3, r3, #1
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3350      	adds	r3, #80	; 0x50
 8002c04:	4602      	mov	r2, r0
 8002c06:	701a      	strb	r2, [r3, #0]
      break;
 8002c08:	e001      	b.n	8002c0e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c0e:	bf00      	nop
  }
}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	1ff80000 	.word	0x1ff80000

08002c1c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c48:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d113      	bne.n	8002c7c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10a      	bne.n	8002c74 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c6c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f004 f9ce 	bl	8007010 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f043 0302 	orr.w	r3, r3, #2
 8002c7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d147      	bne.n	8002d16 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d129      	bne.n	8002cec <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d113      	bne.n	8002cc8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002caa:	d106      	bne.n	8002cba <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fe2e 	bl	8004914 <USB_InitFSLSPClkSel>
 8002cb8:	e011      	b.n	8002cde <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fe27 	bl	8004914 <USB_InitFSLSPClkSel>
 8002cc6:	e00a      	b.n	8002cde <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cdc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 f9c0 	bl	8007064 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f004 f993 	bl	8007010 <HAL_HCD_Connect_Callback>
 8002cea:	e014      	b.n	8002d16 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f004 f9c7 	bl	8007080 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d04:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d103      	bne.n	8002d28 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f043 0320 	orr.w	r3, r3, #32
 8002d26:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e10f      	b.n	8002f6e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fcdc 	bl	8000720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d80:	f001 f9ac 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 8002d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a7b      	ldr	r2, [pc, #492]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d807      	bhi.n	8002da0 <HAL_I2C_Init+0x64>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a7a      	ldr	r2, [pc, #488]	; (8002f7c <HAL_I2C_Init+0x240>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e006      	b.n	8002dae <HAL_I2C_Init+0x72>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_I2C_Init+0x244>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0db      	b.n	8002f6e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <HAL_I2C_Init+0x248>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d802      	bhi.n	8002df0 <HAL_I2C_Init+0xb4>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3301      	adds	r3, #1
 8002dee:	e009      	b.n	8002e04 <HAL_I2C_Init+0xc8>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_I2C_Init+0x24c>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4956      	ldr	r1, [pc, #344]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d80d      	bhi.n	8002e40 <HAL_I2C_Init+0x104>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e59      	subs	r1, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	bf38      	it	cc
 8002e3c:	2304      	movcc	r3, #4
 8002e3e:	e04f      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <HAL_I2C_Init+0x130>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e012      	b.n	8002e92 <HAL_I2C_Init+0x156>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Init+0x15e>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e022      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_I2C_Init+0x184>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1e58      	subs	r0, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6911      	ldr	r1, [r2, #16]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	000186a0 	.word	0x000186a0
 8002f7c:	001e847f 	.word	0x001e847f
 8002f80:	003d08ff 	.word	0x003d08ff
 8002f84:	431bde83 	.word	0x431bde83
 8002f88:	10624dd3 	.word	0x10624dd3

08002f8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e128      	b.n	80031f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a90      	ldr	r2, [pc, #576]	; (80031f8 <HAL_I2S_Init+0x26c>)
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd fc29 	bl	8000810 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fd4:	f023 030f 	bic.w	r3, r3, #15
 8002fd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d060      	beq.n	80030ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e001      	b.n	8002ffc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b20      	cmp	r3, #32
 8003002:	d802      	bhi.n	800300a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800300a:	2001      	movs	r0, #1
 800300c:	f001 f95c 	bl	80042c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003010:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301a:	d125      	bne.n	8003068 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fbb2 f2f3 	udiv	r2, r2, r3
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	3305      	adds	r3, #5
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e01f      	b.n	8003086 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	3305      	adds	r3, #5
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	e00e      	b.n	8003086 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	3305      	adds	r3, #5
 8003084:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4a5c      	ldr	r2, [pc, #368]	; (80031fc <HAL_I2S_Init+0x270>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e003      	b.n	80030b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d902      	bls.n	80030c0 <HAL_I2S_Init+0x134>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2bff      	cmp	r3, #255	; 0xff
 80030be:	d907      	bls.n	80030d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e08f      	b.n	80031f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6851      	ldr	r1, [r2, #4]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6992      	ldr	r2, [r2, #24]
 8003106:	430a      	orrs	r2, r1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d161      	bne.n	80031e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_I2S_Init+0x274>)
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_I2S_Init+0x278>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_I2S_Init+0x1a4>
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_I2S_Init+0x27c>)
 800312e:	e001      	b.n	8003134 <HAL_I2S_Init+0x1a8>
 8003130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4932      	ldr	r1, [pc, #200]	; (8003204 <HAL_I2S_Init+0x278>)
 800313c:	428a      	cmp	r2, r1
 800313e:	d101      	bne.n	8003144 <HAL_I2S_Init+0x1b8>
 8003140:	4a31      	ldr	r2, [pc, #196]	; (8003208 <HAL_I2S_Init+0x27c>)
 8003142:	e001      	b.n	8003148 <HAL_I2S_Init+0x1bc>
 8003144:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003148:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_I2S_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_I2S_Init+0x1d4>
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_I2S_Init+0x27c>)
 800315e:	e001      	b.n	8003164 <HAL_I2S_Init+0x1d8>
 8003160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003164:	2202      	movs	r2, #2
 8003166:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_I2S_Init+0x278>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_I2S_Init+0x1ea>
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_I2S_Init+0x27c>)
 8003174:	e001      	b.n	800317a <HAL_I2S_Init+0x1ee>
 8003176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003186:	d003      	beq.n	8003190 <HAL_I2S_Init+0x204>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e001      	b.n	800319c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	b299      	uxth	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031b2:	4303      	orrs	r3, r0
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	430b      	orrs	r3, r1
 80031b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b29a      	uxth	r2, r3
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_I2S_Init+0x278>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_I2S_Init+0x24c>
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <HAL_I2S_Init+0x27c>)
 80031d6:	e001      	b.n	80031dc <HAL_I2S_Init+0x250>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	897a      	ldrh	r2, [r7, #10]
 80031de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	08003303 	.word	0x08003303
 80031fc:	cccccccd 	.word	0xcccccccd
 8003200:	08003419 	.word	0x08003419
 8003204:	40003800 	.word	0x40003800
 8003208:	40003400 	.word	0x40003400

0800320c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800328c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffb8 	bl	800320c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	b292      	uxth	r2, r2
 80032b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff93 	bl	8003220 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b04      	cmp	r3, #4
 800331c:	d13a      	bne.n	8003394 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d109      	bne.n	800333c <I2S_IRQHandler+0x3a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d102      	bne.n	800333c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffb4 	bl	80032a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d126      	bne.n	8003394 <I2S_IRQHandler+0x92>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d11f      	bne.n	8003394 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003362:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff50 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d136      	bne.n	800340e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d109      	bne.n	80033be <I2S_IRQHandler+0xbc>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d102      	bne.n	80033be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff45 	bl	8003248 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d122      	bne.n	800340e <I2S_IRQHandler+0x10c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d11b      	bne.n	800340e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff13 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4aa2      	ldr	r2, [pc, #648]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003432:	4ba2      	ldr	r3, [pc, #648]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003434:	e001      	b.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a9b      	ldr	r2, [pc, #620]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003450:	4b9a      	ldr	r3, [pc, #616]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003452:	e001      	b.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003464:	d004      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 8099 	bne.w	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f925 	bl	80036d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9c8 	bl	8003834 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d13a      	bne.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d035      	beq.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7e      	ldr	r2, [pc, #504]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034c2:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034c4:	e001      	b.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4979      	ldr	r1, [pc, #484]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034d2:	428b      	cmp	r3, r1
 80034d4:	d101      	bne.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034d6:	4b79      	ldr	r3, [pc, #484]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034d8:	e001      	b.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe88 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	f040 80be 	bne.w	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80b8 	beq.w	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a59      	ldr	r2, [pc, #356]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003556:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4954      	ldr	r1, [pc, #336]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe4a 	bl	8003234 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a0:	e084      	b.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d107      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8be 	bl	8003738 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8fd 	bl	80037d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d12f      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d02a      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003606:	e001      	b.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4929      	ldr	r1, [pc, #164]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003614:	428b      	cmp	r3, r1
 8003616:	d101      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800361a:	e001      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003624:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fdfa 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	d131      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02c      	beq.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fdc5 	bl	8003234 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	e000      	b.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ac:	bf00      	nop
}
 80036ae:	bf00      	nop
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40003800 	.word	0x40003800
 80036bc:	40003400 	.word	0x40003400

080036c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c99      	adds	r1, r3, #2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6251      	str	r1, [r2, #36]	; 0x24
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffc9 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c99      	adds	r1, r3, #2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6251      	str	r1, [r2, #36]	; 0x24
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <I2SEx_TxISR_I2SExt+0x22>
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003758:	e001      	b.n	800375e <I2SEx_TxISR_I2SExt+0x26>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	460a      	mov	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <I2SEx_TxISR_I2SExt+0x50>
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 8003786:	e001      	b.n	800378c <I2SEx_TxISR_I2SExt+0x54>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d101      	bne.n	800379c <I2SEx_TxISR_I2SExt+0x64>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <I2SEx_TxISR_I2SExt+0x94>)
 800379a:	e001      	b.n	80037a0 <I2SEx_TxISR_I2SExt+0x68>
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff81 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40003800 	.word	0x40003800
 80037cc:	40003400 	.word	0x40003400

080037d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d8      	ldr	r0, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	1c99      	adds	r1, r3, #2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037e8:	b282      	uxth	r2, r0
 80037ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff4a 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <I2SEx_RxISR_I2SExt+0x16>
 8003846:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003848:	e001      	b.n	800384e <I2SEx_RxISR_I2SExt+0x1a>
 800384a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384e:	68d8      	ldr	r0, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	1c99      	adds	r1, r3, #2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	62d1      	str	r1, [r2, #44]	; 0x2c
 800385a:	b282      	uxth	r2, r0
 800385c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <I2SEx_RxISR_I2SExt+0x50>
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003882:	e001      	b.n	8003888 <I2SEx_RxISR_I2SExt+0x54>
 8003884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	490d      	ldr	r1, [pc, #52]	; (80038c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d101      	bne.n	8003898 <I2SEx_RxISR_I2SExt+0x64>
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003896:	e001      	b.n	800389c <I2SEx_RxISR_I2SExt+0x68>
 8003898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff03 	bl	80036c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40003800 	.word	0x40003800
 80038c8:	40003400 	.word	0x40003400

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e22d      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ea:	4ba3      	ldr	r3, [pc, #652]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4ba0      	ldr	r3, [pc, #640]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b9d      	ldr	r3, [pc, #628]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b99      	ldr	r3, [pc, #612]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e208      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a90      	ldr	r2, [pc, #576]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a8a      	ldr	r2, [pc, #552]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b84      	ldr	r3, [pc, #528]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a83      	ldr	r2, [pc, #524]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a80      	ldr	r2, [pc, #512]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fa80 	bl	8000e88 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fa7c 	bl	8000e88 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1cd      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fa6c 	bl	8000e88 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fa68 	bl	8000e88 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1b9      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e18d      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4952      	ldr	r1, [pc, #328]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <HAL_RCC_OscConfig+0x2b0>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd fa21 	bl	8000e88 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fd fa1d 	bl	8000e88 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e16e      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4940      	ldr	r1, [pc, #256]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x2b0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fa00 	bl	8000e88 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9fc 	bl	8000e88 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e14d      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d030      	beq.n	8003b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_RCC_OscConfig+0x2b4>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fd f9e0 	bl	8000e88 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd f9dc 	bl	8000e88 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e12d      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e015      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x2b4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd f9c9 	bl	8000e88 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd f9c5 	bl	8000e88 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e116      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a0 	beq.w	8003c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10f      	bne.n	8003b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d121      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd f98b 	bl	8000e88 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	e011      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ce>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470000 	.word	0x42470000
 8003b80:	42470e80 	.word	0x42470e80
 8003b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fd f97e 	bl	8000e88 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0cf      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2f0>
 8003bae:	4b66      	ldr	r3, [pc, #408]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	e01c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x32a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCC_OscConfig+0x312>
 8003bc4:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a5c      	ldr	r2, [pc, #368]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e00b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x32a>
 8003bde:	4b5a      	ldr	r3, [pc, #360]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a59      	ldr	r2, [pc, #356]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f943 	bl	8000e88 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd f93f 	bl	8000e88 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e08e      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <HAL_RCC_OscConfig+0x33a>
 8003c28:	e014      	b.n	8003c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f92d 	bl	8000e88 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd f929 	bl	8000e88 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e078      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ee      	bne.n	8003c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a3a      	ldr	r2, [pc, #232]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d064      	beq.n	8003d38 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d05c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d141      	bne.n	8003d06 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_OscConfig+0x480>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd f8fe 	bl	8000e88 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd f8fa 	bl	8000e88 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04b      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	491d      	ldr	r1, [pc, #116]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <HAL_RCC_OscConfig+0x480>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fd f8d3 	bl	8000e88 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fd f8cf 	bl	8000e88 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e020      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x41a>
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCC_OscConfig+0x480>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f8bc 	bl	8000e88 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd f8b8 	bl	8000e88 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e009      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCC_OscConfig+0x47c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x448>
 8003d32:	e001      	b.n	8003d38 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40007000 	.word	0x40007000
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	42470060 	.word	0x42470060

08003d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ca      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d90c      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0b6      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dbc:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a51      	ldr	r2, [pc, #324]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	494c      	ldr	r1, [pc, #304]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d044      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d119      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07d      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06d      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e065      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4933      	ldr	r1, [pc, #204]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e40:	f7fd f822 	bl	8000e88 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fd f81e 	bl	8000e88 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e04d      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20c      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_RCC_ClockConfig+0x1b4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e030      	b.n	8003efa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4915      	ldr	r1, [pc, #84]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	490d      	ldr	r1, [pc, #52]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed6:	f000 f81d 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003eda:	4601      	mov	r1, r0
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
 8003eea:	fa21 f303 	lsr.w	r3, r1, r3
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f7fc ff84 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08007698 	.word	0x08007698
 8003f10:	20000000 	.word	0x20000000

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d007      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x32>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d008      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x38>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 80b4 	bne.w	80040a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b5e      	ldr	r3, [pc, #376]	; (80040bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f42:	60bb      	str	r3, [r7, #8]
       break;
 8003f44:	e0b3      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f46:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f48:	60bb      	str	r3, [r7, #8]
      break;
 8003f4a:	e0b0      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f56:	4b58      	ldr	r3, [pc, #352]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d04a      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f62:	4b55      	ldr	r3, [pc, #340]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	ea03 0501 	and.w	r5, r3, r1
 8003f78:	ea04 0602 	and.w	r6, r4, r2
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4632      	mov	r2, r6
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	0154      	lsls	r4, r2, #5
 8003f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f8e:	014b      	lsls	r3, r1, #5
 8003f90:	4619      	mov	r1, r3
 8003f92:	4622      	mov	r2, r4
 8003f94:	1b49      	subs	r1, r1, r5
 8003f96:	eb62 0206 	sbc.w	r2, r2, r6
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	f04f 0400 	mov.w	r4, #0
 8003fa2:	0194      	lsls	r4, r2, #6
 8003fa4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fa8:	018b      	lsls	r3, r1, #6
 8003faa:	1a5b      	subs	r3, r3, r1
 8003fac:	eb64 0402 	sbc.w	r4, r4, r2
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	00e2      	lsls	r2, r4, #3
 8003fba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fbe:	00d9      	lsls	r1, r3, #3
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	195b      	adds	r3, r3, r5
 8003fc6:	eb44 0406 	adc.w	r4, r4, r6
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	0262      	lsls	r2, r4, #9
 8003fd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fd8:	0259      	lsls	r1, r3, #9
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4614      	mov	r4, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f04f 0400 	mov.w	r4, #0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	f7fc f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e049      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	f04f 0400 	mov.w	r4, #0
 8004002:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	ea03 0501 	and.w	r5, r3, r1
 800400e:	ea04 0602 	and.w	r6, r4, r2
 8004012:	4629      	mov	r1, r5
 8004014:	4632      	mov	r2, r6
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	f04f 0400 	mov.w	r4, #0
 800401e:	0154      	lsls	r4, r2, #5
 8004020:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004024:	014b      	lsls	r3, r1, #5
 8004026:	4619      	mov	r1, r3
 8004028:	4622      	mov	r2, r4
 800402a:	1b49      	subs	r1, r1, r5
 800402c:	eb62 0206 	sbc.w	r2, r2, r6
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	f04f 0400 	mov.w	r4, #0
 8004038:	0194      	lsls	r4, r2, #6
 800403a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	1a5b      	subs	r3, r3, r1
 8004042:	eb64 0402 	sbc.w	r4, r4, r2
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	00e2      	lsls	r2, r4, #3
 8004050:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004054:	00d9      	lsls	r1, r3, #3
 8004056:	460b      	mov	r3, r1
 8004058:	4614      	mov	r4, r2
 800405a:	195b      	adds	r3, r3, r5
 800405c:	eb44 0406 	adc.w	r4, r4, r6
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	02a2      	lsls	r2, r4, #10
 800406a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800406e:	0299      	lsls	r1, r3, #10
 8004070:	460b      	mov	r3, r1
 8004072:	4614      	mov	r4, r2
 8004074:	4618      	mov	r0, r3
 8004076:	4621      	mov	r1, r4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f04f 0400 	mov.w	r4, #0
 800407e:	461a      	mov	r2, r3
 8004080:	4623      	mov	r3, r4
 8004082:	f7fc f8a1 	bl	80001c8 <__aeabi_uldivmod>
 8004086:	4603      	mov	r3, r0
 8004088:	460c      	mov	r4, r1
 800408a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	60bb      	str	r3, [r7, #8]
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040aa:	60bb      	str	r3, [r7, #8]
      break;
 80040ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ae:	68bb      	ldr	r3, [r7, #8]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000000 	.word	0x20000000

080040dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040e0:	f7ff fff0 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	080076a8 	.word	0x080076a8

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004128:	2b00      	cmp	r3, #0
 800412a:	d035      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800412c:	4b62      	ldr	r3, [pc, #392]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004132:	f7fc fea9 	bl	8000e88 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800413a:	f7fc fea5 	bl	8000e88 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0b0      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	019a      	lsls	r2, r3, #6
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	071b      	lsls	r3, r3, #28
 8004164:	4955      	ldr	r1, [pc, #340]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800416c:	4b52      	ldr	r3, [pc, #328]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004172:	f7fc fe89 	bl	8000e88 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800417a:	f7fc fe85 	bl	8000e88 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e090      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800418c:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8083 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	4b44      	ldr	r3, [pc, #272]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a43      	ldr	r2, [pc, #268]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a3e      	ldr	r2, [pc, #248]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041ce:	f7fc fe5b 	bl	8000e88 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7fc fe57 	bl	8000e88 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e062      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02f      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	429a      	cmp	r2, r3
 8004210:	d028      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d114      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800423a:	f7fc fe25 	bl	8000e88 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	e00a      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fc fe21 	bl	8000e88 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e02a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ee      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004270:	d10d      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]
 800428c:	e005      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004294:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004298:	6093      	str	r3, [r2, #8]
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a6:	4905      	ldr	r1, [pc, #20]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	42470068 	.word	0x42470068
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470e40 	.word	0x42470e40

080042c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d13d      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ee:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d12f      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042fc:	617b      	str	r3, [r7, #20]
          break;
 80042fe:	e02f      	b.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430c:	d108      	bne.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800430e:	4b18      	ldr	r3, [pc, #96]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e007      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434a:	0f1b      	lsrs	r3, r3, #28
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
          break;
 8004358:	e002      	b.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
          break;
 800435e:	bf00      	nop
        }
      }
      break;
 8004360:	bf00      	nop
    }
  }
  return frequency;
 8004362:	697b      	ldr	r3, [r7, #20]
}
 8004364:	4618      	mov	r0, r3
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40023800 	.word	0x40023800
 8004374:	00bb8000 	.word	0x00bb8000
 8004378:	007a1200 	.word	0x007a1200
 800437c:	00f42400 	.word	0x00f42400

08004380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e056      	b.n	8004440 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fc fbd1 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	ea42 0103 	orr.w	r1, r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	f003 0104 	and.w	r1, r3, #4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800442e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004448:	b084      	sub	sp, #16
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	f107 001c 	add.w	r0, r7, #28
 8004456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	d122      	bne.n	80044a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f94a 	bl	8004734 <USB_CoreReset>
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	e01a      	b.n	80044dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f93e 	bl	8004734 <USB_CoreReset>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
 80044ce:	e005      	b.n	80044dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d10b      	bne.n	80044fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f043 0206 	orr.w	r2, r3, #6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004506:	b004      	add	sp, #16
 8004508:	4770      	bx	lr

0800450a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f043 0201 	orr.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 0201 	bic.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e00b      	b.n	8004592 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e001      	b.n	8004592 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e003      	b.n	800459a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f7fc fc84 	bl	8000ea0 <HAL_Delay>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <USB_FlushTxFifo+0x48>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e006      	b.n	80045de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d0f0      	beq.n	80045be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	00030d40 	.word	0x00030d40

080045f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2210      	movs	r2, #16
 8004600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <USB_FlushRxFifo+0x40>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e006      	b.n	8004622 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b10      	cmp	r3, #16
 800461e:	d0f0      	beq.n	8004602 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	00030d40 	.word	0x00030d40

08004634 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	460b      	mov	r3, r1
 8004644:	71fb      	strb	r3, [r7, #7]
 8004646:	4613      	mov	r3, r2
 8004648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004652:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11a      	bne.n	8004690 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800465a:	88bb      	ldrh	r3, [r7, #4]
 800465c:	3303      	adds	r3, #3
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e00f      	b.n	8004688 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	031a      	lsls	r2, r3, #12
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4413      	add	r3, r2
 8004670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004674:	461a      	mov	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3304      	adds	r3, #4
 8004680:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3301      	adds	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d3eb      	bcc.n	8004668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800469e:	b480      	push	{r7}
 80046a0:	b089      	sub	sp, #36	; 0x24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	3303      	adds	r3, #3
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00b      	b.n	80046da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3304      	adds	r3, #4
 80046d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3ef      	bcc.n	80046c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80046e2:	69fb      	ldr	r3, [r7, #28]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3724      	adds	r7, #36	; 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0301 	and.w	r3, r3, #1
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <USB_CoreReset+0x64>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e01b      	b.n	800478a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	daf2      	bge.n	8004740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <USB_CoreReset+0x64>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e006      	b.n	800478a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d0f0      	beq.n	800476a <USB_CoreReset+0x36>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	00030d40 	.word	0x00030d40

0800479c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800479c:	b084      	sub	sp, #16
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	f107 001c 	add.w	r0, r7, #28
 80047aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d10a      	bne.n	800480a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e014      	b.n	8004834 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e009      	b.n	8004834 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004834:	2110      	movs	r1, #16
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff feb4 	bl	80045a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fed7 	bl	80045f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e015      	b.n	8004874 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	461a      	mov	r2, r3
 800486a:	2300      	movs	r3, #0
 800486c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	429a      	cmp	r2, r3
 800487a:	d3e5      	bcc.n	8004848 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800487c:	2101      	movs	r1, #1
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8ac 	bl	80049dc <USB_DriveVbus>

  HAL_Delay(200U);
 8004884:	20c8      	movs	r0, #200	; 0xc8
 8004886:	f7fc fb0b 	bl	8000ea0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
 8004896:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <USB_HostInit+0x164>)
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <USB_HostInit+0x168>)
 80048b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80048ba:	e009      	b.n	80048d0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a10      	ldr	r2, [pc, #64]	; (8004908 <USB_HostInit+0x16c>)
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a10      	ldr	r2, [pc, #64]	; (800490c <USB_HostInit+0x170>)
 80048cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f043 0210 	orr.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <USB_HostInit+0x174>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048fa:	b004      	add	sp, #16
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	01000200 	.word	0x01000200
 8004904:	00e00300 	.word	0x00e00300
 8004908:	00600080 	.word	0x00600080
 800490c:	004000e0 	.word	0x004000e0
 8004910:	a3200008 	.word	0xa3200008

08004914 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004932:	f023 0303 	bic.w	r3, r3, #3
 8004936:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495c:	461a      	mov	r2, r3
 800495e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004962:	6053      	str	r3, [r2, #4]
 8004964:	e009      	b.n	800497a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d106      	bne.n	800497a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004972:	461a      	mov	r2, r3
 8004974:	f241 7370 	movw	r3, #6000	; 0x1770
 8004978:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80049b8:	2064      	movs	r0, #100	; 0x64
 80049ba:	f7fc fa71 	bl	8000ea0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80049cc:	200a      	movs	r0, #10
 80049ce:	f7fc fa67 	bl	8000ea0 <HAL_Delay>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <USB_DriveVbus+0x44>
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d106      	bne.n	8004a20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d109      	bne.n	8004a40 <USB_DriveVbus+0x64>
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c5b      	lsrs	r3, r3, #17
 8004a6c:	f003 0303 	and.w	r3, r3, #3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	b29b      	uxth	r3, r3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	70fb      	strb	r3, [r7, #3]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70bb      	strb	r3, [r7, #2]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d87e      	bhi.n	8004bdc <USB_HC_Init+0x13c>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <USB_HC_Init+0x44>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b9f 	.word	0x08004b9f
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b61 	.word	0x08004b61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	da10      	bge.n	8004b32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004b30:	e057      	b.n	8004be2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d051      	beq.n	8004be2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b5c:	60d3      	str	r3, [r2, #12]
      break;
 8004b5e:	e040      	b.n	8004be2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da34      	bge.n	8004be6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b9c:	e023      	b.n	8004be6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	f240 2325 	movw	r3, #549	; 0x225
 8004bb0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004bb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da17      	bge.n	8004bea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004bd8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004bda:	e006      	b.n	8004bea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	e004      	b.n	8004bec <USB_HC_Init+0x14c>
      break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <USB_HC_Init+0x14c>
      break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <USB_HC_Init+0x14c>
      break;
 8004bea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c06:	4313      	orrs	r3, r2
 8004c08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004c16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da03      	bge.n	8004c26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e001      	b.n	8004c2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d103      	bne.n	8004c3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e001      	b.n	8004c3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c3e:	787b      	ldrb	r3, [r7, #1]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c46:	78bb      	ldrb	r3, [r7, #2]
 8004c48:	02db      	lsls	r3, r3, #11
 8004c4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c54:	049b      	lsls	r3, r3, #18
 8004c56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	0159      	lsls	r1, r3, #5
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	440b      	add	r3, r1
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c7a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d10f      	bne.n	8004ca4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop

08004cb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d028      	beq.n	8004d30 <USB_HC_StartXfer+0x7c>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d124      	bne.n	8004d30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <USB_HC_StartXfer+0x50>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	795b      	ldrb	r3, [r3, #5]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fa2e 	bl	800515c <USB_DoPing>
      return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e112      	b.n	8004f2a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d112      	bne.n	8004d30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004d28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d018      	beq.n	8004d6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	8912      	ldrh	r2, [r2, #8]
 8004d40:	4413      	add	r3, r2
 8004d42:	3b01      	subs	r3, #1
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	8912      	ldrh	r2, [r2, #8]
 8004d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004d4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d50:	8b7b      	ldrh	r3, [r7, #26]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90b      	bls.n	8004d6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004d56:	8b7b      	ldrh	r3, [r7, #26]
 8004d58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	8912      	ldrh	r2, [r2, #8]
 8004d60:	fb02 f203 	mul.w	r2, r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	611a      	str	r2, [r3, #16]
 8004d68:	e001      	b.n	8004d6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	78db      	ldrb	r3, [r3, #3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	8912      	ldrh	r2, [r2, #8]
 8004d7c:	fb02 f203 	mul.w	r2, r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d8e:	04d9      	lsls	r1, r3, #19
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <USB_HC_StartXfer+0x280>)
 8004d92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	7a9b      	ldrb	r3, [r3, #10]
 8004d9a:	075b      	lsls	r3, r3, #29
 8004d9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	0148      	lsls	r0, r1, #5
 8004da4:	6a39      	ldr	r1, [r7, #32]
 8004da6:	4401      	add	r1, r0
 8004da8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004dac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004dae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68d9      	ldr	r1, [r3, #12]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	7e7b      	ldrb	r3, [r7, #25]
 8004e12:	075b      	lsls	r3, r3, #29
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	0148      	lsls	r0, r1, #5
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004e20:	4313      	orrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a41      	ldr	r2, [pc, #260]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e36:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	4a3e      	ldr	r2, [pc, #248]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	78db      	ldrb	r3, [r3, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e52:	4a39      	ldr	r2, [pc, #228]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e005      	b.n	8004e64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004e58:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e60:	4a35      	ldr	r2, [pc, #212]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e64:	4b34      	ldr	r3, [pc, #208]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	4a32      	ldr	r2, [pc, #200]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <USB_HC_StartXfer+0x284>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d14e      	bne.n	8004f28 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	78db      	ldrb	r3, [r3, #3]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d14a      	bne.n	8004f28 <USB_HC_StartXfer+0x274>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d046      	beq.n	8004f28 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	79db      	ldrb	r3, [r3, #7]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d830      	bhi.n	8004f04 <USB_HC_StartXfer+0x250>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <USB_HC_StartXfer+0x1f4>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004edd 	.word	0x08004edd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	3303      	adds	r3, #3
 8004ebe:	089b      	lsrs	r3, r3, #2
 8004ec0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004ec2:	8afa      	ldrh	r2, [r7, #22]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d91c      	bls.n	8004f08 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	619a      	str	r2, [r3, #24]
          }
          break;
 8004eda:	e015      	b.n	8004f08 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004ee6:	8afa      	ldrh	r2, [r7, #22]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d90a      	bls.n	8004f0c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f02:	e003      	b.n	8004f0c <USB_HC_StartXfer+0x258>

        default:
          break;
 8004f04:	bf00      	nop
 8004f06:	e002      	b.n	8004f0e <USB_HC_StartXfer+0x25a>
          break;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <USB_HC_StartXfer+0x25a>
          break;
 8004f0c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68d9      	ldr	r1, [r3, #12]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785a      	ldrb	r2, [r3, #1]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	b298      	uxth	r0, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fb86 	bl	8004634 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3728      	adds	r7, #40	; 0x28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	1ff80000 	.word	0x1ff80000
 8004f38:	200000b0 	.word	0x200000b0

08004f3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	b29b      	uxth	r3, r3
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0c9b      	lsrs	r3, r3, #18
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <USB_HC_Halt+0x3a>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d16c      	bne.n	8005072 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d143      	bne.n	800504c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005002:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	440a      	add	r2, r1
 800501a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005022:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3301      	adds	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005030:	d81d      	bhi.n	800506e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005048:	d0ec      	beq.n	8005024 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800504a:	e080      	b.n	800514e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800506a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800506c:	e06f      	b.n	800514e <USB_HC_Halt+0x1f0>
          break;
 800506e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005070:	e06d      	b.n	800514e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005090:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d143      	bne.n	800512a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005100:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	3301      	adds	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510e:	d81d      	bhi.n	800514c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005126:	d0ec      	beq.n	8005102 <USB_HC_Halt+0x1a4>
 8005128:	e011      	b.n	800514e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	440a      	add	r2, r1
 8005140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e000      	b.n	800514e <USB_HC_Halt+0x1f0>
          break;
 800514c:	bf00      	nop
    }
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	04da      	lsls	r2, r3, #19
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <USB_DoPing+0x74>)
 800517a:	4013      	ands	r3, r2
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800518c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	461a      	mov	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	1ff80000 	.word	0x1ff80000

080051d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff f9a1 	bl	800452c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051ea:	2110      	movs	r1, #16
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff f9d9 	bl	80045a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff f9fc 	bl	80045f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e01f      	b.n	800523e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005214:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800521c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005224:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3301      	adds	r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d9dc      	bls.n	80051fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	e034      	b.n	80052b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005260:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005268:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005270:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3301      	adds	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005290:	d80c      	bhi.n	80052ac <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a8:	d0ec      	beq.n	8005284 <USB_StopHost+0xb0>
 80052aa:	e000      	b.n	80052ae <USB_StopHost+0xda>
        break;
 80052ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3301      	adds	r3, #1
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d9c7      	bls.n	800524a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c0:	461a      	mov	r2, r3
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff f91a 	bl	800450a <USB_EnableGlobalInt>

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af04      	add	r7, sp, #16
 80052e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80052e8:	2302      	movs	r3, #2
 80052ea:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80052ec:	2301      	movs	r3, #1
 80052ee:	2202      	movs	r2, #2
 80052f0:	2102      	movs	r1, #2
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fc3a 	bl	8005b6c <USBH_FindInterface>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	2bff      	cmp	r3, #255	; 0xff
 8005300:	f000 812a 	beq.w	8005558 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fc13 	bl	8005b34 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005314:	2050      	movs	r0, #80	; 0x50
 8005316:	f002 f8df 	bl	80074d8 <malloc>
 800531a:	4603      	mov	r3, r0
 800531c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	211a      	movs	r1, #26
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	4413      	add	r3, r2
 8005334:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b25b      	sxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	da15      	bge.n	800536c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	211a      	movs	r1, #26
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	211a      	movs	r1, #26
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fd21 	bl	8006dba <USBH_AllocPipe>
 8005378:	4603      	mov	r3, r0
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	7819      	ldrb	r1, [r3, #0]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	7858      	ldrb	r0, [r3, #1]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	8952      	ldrh	r2, [r2, #10]
 8005398:	9202      	str	r2, [sp, #8]
 800539a:	2203      	movs	r2, #3
 800539c:	9201      	str	r2, [sp, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4623      	mov	r3, r4
 80053a2:	4602      	mov	r2, r0
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 fcd9 	bl	8006d5c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 ffe0 	bl	8007378 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80053b8:	2300      	movs	r3, #0
 80053ba:	2200      	movs	r2, #0
 80053bc:	210a      	movs	r1, #10
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fbd4 	bl	8005b6c <USBH_FindInterface>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	f000 80c4 	beq.w	8005558 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	211a      	movs	r1, #26
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da16      	bge.n	8005416 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	211a      	movs	r1, #26
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	211a      	movs	r1, #26
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800540e:	881a      	ldrh	r2, [r3, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	835a      	strh	r2, [r3, #26]
 8005414:	e015      	b.n	8005442 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	211a      	movs	r1, #26
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	211a      	movs	r1, #26
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	211a      	movs	r1, #26
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b25b      	sxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	da16      	bge.n	8005488 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800545a:	7bbb      	ldrb	r3, [r7, #14]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	211a      	movs	r1, #26
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	f203 3352 	addw	r3, r3, #850	; 0x352
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	211a      	movs	r1, #26
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	835a      	strh	r2, [r3, #26]
 8005486:	e015      	b.n	80054b4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	211a      	movs	r1, #26
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	211a      	movs	r1, #26
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80054ae:	881a      	ldrh	r2, [r3, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	7b9b      	ldrb	r3, [r3, #14]
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 fc7d 	bl	8006dba <USBH_AllocPipe>
 80054c0:	4603      	mov	r3, r0
 80054c2:	461a      	mov	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	7bdb      	ldrb	r3, [r3, #15]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 fc73 	bl	8006dba <USBH_AllocPipe>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	7b59      	ldrb	r1, [r3, #13]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	7b98      	ldrb	r0, [r3, #14]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	8b12      	ldrh	r2, [r2, #24]
 80054f4:	9202      	str	r2, [sp, #8]
 80054f6:	2202      	movs	r2, #2
 80054f8:	9201      	str	r2, [sp, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	4623      	mov	r3, r4
 80054fe:	4602      	mov	r2, r0
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 fc2b 	bl	8006d5c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	7b19      	ldrb	r1, [r3, #12]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	7bd8      	ldrb	r0, [r3, #15]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	8b52      	ldrh	r2, [r2, #26]
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	2202      	movs	r2, #2
 8005522:	9201      	str	r2, [sp, #4]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	4623      	mov	r3, r4
 8005528:	4602      	mov	r2, r0
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fc16 	bl	8006d5c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	7b5b      	ldrb	r3, [r3, #13]
 800553c:	2200      	movs	r2, #0
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 ff19 	bl	8007378 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	7b1b      	ldrb	r3, [r3, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 ff12 	bl	8007378 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}

08005562 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fc09 	bl	8006d9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 fc31 	bl	8006df6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	7b1b      	ldrb	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00e      	beq.n	80055c0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7b1b      	ldrb	r3, [r3, #12]
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 fbf6 	bl	8006d9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	7b1b      	ldrb	r3, [r3, #12]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fc1e 	bl	8006df6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	7b5b      	ldrb	r3, [r3, #13]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	7b5b      	ldrb	r3, [r3, #13]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fbe3 	bl	8006d9a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	7b5b      	ldrb	r3, [r3, #13]
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fc0b 	bl	8006df6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 ff74 	bl	80074e8 <free>
    phost->pActiveClass->pData = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005606:	2200      	movs	r2, #0
 8005608:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800561c:	2302      	movs	r3, #2
 800561e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3340      	adds	r3, #64	; 0x40
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8b2 	bl	800579a <GetLineCoding>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005646:	2102      	movs	r1, #2
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
  }
  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005678:	2b04      	cmp	r3, #4
 800567a:	d877      	bhi.n	800576c <USBH_CDC_Process+0x114>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <USBH_CDC_Process+0x2c>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	08005699 	.word	0x08005699
 8005688:	0800569f 	.word	0x0800569f
 800568c:	080056cf 	.word	0x080056cf
 8005690:	08005743 	.word	0x08005743
 8005694:	08005751 	.word	0x08005751
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]
    break;
 800569c:	e06d      	b.n	800577a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f897 	bl	80057d8 <SetLineCoding>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80056bc:	e058      	b.n	8005770 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d055      	beq.n	8005770 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2204      	movs	r2, #4
 80056c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056cc:	e050      	b.n	8005770 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3340      	adds	r3, #64	; 0x40
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f860 	bl	800579a <GetLineCoding>
 80056da:	4603      	mov	r3, r0
 80056dc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d126      	bne.n	8005732 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d13b      	bne.n	8005774 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005708:	429a      	cmp	r2, r3
 800570a:	d133      	bne.n	8005774 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005716:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005718:	429a      	cmp	r2, r3
 800571a:	d12b      	bne.n	8005774 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005724:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005726:	429a      	cmp	r2, r3
 8005728:	d124      	bne.n	8005774 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f95a 	bl	80059e4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005730:	e020      	b.n	8005774 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d01d      	beq.n	8005774 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2204      	movs	r2, #4
 800573c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005740:	e018      	b.n	8005774 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f867 	bl	8005816 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8dc 	bl	8005906 <CDC_ProcessReception>
    break;
 800574e:	e014      	b.n	800577a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005750:	2100      	movs	r1, #0
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fece 	bl	80064f4 <USBH_ClrFeature>
 8005758:	4603      	mov	r3, r0
 800575a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800576a:	e005      	b.n	8005778 <USBH_CDC_Process+0x120>

  default:
    break;
 800576c:	bf00      	nop
 800576e:	e004      	b.n	800577a <USBH_CDC_Process+0x122>
    break;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <USBH_CDC_Process+0x122>
    break;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <USBH_CDC_Process+0x122>
    break;
 8005778:	bf00      	nop

  }

  return status;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	22a1      	movs	r2, #161	; 0xa1
 80057a8:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2207      	movs	r2, #7
 80057c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2207      	movs	r2, #7
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 f873 	bl	80068b4 <USBH_CtlReq>
 80057ce:	4603      	mov	r3, r0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2221      	movs	r2, #33	; 0x21
 80057e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2207      	movs	r2, #7
 80057fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2207      	movs	r2, #7
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 f854 	bl	80068b4 <USBH_CtlReq>
 800580c:	4603      	mov	r3, r0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af02      	add	r7, sp, #8
 800581c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005828:	2300      	movs	r3, #0
 800582a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <CDC_ProcessTransmission+0x26>
 8005836:	2b02      	cmp	r3, #2
 8005838:	d025      	beq.n	8005886 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800583a:	e060      	b.n	80058fe <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	8b12      	ldrh	r2, [r2, #24]
 8005844:	4293      	cmp	r3, r2
 8005846:	d90c      	bls.n	8005862 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8b1a      	ldrh	r2, [r3, #24]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	7b58      	ldrb	r0, [r3, #13]
 8005854:	2301      	movs	r3, #1
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4603      	mov	r3, r0
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fa3b 	bl	8006cd6 <USBH_BulkSendData>
 8005860:	e00c      	b.n	800587c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	7b58      	ldrb	r0, [r3, #13]
 8005870:	2301      	movs	r3, #1
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	4603      	mov	r3, r0
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fa2d 	bl	8006cd6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005884:	e03b      	b.n	80058fe <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	7b5b      	ldrb	r3, [r3, #13]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 fd49 	bl	8007324 <USBH_LL_GetURBState>
 8005892:	4603      	mov	r3, r0
 8005894:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d128      	bne.n	80058ee <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	8b12      	ldrh	r2, [r2, #24]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d90e      	bls.n	80058c6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	8b12      	ldrh	r2, [r2, #24]
 80058b0:	1a9a      	subs	r2, r3, r2
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	8b12      	ldrh	r2, [r2, #24]
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	61da      	str	r2, [r3, #28]
 80058c4:	e002      	b.n	80058cc <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058dc:	e00e      	b.n	80058fc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f868 	bl	80059bc <USBH_CDC_TransmitCallback>
    break;
 80058ec:	e006      	b.n	80058fc <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d103      	bne.n	80058fc <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058fc:	bf00      	nop
  }
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005918:	2300      	movs	r3, #0
 800591a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005922:	2b03      	cmp	r3, #3
 8005924:	d002      	beq.n	800592c <CDC_ProcessReception+0x26>
 8005926:	2b04      	cmp	r3, #4
 8005928:	d00e      	beq.n	8005948 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800592a:	e043      	b.n	80059b4 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6a19      	ldr	r1, [r3, #32]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	8b5a      	ldrh	r2, [r3, #26]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	7b1b      	ldrb	r3, [r3, #12]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 f9f1 	bl	8006d20 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2204      	movs	r2, #4
 8005942:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005946:	e035      	b.n	80059b4 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	7b1b      	ldrb	r3, [r3, #12]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fce8 	bl	8007324 <USBH_LL_GetURBState>
 8005954:	4603      	mov	r3, r0
 8005956:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d129      	bne.n	80059b2 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	7b1b      	ldrb	r3, [r3, #12]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fc4b 	bl	8007200 <USBH_LL_GetLastXferSize>
 800596a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	429a      	cmp	r2, r3
 8005974:	d016      	beq.n	80059a4 <CDC_ProcessReception+0x9e>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	8b5b      	ldrh	r3, [r3, #26]
 800597a:	461a      	mov	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4293      	cmp	r3, r2
 8005980:	d910      	bls.n	80059a4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	441a      	add	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2203      	movs	r2, #3
 800599e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80059a2:	e006      	b.n	80059b2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f80f 	bl	80059d0 <USBH_CDC_ReceiveCallback>
    break;
 80059b2:	bf00      	nop
  }
}
 80059b4:	bf00      	nop
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e019      	b.n	8005a44 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	79fa      	ldrb	r2, [r7, #7]
 8005a14:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f80f 	bl	8005a4c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 fb2d 	bl	800709c <USBH_LL_Init>

  return USBH_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a58:	e008      	b.n	8005a6c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	32e0      	adds	r2, #224	; 0xe0
 8005a60:	2100      	movs	r1, #0
 8005a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b0e      	cmp	r3, #14
 8005a70:	d9f3      	bls.n	8005a5a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e009      	b.n	8005a8c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a92:	d3f1      	bcc.n	8005a78 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d017      	beq.n	8005b22 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10f      	bne.n	8005b1c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	33dc      	adds	r3, #220	; 0xdc
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e004      	b.n	8005b26 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e001      	b.n	8005b26 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005b22:	2302      	movs	r3, #2
 8005b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d204      	bcs.n	8005b5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005b58:	e001      	b.n	8005b5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	70fb      	strb	r3, [r7, #3]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70bb      	strb	r3, [r7, #2]
 8005b82:	4613      	mov	r3, r2
 8005b84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005b94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b96:	e025      	b.n	8005be4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	221a      	movs	r2, #26
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	795b      	ldrb	r3, [r3, #5]
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d002      	beq.n	8005bba <USBH_FindInterface+0x4e>
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d111      	bne.n	8005bde <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005bbe:	78ba      	ldrb	r2, [r7, #2]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d002      	beq.n	8005bca <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005bc4:	78bb      	ldrb	r3, [r7, #2]
 8005bc6:	2bff      	cmp	r3, #255	; 0xff
 8005bc8:	d109      	bne.n	8005bde <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005bce:	787a      	ldrb	r2, [r7, #1]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d002      	beq.n	8005bda <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005bd4:	787b      	ldrb	r3, [r7, #1]
 8005bd6:	2bff      	cmp	r3, #255	; 0xff
 8005bd8:	d101      	bne.n	8005bde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	e006      	b.n	8005bec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	3301      	adds	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d9d6      	bls.n	8005b98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005bea:	23ff      	movs	r3, #255	; 0xff
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fa87 	bl	8007114 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005c06:	2101      	movs	r1, #1
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fb9e 	bl	800734a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005c20:	2302      	movs	r3, #2
 8005c22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 faec 	bl	8006206 <USBH_IsPortEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <USBH_Process+0x36>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d002      	beq.n	8005c4e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b0b      	cmp	r3, #11
 8005c56:	f200 814c 	bhi.w	8005ef2 <USBH_Process+0x2da>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <USBH_Process+0x48>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005cb3 	.word	0x08005cb3
 8005c68:	08005cc7 	.word	0x08005cc7
 8005c6c:	08005ecd 	.word	0x08005ecd
 8005c70:	08005ef3 	.word	0x08005ef3
 8005c74:	08005d55 	.word	0x08005d55
 8005c78:	08005e83 	.word	0x08005e83
 8005c7c:	08005d85 	.word	0x08005d85
 8005c80:	08005da5 	.word	0x08005da5
 8005c84:	08005dc5 	.word	0x08005dc5
 8005c88:	08005df3 	.word	0x08005df3
 8005c8c:	08005eb5 	.word	0x08005eb5
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 812c 	beq.w	8005ef6 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005ca4:	20c8      	movs	r0, #200	; 0xc8
 8005ca6:	f001 fb9a 	bl	80073de <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fa8d 	bl	80071ca <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005cb0:	e121      	b.n	8005ef6 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 811e 	bne.w	8005efa <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005cc4:	e119      	b.n	8005efa <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005cc6:	2064      	movs	r0, #100	; 0x64
 8005cc8:	f001 fb89 	bl	80073de <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fa57 	bl	8007180 <USBH_LL_GetSpeed>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2205      	movs	r2, #5
 8005ce0:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f868 	bl	8006dba <USBH_AllocPipe>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 f860 	bl	8006dba <USBH_AllocPipe>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7919      	ldrb	r1, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005d16:	b292      	uxth	r2, r2
 8005d18:	9202      	str	r2, [sp, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	9201      	str	r2, [sp, #4]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4603      	mov	r3, r0
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f819 	bl	8006d5c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7959      	ldrb	r1, [r3, #5]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005d3e:	b292      	uxth	r2, r2
 8005d40:	9202      	str	r2, [sp, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	9201      	str	r2, [sp, #4]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 f805 	bl	8006d5c <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d52:	e0e3      	b.n	8005f1c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f8e7 	bl	8005f28 <USBH_HandleEnum>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 80ce 	bne.w	8005efe <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d103      	bne.n	8005d7c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2208      	movs	r2, #8
 8005d78:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005d7a:	e0c0      	b.n	8005efe <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2207      	movs	r2, #7
 8005d80:	701a      	strb	r2, [r3, #0]
    break;
 8005d82:	e0bc      	b.n	8005efe <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80b9 	beq.w	8005f02 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d96:	2101      	movs	r1, #1
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2208      	movs	r2, #8
 8005da0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005da2:	e0ae      	b.n	8005f02 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb59 	bl	8006466 <USBH_SetCfg>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 80a5 	bne.w	8005f06 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2209      	movs	r2, #9
 8005dc0:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005dc2:	e0a0      	b.n	8005f06 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fb69 	bl	80064ac <USBH_SetFeature>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 8094 	bne.w	8005f0a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	220a      	movs	r2, #10
 8005de6:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005de8:	e08f      	b.n	8005f0a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	220a      	movs	r2, #10
 8005dee:	701a      	strb	r2, [r3, #0]
    break;
 8005df0:	e08b      	b.n	8005f0a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8088 	beq.w	8005f0e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	e017      	b.n	8005e3c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	33dc      	adds	r3, #220	; 0xdc
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	791a      	ldrb	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d108      	bne.n	8005e36 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	33dc      	adds	r3, #220	; 0xdc
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0e4      	beq.n	8005e0c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2206      	movs	r2, #6
 8005e62:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e70:	e04d      	b.n	8005f0e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	220d      	movs	r2, #13
 8005e76:	701a      	strb	r2, [r3, #0]
    break;
 8005e78:	e049      	b.n	8005f0e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220d      	movs	r2, #13
 8005e7e:	701a      	strb	r2, [r3, #0]
    break;
 8005e80:	e045      	b.n	8005f0e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d136      	bne.n	8005f12 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	220b      	movs	r2, #11
 8005ea8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005eaa:	e032      	b.n	8005f12 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	220d      	movs	r2, #13
 8005eb0:	701a      	strb	r2, [r3, #0]
    break;
 8005eb2:	e02e      	b.n	8005f12 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02b      	beq.n	8005f16 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
    }
    break;
 8005eca:	e024      	b.n	8005f16 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fdbd 	bl	8005a4c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005ef0:	e013      	b.n	8005f1a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8005ef2:	bf00      	nop
 8005ef4:	e012      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005ef6:	bf00      	nop
 8005ef8:	e010      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005efa:	bf00      	nop
 8005efc:	e00e      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005efe:	bf00      	nop
 8005f00:	e00c      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f02:	bf00      	nop
 8005f04:	e00a      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f06:	bf00      	nop
 8005f08:	e008      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f0a:	bf00      	nop
 8005f0c:	e006      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f0e:	bf00      	nop
 8005f10:	e004      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <USBH_Process+0x304>
    break;
 8005f1a:	bf00      	nop
  }
 return USBH_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop

08005f28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af04      	add	r7, sp, #16
 8005f2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b07      	cmp	r3, #7
 8005f3a:	f200 80f8 	bhi.w	800612e <USBH_HandleEnum+0x206>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <USBH_HandleEnum+0x1c>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005fd7 	.word	0x08005fd7
 8005f4c:	08005fef 	.word	0x08005fef
 8005f50:	08006065 	.word	0x08006065
 8005f54:	0800607b 	.word	0x0800607b
 8005f58:	08006097 	.word	0x08006097
 8005f5c:	080060cb 	.word	0x080060cb
 8005f60:	080060ff 	.word	0x080060ff
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005f64:	2108      	movs	r1, #8
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9ad 	bl	80062c6 <USBH_Get_DevDesc>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 80df 	bne.w	8006132 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	7919      	ldrb	r1, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	9202      	str	r2, [sp, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fed8 	bl	8006d5c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7959      	ldrb	r1, [r3, #5]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	9202      	str	r2, [sp, #8]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	9201      	str	r2, [sp, #4]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2200      	movs	r2, #0
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fec4 	bl	8006d5c <USBH_OpenPipe>

    }
    break;
 8005fd4:	e0ad      	b.n	8006132 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005fd6:	2112      	movs	r1, #18
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f974 	bl	80062c6 <USBH_Get_DevDesc>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 80a8 	bne.w	8006136 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	705a      	strb	r2, [r3, #1]

    }
    break;
 8005fec:	e0a3      	b.n	8006136 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa14 	bl	800641e <USBH_SetAddress>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 809e 	bne.w	800613a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8005ffe:	2002      	movs	r0, #2
 8006000:	f001 f9ed 	bl	80073de <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2203      	movs	r2, #3
 8006010:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7919      	ldrb	r1, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006026:	b292      	uxth	r2, r2
 8006028:	9202      	str	r2, [sp, #8]
 800602a:	2200      	movs	r2, #0
 800602c:	9201      	str	r2, [sp, #4]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fe91 	bl	8006d5c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7959      	ldrb	r1, [r3, #5]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800604e:	b292      	uxth	r2, r2
 8006050:	9202      	str	r2, [sp, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	9201      	str	r2, [sp, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4603      	mov	r3, r0
 800605a:	2200      	movs	r2, #0
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fe7d 	bl	8006d5c <USBH_OpenPipe>
    }
    break;
 8006062:	e06a      	b.n	800613a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006064:	2109      	movs	r1, #9
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f955 	bl	8006316 <USBH_Get_CfgDesc>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d165      	bne.n	800613e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006078:	e061      	b.n	800613e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f947 	bl	8006316 <USBH_Get_CfgDesc>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d159      	bne.n	8006142 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2205      	movs	r2, #5
 8006092:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006094:	e055      	b.n	8006142 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800609c:	2b00      	cmp	r3, #0
 800609e:	d010      	beq.n	80060c2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80060ac:	23ff      	movs	r3, #255	; 0xff
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f955 	bl	800635e <USBH_Get_StringDesc>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d145      	bne.n	8006146 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2206      	movs	r2, #6
 80060be:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060c0:	e041      	b.n	8006146 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2206      	movs	r2, #6
 80060c6:	705a      	strb	r2, [r3, #1]
    break;
 80060c8:	e03d      	b.n	8006146 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80060e0:	23ff      	movs	r3, #255	; 0xff
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f93b 	bl	800635e <USBH_Get_StringDesc>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d12d      	bne.n	800614a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2207      	movs	r2, #7
 80060f2:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80060f4:	e029      	b.n	800614a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2207      	movs	r2, #7
 80060fa:	705a      	strb	r2, [r3, #1]
    break;
 80060fc:	e025      	b.n	800614a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00f      	beq.n	8006128 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006114:	23ff      	movs	r3, #255	; 0xff
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f921 	bl	800635e <USBH_Get_StringDesc>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d115      	bne.n	800614e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006126:	e012      	b.n	800614e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]
    break;
 800612c:	e00f      	b.n	800614e <USBH_HandleEnum+0x226>

  default:
    break;
 800612e:	bf00      	nop
 8006130:	e00e      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 8006132:	bf00      	nop
 8006134:	e00c      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 8006136:	bf00      	nop
 8006138:	e00a      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 800613a:	bf00      	nop
 800613c:	e008      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 800613e:	bf00      	nop
 8006140:	e006      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 8006142:	bf00      	nop
 8006144:	e004      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <USBH_HandleEnum+0x228>
    break;
 800614e:	bf00      	nop
  }
  return Status;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f804 	bl	800619e <USBH_HandleSof>
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d10a      	bne.n	80061c6 <USBH_HandleSof+0x28>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
  }
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80061de:	bf00      	nop
}
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80061fa:	bf00      	nop
}
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10f      	bne.n	8006252 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800624a:	2104      	movs	r1, #4
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
 8006250:	e007      	b.n	8006262 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006258:	2b01      	cmp	r3, #1
 800625a:	d102      	bne.n	8006262 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 ff68 	bl	800714a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	791b      	ldrb	r3, [r3, #4]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fdb8 	bl	8006df6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fdb2 	bl	8006df6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062aa:	2105      	movs	r1, #5
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 ff2f 	bl	8007114 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2203      	movs	r2, #3
 80062ba:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e4:	2100      	movs	r1, #0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f864 	bl	80063b4 <USBH_GetDescriptor>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f203 3022 	addw	r0, r3, #802	; 0x322
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	b292      	uxth	r2, r2
 8006306:	4619      	mov	r1, r3
 8006308:	f000 f918 	bl	800653c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af02      	add	r7, sp, #8
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	331c      	adds	r3, #28
 8006326:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f83d 	bl	80063b4 <USBH_GetDescriptor>
 800633a:	4603      	mov	r3, r0
 800633c:	72fb      	strb	r3, [r7, #11]
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	68f9      	ldr	r1, [r7, #12]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f964 	bl	800661c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006354:	7afb      	ldrb	r3, [r7, #11]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b088      	sub	sp, #32
 8006362:	af02      	add	r7, sp, #8
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	461a      	mov	r2, r3
 800636a:	460b      	mov	r3, r1
 800636c:	72fb      	strb	r3, [r7, #11]
 800636e:	4613      	mov	r3, r2
 8006370:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006372:	7afb      	ldrb	r3, [r7, #11]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800637a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	460b      	mov	r3, r1
 8006388:	2100      	movs	r1, #0
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f812 	bl	80063b4 <USBH_GetDescriptor>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063a0:	893a      	ldrh	r2, [r7, #8]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fa37 	bl	8006818 <USBH_ParseStringDesc>
  }
  return status;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	72fb      	strb	r3, [r7, #11]
 80063c2:	4613      	mov	r3, r2
 80063c4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	789b      	ldrb	r3, [r3, #2]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d11c      	bne.n	8006408 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2206      	movs	r2, #6
 80063de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	893a      	ldrh	r2, [r7, #8]
 80063e4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80063e6:	893b      	ldrh	r3, [r7, #8]
 80063e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f0:	d104      	bne.n	80063fc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f240 4209 	movw	r2, #1033	; 0x409
 80063f8:	829a      	strh	r2, [r3, #20]
 80063fa:	e002      	b.n	8006402 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8b3a      	ldrh	r2, [r7, #24]
 8006406:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006408:	8b3b      	ldrh	r3, [r7, #24]
 800640a:	461a      	mov	r2, r3
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa50 	bl	80068b4 <USBH_CtlReq>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	789b      	ldrb	r3, [r3, #2]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d10f      	bne.n	8006452 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2205      	movs	r2, #5
 800643c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa2c 	bl	80068b4 <USBH_CtlReq>
 800645c:	4603      	mov	r3, r0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	789b      	ldrb	r3, [r3, #2]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d10e      	bne.n	8006498 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2209      	movs	r2, #9
 8006484:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006498:	2200      	movs	r2, #0
 800649a:	2100      	movs	r1, #0
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fa09 	bl	80068b4 <USBH_CtlReq>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	789b      	ldrb	r3, [r3, #2]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2203      	movs	r2, #3
 80064ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9e5 	bl	80068b4 <USBH_CtlReq>
 80064ea:	4603      	mov	r3, r0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	789b      	ldrb	r3, [r3, #2]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10f      	bne.n	8006528 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006528:	2200      	movs	r2, #0
 800652a:	2100      	movs	r1, #0
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f9c1 	bl	80068b4 <USBH_CtlReq>
 8006532:	4603      	mov	r3, r0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	785a      	ldrb	r2, [r3, #1]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3302      	adds	r3, #2
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3303      	adds	r3, #3
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	791a      	ldrb	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	795a      	ldrb	r2, [r3, #5]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	799a      	ldrb	r2, [r3, #6]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	79da      	ldrb	r2, [r3, #7]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d939      	bls.n	8006610 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3308      	adds	r3, #8
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	3309      	adds	r3, #9
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	4313      	orrs	r3, r2
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	330a      	adds	r3, #10
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	330b      	adds	r3, #11
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	330c      	adds	r3, #12
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	330d      	adds	r3, #13
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	7b9a      	ldrb	r2, [r3, #14]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	7bda      	ldrb	r2, [r3, #15]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	7c1a      	ldrb	r2, [r3, #16]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	7c5a      	ldrb	r2, [r3, #17]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	745a      	strb	r2, [r3, #17]
  }
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	785a      	ldrb	r2, [r3, #1]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	3302      	adds	r3, #2
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	3303      	adds	r3, #3
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	791a      	ldrb	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	795a      	ldrb	r2, [r3, #5]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	799a      	ldrb	r2, [r3, #6]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	79da      	ldrb	r2, [r3, #7]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	7a1a      	ldrb	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	2b09      	cmp	r3, #9
 8006696:	d95f      	bls.n	8006758 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006698:	2309      	movs	r3, #9
 800669a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80066a0:	e051      	b.n	8006746 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80066a2:	f107 0316 	add.w	r3, r7, #22
 80066a6:	4619      	mov	r1, r3
 80066a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066aa:	f000 f8e8 	bl	800687e <USBH_GetNextDesc>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d146      	bne.n	8006746 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80066b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066bc:	221a      	movs	r2, #26
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	3308      	adds	r3, #8
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	3302      	adds	r3, #2
 80066ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80066cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ce:	69f8      	ldr	r0, [r7, #28]
 80066d0:	f000 f846 	bl	8006760 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80066de:	e022      	b.n	8006726 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80066e0:	f107 0316 	add.w	r3, r7, #22
 80066e4:	4619      	mov	r1, r3
 80066e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066e8:	f000 f8c9 	bl	800687e <USBH_GetNextDesc>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d117      	bne.n	8006726 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80066f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80066fe:	3201      	adds	r2, #1
 8006700:	00d2      	lsls	r2, r2, #3
 8006702:	211a      	movs	r1, #26
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	3308      	adds	r3, #8
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006716:	69b8      	ldr	r0, [r7, #24]
 8006718:	f000 f851 	bl	80067be <USBH_ParseEPDesc>
            ep_ix++;
 800671c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006720:	3301      	adds	r3, #1
 8006722:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	791b      	ldrb	r3, [r3, #4]
 800672a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800672e:	429a      	cmp	r2, r3
 8006730:	d204      	bcs.n	800673c <USBH_ParseCfgDesc+0x120>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	885a      	ldrh	r2, [r3, #2]
 8006736:	8afb      	ldrh	r3, [r7, #22]
 8006738:	429a      	cmp	r2, r3
 800673a:	d8d1      	bhi.n	80066e0 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800673c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006740:	3301      	adds	r3, #1
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674a:	2b01      	cmp	r3, #1
 800674c:	d804      	bhi.n	8006758 <USBH_ParseCfgDesc+0x13c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	885a      	ldrh	r2, [r3, #2]
 8006752:	8afb      	ldrh	r3, [r7, #22]
 8006754:	429a      	cmp	r2, r3
 8006756:	d8a4      	bhi.n	80066a2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3728      	adds	r7, #40	; 0x28
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	785a      	ldrb	r2, [r3, #1]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	789a      	ldrb	r2, [r3, #2]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	78da      	ldrb	r2, [r3, #3]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	791a      	ldrb	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	795a      	ldrb	r2, [r3, #5]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	799a      	ldrb	r2, [r3, #6]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	79da      	ldrb	r2, [r3, #7]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	7a1a      	ldrb	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	721a      	strb	r2, [r3, #8]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785a      	ldrb	r2, [r3, #1]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	789a      	ldrb	r2, [r3, #2]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	78da      	ldrb	r2, [r3, #3]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	3304      	adds	r3, #4
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	3305      	adds	r3, #5
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	4313      	orrs	r3, r2
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	799a      	ldrb	r2, [r3, #6]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	719a      	strb	r2, [r3, #6]
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d120      	bne.n	8006872 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	1e9a      	subs	r2, r3, #2
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	4293      	cmp	r3, r2
 800683a:	bf28      	it	cs
 800683c:	4613      	movcs	r3, r2
 800683e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3302      	adds	r3, #2
 8006844:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006846:	2300      	movs	r3, #0
 8006848:	82fb      	strh	r3, [r7, #22]
 800684a:	e00b      	b.n	8006864 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3301      	adds	r3, #1
 800685c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	3302      	adds	r3, #2
 8006862:	82fb      	strh	r3, [r7, #22]
 8006864:	8afa      	ldrh	r2, [r7, #22]
 8006866:	8abb      	ldrh	r3, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d3ef      	bcc.n	800684c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]
  }
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	4413      	add	r3, r2
 8006894:	b29a      	uxth	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	789b      	ldrb	r3, [r3, #2]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d002      	beq.n	80068d4 <USBH_CtlReq+0x20>
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d00f      	beq.n	80068f2 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 80068d2:	e034      	b.n	800693e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2202      	movs	r2, #2
 80068ea:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
    break;
 80068f0:	e025      	b.n	800693e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f828 	bl	8006948 <USBH_HandleControl>
 80068f8:	4603      	mov	r3, r0
 80068fa:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
    break;
 8006912:	e013      	b.n	800693c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b03      	cmp	r3, #3
 8006918:	d108      	bne.n	800692c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006926:	2303      	movs	r3, #3
 8006928:	75fb      	strb	r3, [r7, #23]
    break;
 800692a:	e007      	b.n	800693c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d104      	bne.n	800693c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006938:	2302      	movs	r3, #2
 800693a:	75fb      	strb	r3, [r7, #23]
    break;
 800693c:	bf00      	nop
  }
  return status;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006954:	2300      	movs	r3, #0
 8006956:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7e1b      	ldrb	r3, [r3, #24]
 800695c:	3b01      	subs	r3, #1
 800695e:	2b0a      	cmp	r3, #10
 8006960:	f200 814c 	bhi.w	8006bfc <USBH_HandleControl+0x2b4>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <USBH_HandleControl+0x24>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006999 	.word	0x08006999
 8006970:	080069b3 	.word	0x080069b3
 8006974:	08006a1d 	.word	0x08006a1d
 8006978:	08006a43 	.word	0x08006a43
 800697c:	08006a7b 	.word	0x08006a7b
 8006980:	08006aa7 	.word	0x08006aa7
 8006984:	08006af9 	.word	0x08006af9
 8006988:	08006b1b 	.word	0x08006b1b
 800698c:	08006b57 	.word	0x08006b57
 8006990:	08006b7f 	.word	0x08006b7f
 8006994:	08006bbd 	.word	0x08006bbd
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f103 0110 	add.w	r1, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	795b      	ldrb	r3, [r3, #5]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f939 	bl	8006c1c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	761a      	strb	r2, [r3, #24]
    break;
 80069b0:	e12f      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	795b      	ldrb	r3, [r3, #5]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fcb3 	bl	8007324 <USBH_LL_GetURBState>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d11e      	bne.n	8006a06 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7c1b      	ldrb	r3, [r3, #16]
 80069cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069d0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8adb      	ldrh	r3, [r3, #22]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80069da:	7b7b      	ldrb	r3, [r7, #13]
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d103      	bne.n	80069e8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2203      	movs	r2, #3
 80069e4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069e6:	e10b      	b.n	8006c00 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2205      	movs	r2, #5
 80069ec:	761a      	strb	r2, [r3, #24]
    break;
 80069ee:	e107      	b.n	8006c00 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80069f0:	7b7b      	ldrb	r3, [r7, #13]
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d103      	bne.n	80069fe <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2209      	movs	r2, #9
 80069fa:	761a      	strb	r2, [r3, #24]
    break;
 80069fc:	e100      	b.n	8006c00 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2207      	movs	r2, #7
 8006a02:	761a      	strb	r2, [r3, #24]
    break;
 8006a04:	e0fc      	b.n	8006c00 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d003      	beq.n	8006a14 <USBH_HandleControl+0xcc>
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	f040 80f6 	bne.w	8006c00 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	220b      	movs	r2, #11
 8006a18:	761a      	strb	r2, [r3, #24]
    break;
 8006a1a:	e0f1      	b.n	8006c00 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6899      	ldr	r1, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	899a      	ldrh	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	791b      	ldrb	r3, [r3, #4]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f930 	bl	8006c9a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	761a      	strb	r2, [r3, #24]
    break;
 8006a40:	e0e7      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	791b      	ldrb	r3, [r3, #4]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fc6b 	bl	8007324 <USBH_LL_GetURBState>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d102      	bne.n	8006a5e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2209      	movs	r2, #9
 8006a5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d102      	bne.n	8006a6a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a68:	e0cc      	b.n	8006c04 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	f040 80c9 	bne.w	8006c04 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	220b      	movs	r2, #11
 8006a76:	761a      	strb	r2, [r3, #24]
    break;
 8006a78:	e0c4      	b.n	8006c04 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	899a      	ldrh	r2, [r3, #12]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7958      	ldrb	r0, [r3, #5]
 8006a86:	2301      	movs	r3, #1
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f8df 	bl	8006c50 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	761a      	strb	r2, [r3, #24]
    break;
 8006aa4:	e0b5      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	795b      	ldrb	r3, [r3, #5]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc39 	bl	8007324 <USBH_LL_GetURBState>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d103      	bne.n	8006ac4 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ac2:	e0a1      	b.n	8006c08 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d105      	bne.n	8006ad6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	220c      	movs	r2, #12
 8006ace:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad4:	e098      	b.n	8006c08 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d103      	bne.n	8006ae4 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2205      	movs	r2, #5
 8006ae0:	761a      	strb	r2, [r3, #24]
    break;
 8006ae2:	e091      	b.n	8006c08 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	f040 808e 	bne.w	8006c08 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	220b      	movs	r2, #11
 8006af0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	73fb      	strb	r3, [r7, #15]
    break;
 8006af6:	e087      	b.n	8006c08 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	791b      	ldrb	r3, [r3, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2100      	movs	r1, #0
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8ca 	bl	8006c9a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2208      	movs	r2, #8
 8006b16:	761a      	strb	r2, [r3, #24]

    break;
 8006b18:	e07b      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	791b      	ldrb	r3, [r3, #4]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbff 	bl	8007324 <USBH_LL_GetURBState>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d105      	bne.n	8006b3c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	220d      	movs	r2, #13
 8006b34:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b3a:	e067      	b.n	8006c0c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d103      	bne.n	8006b4a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	220b      	movs	r2, #11
 8006b46:	761a      	strb	r2, [r3, #24]
    break;
 8006b48:	e060      	b.n	8006c0c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b05      	cmp	r3, #5
 8006b4e:	d15d      	bne.n	8006c0c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006b50:	2303      	movs	r3, #3
 8006b52:	73fb      	strb	r3, [r7, #15]
    break;
 8006b54:	e05a      	b.n	8006c0c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	795a      	ldrb	r2, [r3, #5]
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	2200      	movs	r2, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f873 	bl	8006c50 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	220a      	movs	r2, #10
 8006b7a:	761a      	strb	r2, [r3, #24]
    break;
 8006b7c:	e049      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	795b      	ldrb	r3, [r3, #5]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbcd 	bl	8007324 <USBH_LL_GetURBState>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	220d      	movs	r2, #13
 8006b9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006b9e:	e037      	b.n	8006c10 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d103      	bne.n	8006bae <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2209      	movs	r2, #9
 8006baa:	761a      	strb	r2, [r3, #24]
    break;
 8006bac:	e030      	b.n	8006c10 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d12d      	bne.n	8006c10 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	220b      	movs	r2, #11
 8006bb8:	761a      	strb	r2, [r3, #24]
    break;
 8006bba:	e029      	b.n	8006c10 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7e5b      	ldrb	r3, [r3, #25]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	765a      	strb	r2, [r3, #25]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7e5b      	ldrb	r3, [r3, #25]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d809      	bhi.n	8006be4 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 faba 	bl	800714a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006be2:	e016      	b.n	8006c12 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bea:	2106      	movs	r1, #6
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bfa:	e00a      	b.n	8006c12 <USBH_HandleControl+0x2ca>

  default:
    break;
 8006bfc:	bf00      	nop
 8006bfe:	e008      	b.n	8006c12 <USBH_HandleControl+0x2ca>
    break;
 8006c00:	bf00      	nop
 8006c02:	e006      	b.n	8006c12 <USBH_HandleControl+0x2ca>
    break;
 8006c04:	bf00      	nop
 8006c06:	e004      	b.n	8006c12 <USBH_HandleControl+0x2ca>
    break;
 8006c08:	bf00      	nop
 8006c0a:	e002      	b.n	8006c12 <USBH_HandleControl+0x2ca>
    break;
 8006c0c:	bf00      	nop
 8006c0e:	e000      	b.n	8006c12 <USBH_HandleControl+0x2ca>
    break;
 8006c10:	bf00      	nop
  }
  return status;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af04      	add	r7, sp, #16
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c2a:	79f9      	ldrb	r1, [r7, #7]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	2308      	movs	r3, #8
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2200      	movs	r2, #0
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fb3e 	bl	80072c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	460b      	mov	r3, r1
 8006c60:	80fb      	strh	r3, [r7, #6]
 8006c62:	4613      	mov	r3, r2
 8006c64:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c74:	7979      	ldrb	r1, [r7, #5]
 8006c76:	7e3b      	ldrb	r3, [r7, #24]
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	2301      	movs	r3, #1
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2300      	movs	r3, #0
 8006c88:	2200      	movs	r2, #0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fb19 	bl	80072c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b088      	sub	sp, #32
 8006c9e:	af04      	add	r7, sp, #16
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	460b      	mov	r3, r1
 8006caa:	80fb      	strh	r3, [r7, #6]
 8006cac:	4613      	mov	r3, r2
 8006cae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cb0:	7979      	ldrb	r1, [r7, #5]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9303      	str	r3, [sp, #12]
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	9302      	str	r3, [sp, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fafb 	bl	80072c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006ccc:	2300      	movs	r3, #0

}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af04      	add	r7, sp, #16
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	80fb      	strh	r3, [r7, #6]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cfa:	7979      	ldrb	r1, [r7, #5]
 8006cfc:	7e3b      	ldrb	r3, [r7, #24]
 8006cfe:	9303      	str	r3, [sp, #12]
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	9302      	str	r3, [sp, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	2301      	movs	r3, #1
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fad6 	bl	80072c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af04      	add	r7, sp, #16
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	460b      	mov	r3, r1
 8006d30:	80fb      	strh	r3, [r7, #6]
 8006d32:	4613      	mov	r3, r2
 8006d34:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d36:	7979      	ldrb	r1, [r7, #5]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	2301      	movs	r3, #1
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2302      	movs	r3, #2
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fab8 	bl	80072c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af04      	add	r7, sp, #16
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	70fb      	strb	r3, [r7, #3]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70bb      	strb	r3, [r7, #2]
 8006d72:	4613      	mov	r3, r2
 8006d74:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006d76:	7878      	ldrb	r0, [r7, #1]
 8006d78:	78ba      	ldrb	r2, [r7, #2]
 8006d7a:	78f9      	ldrb	r1, [r7, #3]
 8006d7c:	8b3b      	ldrh	r3, [r7, #24]
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	7d3b      	ldrb	r3, [r7, #20]
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	7c3b      	ldrb	r3, [r7, #16]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa4b 	bl	8007226 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006d90:	2300      	movs	r3, #0

}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa6a 	bl	8007284 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006db0:	2300      	movs	r3, #0

}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f831 	bl	8006e2e <USBH_GetFreePipe>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	89fa      	ldrh	r2, [r7, #14]
 8006dde:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32e0      	adds	r2, #224	; 0xe0
 8006de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006dea:	89fb      	ldrh	r3, [r7, #14]
 8006dec:	b2db      	uxtb	r3, r3
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	2b0a      	cmp	r3, #10
 8006e06:	d80b      	bhi.n	8006e20 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32e0      	adds	r2, #224	; 0xe0
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	32e0      	adds	r2, #224	; 0xe0
 8006e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
 8006e3e:	e00e      	b.n	8006e5e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006e40:	7bfa      	ldrb	r2, [r7, #15]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32e0      	adds	r2, #224	; 0xe0
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	e007      	b.n	8006e68 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b0a      	cmp	r3, #10
 8006e62:	d9ed      	bls.n	8006e40 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	490e      	ldr	r1, [pc, #56]	; (8006eb4 <MX_USB_HOST_Init+0x40>)
 8006e7c:	480e      	ldr	r0, [pc, #56]	; (8006eb8 <MX_USB_HOST_Init+0x44>)
 8006e7e:	f7fe fdbb 	bl	80059f8 <USBH_Init>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e88:	f7f9 fe26 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006e8c:	490b      	ldr	r1, [pc, #44]	; (8006ebc <MX_USB_HOST_Init+0x48>)
 8006e8e:	480a      	ldr	r0, [pc, #40]	; (8006eb8 <MX_USB_HOST_Init+0x44>)
 8006e90:	f7fe fe25 	bl	8005ade <USBH_RegisterClass>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e9a:	f7f9 fe1d 	bl	8000ad8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e9e:	4806      	ldr	r0, [pc, #24]	; (8006eb8 <MX_USB_HOST_Init+0x44>)
 8006ea0:	f7fe feaa 	bl	8005bf8 <USBH_Start>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006eaa:	f7f9 fe15 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	200001b8 	.word	0x200001b8
 8006ebc:	2000000c 	.word	0x2000000c

08006ec0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006ec4:	4802      	ldr	r0, [pc, #8]	; (8006ed0 <MX_USB_HOST_Process+0x10>)
 8006ec6:	f7fe fea7 	bl	8005c18 <USBH_Process>
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	200001b8 	.word	0x200001b8

08006ed4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d819      	bhi.n	8006f1c <USBH_UserProcess+0x48>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <USBH_UserProcess+0x1c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f15 	.word	0x08006f15
 8006f00:	08006f05 	.word	0x08006f05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f04:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <USBH_UserProcess+0x58>)
 8006f06:	2203      	movs	r2, #3
 8006f08:	701a      	strb	r2, [r3, #0]
  break;
 8006f0a:	e008      	b.n	8006f1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f0c:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <USBH_UserProcess+0x58>)
 8006f0e:	2202      	movs	r2, #2
 8006f10:	701a      	strb	r2, [r3, #0]
  break;
 8006f12:	e004      	b.n	8006f1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <USBH_UserProcess+0x58>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
  break;
 8006f1a:	e000      	b.n	8006f1e <USBH_UserProcess+0x4a>

  default:
  break;
 8006f1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	200000b4 	.word	0x200000b4

08006f30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f50:	d147      	bne.n	8006fe2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	4b25      	ldr	r3, [pc, #148]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	4a24      	ldr	r2, [pc, #144]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6313      	str	r3, [r2, #48]	; 0x30
 8006f62:	4b22      	ldr	r3, [pc, #136]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006f7c:	f107 0314 	add.w	r3, r7, #20
 8006f80:	4619      	mov	r1, r3
 8006f82:	481b      	ldr	r0, [pc, #108]	; (8006ff0 <HAL_HCD_MspInit+0xc0>)
 8006f84:	f7fa f8c0 	bl	8001108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006f88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f96:	2300      	movs	r3, #0
 8006f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9e:	f107 0314 	add.w	r3, r7, #20
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4812      	ldr	r0, [pc, #72]	; (8006ff0 <HAL_HCD_MspInit+0xc0>)
 8006fa6:	f7fa f8af 	bl	8001108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	4a0f      	ldr	r2, [pc, #60]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	4a0b      	ldr	r2, [pc, #44]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <HAL_HCD_MspInit+0xbc>)
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	2043      	movs	r0, #67	; 0x43
 8006fd8:	f7fa f85f 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fdc:	2043      	movs	r0, #67	; 0x43
 8006fde:	f7fa f878 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	40020000 	.word	0x40020000

08006ff4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff f8b9 	bl	800617a <USBH_LL_IncTimer>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff f8fe 	bl	8006220 <USBH_LL_Connect>
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f916 	bl	800626c <USBH_LL_Disconnect>
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
 8007054:	4613      	mov	r3, r2
 8007056:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff f8ab 	bl	80061ce <USBH_LL_PortEnabled>
} 
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff f8ab 	bl	80061ea <USBH_LL_PortDisabled>
} 
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d12a      	bne.n	8007104 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80070ae:	4a18      	ldr	r2, [pc, #96]	; (8007110 <USBH_LL_Init+0x74>)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <USBH_LL_Init+0x74>)
 80070ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070be:	4b14      	ldr	r3, [pc, #80]	; (8007110 <USBH_LL_Init+0x74>)
 80070c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80070c6:	4b12      	ldr	r3, [pc, #72]	; (8007110 <USBH_LL_Init+0x74>)
 80070c8:	2208      	movs	r2, #8
 80070ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <USBH_LL_Init+0x74>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <USBH_LL_Init+0x74>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <USBH_LL_Init+0x74>)
 80070da:	2202      	movs	r2, #2
 80070dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <USBH_LL_Init+0x74>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80070e4:	480a      	ldr	r0, [pc, #40]	; (8007110 <USBH_LL_Init+0x74>)
 80070e6:	f7fa f9c2 	bl	800146e <HAL_HCD_Init>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80070f0:	f7f9 fcf2 	bl	8000ad8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80070f4:	4806      	ldr	r0, [pc, #24]	; (8007110 <USBH_LL_Init+0x74>)
 80070f6:	f7fa fdbd 	bl	8001c74 <HAL_HCD_GetCurrentFrame>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff f82c 	bl	800615c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000584 	.word	0x20000584

08007114 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fa fd2a 	bl	8001b84 <HAL_HCD_Start>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f95c 	bl	80073f4 <USBH_Get_USB_Status>
 800713c:	4603      	mov	r3, r0
 800713e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007140:	7bbb      	ldrb	r3, [r7, #14]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fa fd32 	bl	8001bca <HAL_HCD_Stop>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f941 	bl	80073f4 <USBH_Get_USB_Status>
 8007172:	4603      	mov	r3, r0
 8007174:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007176:	7bbb      	ldrb	r3, [r7, #14]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fa fd7c 	bl	8001c90 <HAL_HCD_GetCurrentSpeed>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d007      	beq.n	80071ae <USBH_LL_GetSpeed+0x2e>
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d302      	bcc.n	80071a8 <USBH_LL_GetSpeed+0x28>
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d006      	beq.n	80071b4 <USBH_LL_GetSpeed+0x34>
 80071a6:	e008      	b.n	80071ba <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
    break;
 80071ac:	e008      	b.n	80071c0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80071ae:	2301      	movs	r3, #1
 80071b0:	73fb      	strb	r3, [r7, #15]
    break;
 80071b2:	e005      	b.n	80071c0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80071b4:	2302      	movs	r3, #2
 80071b6:	73fb      	strb	r3, [r7, #15]
    break;
 80071b8:	e002      	b.n	80071c0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
    break;
 80071be:	bf00      	nop
  }
  return  speed;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fa fd0f 	bl	8001c04 <HAL_HCD_ResetPort>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f901 	bl	80073f4 <USBH_Get_USB_Status>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7fa fd17 	bl	8001c4a <HAL_HCD_HC_GetXferCount>
 800721c:	4603      	mov	r3, r0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007226:	b590      	push	{r4, r7, lr}
 8007228:	b089      	sub	sp, #36	; 0x24
 800722a:	af04      	add	r7, sp, #16
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	4608      	mov	r0, r1
 8007230:	4611      	mov	r1, r2
 8007232:	461a      	mov	r2, r3
 8007234:	4603      	mov	r3, r0
 8007236:	70fb      	strb	r3, [r7, #3]
 8007238:	460b      	mov	r3, r1
 800723a:	70bb      	strb	r3, [r7, #2]
 800723c:	4613      	mov	r3, r2
 800723e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800724e:	787c      	ldrb	r4, [r7, #1]
 8007250:	78ba      	ldrb	r2, [r7, #2]
 8007252:	78f9      	ldrb	r1, [r7, #3]
 8007254:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4623      	mov	r3, r4
 8007266:	f7fa f964 	bl	8001532 <HAL_HCD_HC_Init>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f8bf 	bl	80073f4 <USBH_Get_USB_Status>
 8007276:	4603      	mov	r3, r0
 8007278:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800727a:	7bbb      	ldrb	r3, [r7, #14]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	bd90      	pop	{r4, r7, pc}

08007284 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	4611      	mov	r1, r2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fa f9dd 	bl	8001662 <HAL_HCD_HC_Halt>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f8a0 	bl	80073f4 <USBH_Get_USB_Status>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80072c2:	b590      	push	{r4, r7, lr}
 80072c4:	b089      	sub	sp, #36	; 0x24
 80072c6:	af04      	add	r7, sp, #16
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	461a      	mov	r2, r3
 80072d0:	4603      	mov	r3, r0
 80072d2:	70fb      	strb	r3, [r7, #3]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70bb      	strb	r3, [r7, #2]
 80072d8:	4613      	mov	r3, r2
 80072da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80072ea:	787c      	ldrb	r4, [r7, #1]
 80072ec:	78ba      	ldrb	r2, [r7, #2]
 80072ee:	78f9      	ldrb	r1, [r7, #3]
 80072f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072f4:	9303      	str	r3, [sp, #12]
 80072f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072f8:	9302      	str	r3, [sp, #8]
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	4623      	mov	r3, r4
 8007306:	f7fa f9cf 	bl	80016a8 <HAL_HCD_HC_SubmitRequest>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 f86f 	bl	80073f4 <USBH_Get_USB_Status>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800731a:	7bbb      	ldrb	r3, [r7, #14]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}

08007324 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fa fc70 	bl	8001c20 <HAL_HCD_HC_GetURBState>
 8007340:	4603      	mov	r3, r0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800735c:	2b01      	cmp	r3, #1
 800735e:	d103      	bne.n	8007368 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f872 	bl	800744c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007368:	20c8      	movs	r0, #200	; 0xc8
 800736a:	f7f9 fd99 	bl	8000ea0 <HAL_Delay>
  return USBH_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
 8007384:	4613      	mov	r3, r2
 8007386:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800738e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007390:	78fa      	ldrb	r2, [r7, #3]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	440b      	add	r3, r1
 800739e:	333b      	adds	r3, #59	; 0x3b
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	440b      	add	r3, r1
 80073b4:	3350      	adds	r3, #80	; 0x50
 80073b6:	78ba      	ldrb	r2, [r7, #2]
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e009      	b.n	80073d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	440b      	add	r3, r1
 80073ca:	3351      	adds	r3, #81	; 0x51
 80073cc:	78ba      	ldrb	r2, [r7, #2]
 80073ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7f9 fd5a 	bl	8000ea0 <HAL_Delay>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d817      	bhi.n	8007438 <USBH_Get_USB_Status+0x44>
 8007408:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USBH_Get_USB_Status+0x1c>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007421 	.word	0x08007421
 8007414:	08007427 	.word	0x08007427
 8007418:	0800742d 	.word	0x0800742d
 800741c:	08007433 	.word	0x08007433
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
    break;
 8007424:	e00b      	b.n	800743e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007426:	2302      	movs	r3, #2
 8007428:	73fb      	strb	r3, [r7, #15]
    break;
 800742a:	e008      	b.n	800743e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
    break;
 8007430:	e005      	b.n	800743e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007432:	2302      	movs	r3, #2
 8007434:	73fb      	strb	r3, [r7, #15]
    break;
 8007436:	e002      	b.n	800743e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	73fb      	strb	r3, [r7, #15]
    break;
 800743c:	bf00      	nop
  }
  return usb_status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e001      	b.n	800746a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	461a      	mov	r2, r3
 800746e:	2101      	movs	r1, #1
 8007470:	4803      	ldr	r0, [pc, #12]	; (8007480 <MX_DriverVbusFS+0x34>)
 8007472:	f7f9 ffe3 	bl	800143c <HAL_GPIO_WritePin>
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40020800 	.word	0x40020800

08007484 <__errno>:
 8007484:	4b01      	ldr	r3, [pc, #4]	; (800748c <__errno+0x8>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	2000002c 	.word	0x2000002c

08007490 <__libc_init_array>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	4e0d      	ldr	r6, [pc, #52]	; (80074c8 <__libc_init_array+0x38>)
 8007494:	4c0d      	ldr	r4, [pc, #52]	; (80074cc <__libc_init_array+0x3c>)
 8007496:	1ba4      	subs	r4, r4, r6
 8007498:	10a4      	asrs	r4, r4, #2
 800749a:	2500      	movs	r5, #0
 800749c:	42a5      	cmp	r5, r4
 800749e:	d109      	bne.n	80074b4 <__libc_init_array+0x24>
 80074a0:	4e0b      	ldr	r6, [pc, #44]	; (80074d0 <__libc_init_array+0x40>)
 80074a2:	4c0c      	ldr	r4, [pc, #48]	; (80074d4 <__libc_init_array+0x44>)
 80074a4:	f000 f8ea 	bl	800767c <_init>
 80074a8:	1ba4      	subs	r4, r4, r6
 80074aa:	10a4      	asrs	r4, r4, #2
 80074ac:	2500      	movs	r5, #0
 80074ae:	42a5      	cmp	r5, r4
 80074b0:	d105      	bne.n	80074be <__libc_init_array+0x2e>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074b8:	4798      	blx	r3
 80074ba:	3501      	adds	r5, #1
 80074bc:	e7ee      	b.n	800749c <__libc_init_array+0xc>
 80074be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074c2:	4798      	blx	r3
 80074c4:	3501      	adds	r5, #1
 80074c6:	e7f2      	b.n	80074ae <__libc_init_array+0x1e>
 80074c8:	080076b8 	.word	0x080076b8
 80074cc:	080076b8 	.word	0x080076b8
 80074d0:	080076b8 	.word	0x080076b8
 80074d4:	080076bc 	.word	0x080076bc

080074d8 <malloc>:
 80074d8:	4b02      	ldr	r3, [pc, #8]	; (80074e4 <malloc+0xc>)
 80074da:	4601      	mov	r1, r0
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f000 b861 	b.w	80075a4 <_malloc_r>
 80074e2:	bf00      	nop
 80074e4:	2000002c 	.word	0x2000002c

080074e8 <free>:
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <free+0xc>)
 80074ea:	4601      	mov	r1, r0
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f000 b80b 	b.w	8007508 <_free_r>
 80074f2:	bf00      	nop
 80074f4:	2000002c 	.word	0x2000002c

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <_free_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	2900      	cmp	r1, #0
 800750e:	d045      	beq.n	800759c <_free_r+0x94>
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f0c      	subs	r4, r1, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfb8      	it	lt
 800751a:	18e4      	addlt	r4, r4, r3
 800751c:	f000 f8ac 	bl	8007678 <__malloc_lock>
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <_free_r+0x98>)
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	4610      	mov	r0, r2
 8007526:	b933      	cbnz	r3, 8007536 <_free_r+0x2e>
 8007528:	6063      	str	r3, [r4, #4]
 800752a:	6014      	str	r4, [r2, #0]
 800752c:	4628      	mov	r0, r5
 800752e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007532:	f000 b8a2 	b.w	800767a <__malloc_unlock>
 8007536:	42a3      	cmp	r3, r4
 8007538:	d90c      	bls.n	8007554 <_free_r+0x4c>
 800753a:	6821      	ldr	r1, [r4, #0]
 800753c:	1862      	adds	r2, r4, r1
 800753e:	4293      	cmp	r3, r2
 8007540:	bf04      	itt	eq
 8007542:	681a      	ldreq	r2, [r3, #0]
 8007544:	685b      	ldreq	r3, [r3, #4]
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	bf04      	itt	eq
 800754a:	1852      	addeq	r2, r2, r1
 800754c:	6022      	streq	r2, [r4, #0]
 800754e:	6004      	str	r4, [r0, #0]
 8007550:	e7ec      	b.n	800752c <_free_r+0x24>
 8007552:	4613      	mov	r3, r2
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	b10a      	cbz	r2, 800755c <_free_r+0x54>
 8007558:	42a2      	cmp	r2, r4
 800755a:	d9fa      	bls.n	8007552 <_free_r+0x4a>
 800755c:	6819      	ldr	r1, [r3, #0]
 800755e:	1858      	adds	r0, r3, r1
 8007560:	42a0      	cmp	r0, r4
 8007562:	d10b      	bne.n	800757c <_free_r+0x74>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	4401      	add	r1, r0
 8007568:	1858      	adds	r0, r3, r1
 800756a:	4282      	cmp	r2, r0
 800756c:	6019      	str	r1, [r3, #0]
 800756e:	d1dd      	bne.n	800752c <_free_r+0x24>
 8007570:	6810      	ldr	r0, [r2, #0]
 8007572:	6852      	ldr	r2, [r2, #4]
 8007574:	605a      	str	r2, [r3, #4]
 8007576:	4401      	add	r1, r0
 8007578:	6019      	str	r1, [r3, #0]
 800757a:	e7d7      	b.n	800752c <_free_r+0x24>
 800757c:	d902      	bls.n	8007584 <_free_r+0x7c>
 800757e:	230c      	movs	r3, #12
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	e7d3      	b.n	800752c <_free_r+0x24>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	1821      	adds	r1, r4, r0
 8007588:	428a      	cmp	r2, r1
 800758a:	bf04      	itt	eq
 800758c:	6811      	ldreq	r1, [r2, #0]
 800758e:	6852      	ldreq	r2, [r2, #4]
 8007590:	6062      	str	r2, [r4, #4]
 8007592:	bf04      	itt	eq
 8007594:	1809      	addeq	r1, r1, r0
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	605c      	str	r4, [r3, #4]
 800759a:	e7c7      	b.n	800752c <_free_r+0x24>
 800759c:	bd38      	pop	{r3, r4, r5, pc}
 800759e:	bf00      	nop
 80075a0:	200000b8 	.word	0x200000b8

080075a4 <_malloc_r>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	1ccd      	adds	r5, r1, #3
 80075a8:	f025 0503 	bic.w	r5, r5, #3
 80075ac:	3508      	adds	r5, #8
 80075ae:	2d0c      	cmp	r5, #12
 80075b0:	bf38      	it	cc
 80075b2:	250c      	movcc	r5, #12
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	4606      	mov	r6, r0
 80075b8:	db01      	blt.n	80075be <_malloc_r+0x1a>
 80075ba:	42a9      	cmp	r1, r5
 80075bc:	d903      	bls.n	80075c6 <_malloc_r+0x22>
 80075be:	230c      	movs	r3, #12
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	2000      	movs	r0, #0
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	f000 f857 	bl	8007678 <__malloc_lock>
 80075ca:	4a21      	ldr	r2, [pc, #132]	; (8007650 <_malloc_r+0xac>)
 80075cc:	6814      	ldr	r4, [r2, #0]
 80075ce:	4621      	mov	r1, r4
 80075d0:	b991      	cbnz	r1, 80075f8 <_malloc_r+0x54>
 80075d2:	4c20      	ldr	r4, [pc, #128]	; (8007654 <_malloc_r+0xb0>)
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	b91b      	cbnz	r3, 80075e0 <_malloc_r+0x3c>
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 f83d 	bl	8007658 <_sbrk_r>
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	4629      	mov	r1, r5
 80075e2:	4630      	mov	r0, r6
 80075e4:	f000 f838 	bl	8007658 <_sbrk_r>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d124      	bne.n	8007636 <_malloc_r+0x92>
 80075ec:	230c      	movs	r3, #12
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 f842 	bl	800767a <__malloc_unlock>
 80075f6:	e7e4      	b.n	80075c2 <_malloc_r+0x1e>
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	1b5b      	subs	r3, r3, r5
 80075fc:	d418      	bmi.n	8007630 <_malloc_r+0x8c>
 80075fe:	2b0b      	cmp	r3, #11
 8007600:	d90f      	bls.n	8007622 <_malloc_r+0x7e>
 8007602:	600b      	str	r3, [r1, #0]
 8007604:	50cd      	str	r5, [r1, r3]
 8007606:	18cc      	adds	r4, r1, r3
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f836 	bl	800767a <__malloc_unlock>
 800760e:	f104 000b 	add.w	r0, r4, #11
 8007612:	1d23      	adds	r3, r4, #4
 8007614:	f020 0007 	bic.w	r0, r0, #7
 8007618:	1ac3      	subs	r3, r0, r3
 800761a:	d0d3      	beq.n	80075c4 <_malloc_r+0x20>
 800761c:	425a      	negs	r2, r3
 800761e:	50e2      	str	r2, [r4, r3]
 8007620:	e7d0      	b.n	80075c4 <_malloc_r+0x20>
 8007622:	428c      	cmp	r4, r1
 8007624:	684b      	ldr	r3, [r1, #4]
 8007626:	bf16      	itet	ne
 8007628:	6063      	strne	r3, [r4, #4]
 800762a:	6013      	streq	r3, [r2, #0]
 800762c:	460c      	movne	r4, r1
 800762e:	e7eb      	b.n	8007608 <_malloc_r+0x64>
 8007630:	460c      	mov	r4, r1
 8007632:	6849      	ldr	r1, [r1, #4]
 8007634:	e7cc      	b.n	80075d0 <_malloc_r+0x2c>
 8007636:	1cc4      	adds	r4, r0, #3
 8007638:	f024 0403 	bic.w	r4, r4, #3
 800763c:	42a0      	cmp	r0, r4
 800763e:	d005      	beq.n	800764c <_malloc_r+0xa8>
 8007640:	1a21      	subs	r1, r4, r0
 8007642:	4630      	mov	r0, r6
 8007644:	f000 f808 	bl	8007658 <_sbrk_r>
 8007648:	3001      	adds	r0, #1
 800764a:	d0cf      	beq.n	80075ec <_malloc_r+0x48>
 800764c:	6025      	str	r5, [r4, #0]
 800764e:	e7db      	b.n	8007608 <_malloc_r+0x64>
 8007650:	200000b8 	.word	0x200000b8
 8007654:	200000bc 	.word	0x200000bc

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4c06      	ldr	r4, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4605      	mov	r5, r0
 8007660:	4608      	mov	r0, r1
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	f7f9 fb1e 	bl	8000ca4 <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000848 	.word	0x20000848

08007678 <__malloc_lock>:
 8007678:	4770      	bx	lr

0800767a <__malloc_unlock>:
 800767a:	4770      	bx	lr

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
