
embeddedschool-2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007440  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e4  080075e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075ec  080075ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080075f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08007684  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08007684  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b9e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034f9  00000000  00000000  00037c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003c248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023760  00000000  00000000  0003d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d8e  00000000  00000000  00060930  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca04c  00000000  00000000  000716be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b70a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  0013b788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075b0 	.word	0x080075b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080075b0 	.word	0x080075b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc10 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f922 	bl	800071c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f88c 	bl	80005f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8b8 	bl	8000650 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8e6 	bl	80006b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fc60 	bl	8006da8 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f006 fc84 	bl	8006df4 <MX_USB_HOST_Process>
 80004ec:	e7fc      	b.n	80004e8 <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b098      	sub	sp, #96	; 0x60
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 ff94 	bl	800742c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <SystemClock_Config+0xfc>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	4a30      	ldr	r2, [pc, #192]	; (80005ec <SystemClock_Config+0xfc>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	6413      	str	r3, [r2, #64]	; 0x40
 8000532:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <SystemClock_Config+0xfc>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemClock_Config+0x100>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a2a      	ldr	r2, [pc, #168]	; (80005f0 <SystemClock_Config+0x100>)
 8000548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0x100>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055a:	2301      	movs	r3, #1
 800055c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000572:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000576:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057c:	2307      	movs	r3, #7
 800057e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f93b 	bl	8003800 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000590:	f000 f9c2 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2105      	movs	r1, #5
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb66 	bl	8003c84 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005be:	f000 f9ab 	bl	8000918 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005c6:	23c0      	movs	r3, #192	; 0xc0
 80005c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fd30 	bl	8004038 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005de:	f000 f99b 	bl	8000918 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3760      	adds	r7, #96	; 0x60
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_I2C1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_I2C1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x50>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_I2C1_Init+0x58>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_I2C1_Init+0x50>)
 8000612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_I2C1_Init+0x50>)
 8000632:	f002 fb1d 	bl	8002c70 <HAL_I2C_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f96c 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c0 	.word	0x200000c0
 8000648:	40005400 	.word	0x40005400
 800064c:	000186a0 	.word	0x000186a0

08000650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_I2S3_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_I2S3_Init+0x5c>)
 800067a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000690:	f002 fc16 	bl	8002ec0 <HAL_I2S_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069a:	f000 f93d 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000016c 	.word	0x2000016c
 80006a8:	40003c00 	.word	0x40003c00
 80006ac:	00017700 	.word	0x00017700

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f003 fdd7 	bl	80042b4 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f904 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000114 	.word	0x20000114
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a69      	ldr	r2, [pc, #420]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a62      	ldr	r2, [pc, #392]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_GPIO_Init+0x1e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <MX_GPIO_Init+0x1e0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a54      	ldr	r2, [pc, #336]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b52      	ldr	r3, [pc, #328]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a4d      	ldr	r2, [pc, #308]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <MX_GPIO_Init+0x1e0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4848      	ldr	r0, [pc, #288]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80007e0:	f000 fdc6 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4846      	ldr	r0, [pc, #280]	; (8000904 <MX_GPIO_Init+0x1e8>)
 80007ea:	f000 fdc1 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80007f6:	f000 fdbb 	bl	8001370 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	483b      	ldr	r0, [pc, #236]	; (8000900 <MX_GPIO_Init+0x1e4>)
 8000812:	f000 fc13 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4835      	ldr	r0, [pc, #212]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800082e:	f000 fc05 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482d      	ldr	r0, [pc, #180]	; (8000904 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fbf5 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x1f0>)
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_GPIO_Init+0x1f4>)
 8000866:	f000 fbe9 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x1f8>)
 800087e:	f000 fbdd 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000894:	2305      	movs	r3, #5
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0x1f8>)
 80008a0:	f000 fbcc 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fbbd 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c2:	2320      	movs	r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fbb1 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_GPIO_Init+0x1f0>)
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0x1e4>)
 80008ee:	f000 fba5 	bl	800103c <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40021000 	.word	0x40021000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020c00 	.word	0x40020c00
 800090c:	10120000 	.word	0x10120000
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_I2C_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12c      	bne.n	80009f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_I2C_MspInit+0x8c>)
 80009d4:	f000 fb32 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_I2S_MspInit+0xc0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d14a      	bne.n	8000ac0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_I2S_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <HAL_I2S_MspInit+0xc8>)
 8000a9a:	f000 facf 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <HAL_I2S_MspInit+0xcc>)
 8000abc:	f000 fabe 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003c00 	.word	0x40003c00
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_SPI_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12b      	bne.n	8000b52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_SPI_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_SPI_MspInit+0x8c>)
 8000b4e:	f000 fa75 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013000 	.word	0x40013000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8ea 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <OTG_FS_IRQHandler+0x10>)
 8000bca:	f000 fe6f 	bl	80018ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000584 	.word	0x20000584

08000bd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x50>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x16>
		heap_end = &end;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <_sbrk+0x50>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <_sbrk+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <_sbrk+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <_sbrk+0x50>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d907      	bls.n	8000c12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c02:	f006 fbd9 	bl	80073b8 <__errno>
 8000c06:	4602      	mov	r2, r0
 8000c08:	230c      	movs	r3, #12
 8000c0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e006      	b.n	8000c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_sbrk+0x50>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <_sbrk+0x50>)
 8000c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	20000850 	.word	0x20000850

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <SystemInit+0x60>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <SystemInit+0x60>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <SystemInit+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <SystemInit+0x64>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <SystemInit+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <SystemInit+0x64>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <SystemInit+0x64>)
 8000c5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SystemInit+0x64>)
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <SystemInit+0x68>)
 8000c6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <SystemInit+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <SystemInit+0x64>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SystemInit+0x60>)
 8000c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c84:	609a      	str	r2, [r3, #8]
#endif
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	24003010 	.word	0x24003010

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca2:	e003      	b.n	8000cac <LoopCopyDataInit>

08000ca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000caa:	3104      	adds	r1, #4

08000cac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb4:	d3f6      	bcc.n	8000ca4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb8:	e002      	b.n	8000cc0 <LoopFillZerobss>

08000cba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cbc:	f842 3b04 	str.w	r3, [r2], #4

08000cc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc4:	d3f9      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffb3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f006 fb7b 	bl	80073c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fbfb 	bl	80004c8 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cd8:	080075f4 	.word	0x080075f4
  ldr  r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000ce4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000ce8:	2000084c 	.word	0x2000084c

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f94d 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fe00 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f965 	bl	8001022 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f92d 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200001b4 	.word	0x200001b4

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200001b4 	.word	0x200001b4

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_Delay+0x40>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff3e 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff31 	bl	8000e7c <__NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffa2 	bl	8000f74 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x4a>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b12      	cmp	r3, #18
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d00b      	beq.n	8001122 <HAL_GPIO_Init+0xe6>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001116:	2b11      	cmp	r3, #17
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b12      	cmp	r3, #18
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5e      	ldr	r2, [pc, #376]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_GPIO_Init+0x310>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a50      	ldr	r2, [pc, #320]	; (8001350 <HAL_GPIO_Init+0x314>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	; (8001354 <HAL_GPIO_Init+0x318>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x31c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x320>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_GPIO_Init+0x324>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_GPIO_Init+0x328>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x32c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x30c>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_GPIO_Init+0x330>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_GPIO_Init+0x330>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_GPIO_Init+0x330>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_GPIO_Init+0x330>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_GPIO_Init+0x330>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_GPIO_Init+0x330>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_GPIO_Init+0x330>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_GPIO_Init+0x330>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a4:	b08f      	sub	sp, #60	; 0x3c
 80013a6:	af0a      	add	r7, sp, #40	; 0x28
 80013a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e054      	b.n	800145e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f005 fd48 	bl	8006e64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f834 	bl	8004460 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	687e      	ldr	r6, [r7, #4]
 8001400:	466d      	mov	r5, sp
 8001402:	f106 0410 	add.w	r4, r6, #16
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001412:	e885 0003 	stmia.w	r5, {r0, r1}
 8001416:	1d33      	adds	r3, r6, #4
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f002 ffae 	bl	800437c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f003 f82b 	bl	8004482 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	687e      	ldr	r6, [r7, #4]
 8001434:	466d      	mov	r5, sp
 8001436:	f106 0410 	add.w	r4, r6, #16
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001446:	e885 0003 	stmia.w	r5, {r0, r1}
 800144a:	1d33      	adds	r3, r6, #4
 800144c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f003 f93e 	bl	80046d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001466 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001466:	b590      	push	{r4, r7, lr}
 8001468:	b089      	sub	sp, #36	; 0x24
 800146a:	af04      	add	r7, sp, #16
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	4608      	mov	r0, r1
 8001470:	4611      	mov	r1, r2
 8001472:	461a      	mov	r2, r3
 8001474:	4603      	mov	r3, r0
 8001476:	70fb      	strb	r3, [r7, #3]
 8001478:	460b      	mov	r3, r1
 800147a:	70bb      	strb	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_HCD_HC_Init+0x28>
 800148a:	2302      	movs	r3, #2
 800148c:	e07f      	b.n	800158e <HAL_HCD_HC_Init+0x128>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	333d      	adds	r3, #61	; 0x3d
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3338      	adds	r3, #56	; 0x38
 80014ba:	787a      	ldrb	r2, [r7, #1]
 80014bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	3339      	adds	r3, #57	; 0x39
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	333f      	adds	r3, #63	; 0x3f
 80014f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014fc:	78fa      	ldrb	r2, [r7, #3]
 80014fe:	78bb      	ldrb	r3, [r7, #2]
 8001500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001504:	b2d8      	uxtb	r0, r3
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	333a      	adds	r3, #58	; 0x3a
 8001514:	4602      	mov	r2, r0
 8001516:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001518:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0a      	bge.n	8001536 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	333b      	adds	r3, #59	; 0x3b
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e009      	b.n	800154a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	333b      	adds	r3, #59	; 0x3b
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	333c      	adds	r3, #60	; 0x3c
 800155a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800155e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	787c      	ldrb	r4, [r7, #1]
 8001566:	78ba      	ldrb	r2, [r7, #2]
 8001568:	78f9      	ldrb	r1, [r7, #3]
 800156a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4623      	mov	r3, r4
 800157c:	f003 fa2a 	bl	80049d4 <USB_HC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_HCD_HC_Halt+0x1e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e00f      	b.n	80015d4 <HAL_HCD_HC_Halt+0x3e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 fc64 	bl	8004e92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	333b      	adds	r3, #59	; 0x3b
 8001606:	78ba      	ldrb	r2, [r7, #2]
 8001608:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	333f      	adds	r3, #63	; 0x3f
 800161a:	787a      	ldrb	r2, [r7, #1]
 800161c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800161e:	7c3b      	ldrb	r3, [r7, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10a      	bne.n	800163a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3342      	adds	r3, #66	; 0x42
 8001634:	2203      	movs	r2, #3
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	e009      	b.n	800164e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3342      	adds	r3, #66	; 0x42
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800164e:	787b      	ldrb	r3, [r7, #1]
 8001650:	2b03      	cmp	r3, #3
 8001652:	f200 80d6 	bhi.w	8001802 <HAL_HCD_HC_SubmitRequest+0x226>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	0800166d 	.word	0x0800166d
 8001660:	080017ed 	.word	0x080017ed
 8001664:	080016d9 	.word	0x080016d9
 8001668:	08001763 	.word	0x08001763
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800166c:	7c3b      	ldrb	r3, [r7, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	f040 80c9 	bne.w	8001806 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 80c5 	bne.w	8001806 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3351      	adds	r3, #81	; 0x51
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3351      	adds	r3, #81	; 0x51
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	3342      	adds	r3, #66	; 0x42
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016c0:	e0a1      	b.n	8001806 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3342      	adds	r3, #66	; 0x42
 80016d2:	2202      	movs	r2, #2
 80016d4:	701a      	strb	r2, [r3, #0]
      break;
 80016d6:	e096      	b.n	8001806 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016d8:	78bb      	ldrb	r3, [r7, #2]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d120      	bne.n	8001720 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3351      	adds	r3, #81	; 0x51
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	3342      	adds	r3, #66	; 0x42
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001708:	e07e      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3342      	adds	r3, #66	; 0x42
 800171a:	2202      	movs	r2, #2
 800171c:	701a      	strb	r2, [r3, #0]
      break;
 800171e:	e073      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3350      	adds	r3, #80	; 0x50
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3342      	adds	r3, #66	; 0x42
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
      break;
 800174a:	e05d      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	3342      	adds	r3, #66	; 0x42
 800175c:	2202      	movs	r2, #2
 800175e:	701a      	strb	r2, [r3, #0]
      break;
 8001760:	e052      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001762:	78bb      	ldrb	r3, [r7, #2]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d120      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3351      	adds	r3, #81	; 0x51
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001792:	e039      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2202      	movs	r2, #2
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e02e      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3350      	adds	r3, #80	; 0x50
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
      break;
 80017d4:	e018      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e00d      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3342      	adds	r3, #66	; 0x42
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
      break;
 8001800:	e002      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001806:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3344      	adds	r3, #68	; 0x44
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	8b39      	ldrh	r1, [r7, #24]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4403      	add	r3, r0
 800182c:	3348      	adds	r3, #72	; 0x48
 800182e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	335c      	adds	r3, #92	; 0x5c
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	334c      	adds	r3, #76	; 0x4c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	3339      	adds	r3, #57	; 0x39
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	335d      	adds	r3, #93	; 0x5d
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	3338      	adds	r3, #56	; 0x38
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	18d1      	adds	r1, r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	f003 f9a4 	bl	8004be8 <USB_HC_StartXfer>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop

080018ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fec1 	bl	800464a <USB_GetMode>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	f040 80f1 	bne.w	8001ab2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fea5 	bl	8004624 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80e7 	beq.w	8001ab0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fe9c 	bl	8004624 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018f6:	d104      	bne.n	8001902 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fe8c 	bl	8004624 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001916:	d104      	bne.n	8001922 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fe7c 	bl	8004624 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001932:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001936:	d104      	bne.n	8001942 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001940:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fe6c 	bl	8004624 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d103      	bne.n	800195e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2202      	movs	r2, #2
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fe5e 	bl	8004624 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800196e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001972:	d117      	bne.n	80019a4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001982:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001986:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f005 fae9 	bl	8006f60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2101      	movs	r1, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ff57 	bl	8004848 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fe3b 	bl	8004624 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d102      	bne.n	80019c0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 f8c8 	bl	8002b50 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fe2d 	bl	8004624 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d106      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 faa7 	bl	8006f28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fe1c 	bl	8004624 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019f6:	d138      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fa37 	bl	8004e70 <USB_HC_ReadInterrupt>
 8001a02:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e025      	b.n	8001a56 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d018      	beq.n	8001a50 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a34:	d106      	bne.n	8001a44 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8cf 	bl	8001be0 <HCD_HC_IN_IRQHandler>
 8001a42:	e005      	b.n	8001a50 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fc5f 	bl	800230e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3d4      	bcc.n	8001a0a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fdd8 	bl	8004624 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d101      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x1d6>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_HCD_IRQHandler+0x1d8>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d014      	beq.n	8001ab2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0210 	bic.w	r2, r2, #16
 8001a96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 ffad 	bl	80029f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0210 	orr.w	r2, r2, #16
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	e000      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x206>
      return;
 8001ab0:	bf00      	nop
    }
  }
}
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_HCD_Start+0x16>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e013      	b.n	8001af6 <HAL_HCD_Start+0x3e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fcaf 	bl	800443e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ff12 	bl	8004910 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_HCD_Stop+0x16>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e00d      	b.n	8001b30 <HAL_HCD_Stop+0x32>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 faf1 	bl	8005108 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 feb9 	bl	80048bc <USB_ResetPort>
 8001b4a:	4603      	mov	r3, r0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	335c      	adds	r3, #92	; 0x5c
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	334c      	adds	r3, #76	; 0x4c
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fefb 	bl	80049b0 <USB_GetCurrentFrame>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fed6 	bl	8004982 <USB_GetHostSpeed>
 8001bd6:	4603      	mov	r3, r0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d119      	bne.n	8001c44 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2304      	movs	r3, #4
 8001c20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	0151      	lsls	r1, r2, #5
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	440a      	add	r2, r1
 8001c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	60d3      	str	r3, [r2, #12]
 8001c42:	e095      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d109      	bne.n	8001c6e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	461a      	mov	r2, r3
 8001c68:	2320      	movs	r3, #32
 8001c6a:	6093      	str	r3, [r2, #8]
 8001c6c:	e080      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d134      	bne.n	8001cee <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	0151      	lsls	r1, r2, #5
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	440a      	add	r2, r1
 8001c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	335d      	adds	r3, #93	; 0x5d
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2308      	movs	r3, #8
 8001cda:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 f8d3 	bl	8004e92 <USB_HC_Halt>
 8001cec:	e040      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d04:	d134      	bne.n	8001d70 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	0151      	lsls	r1, r2, #5
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	440a      	add	r2, r1
 8001d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f8ae 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	461a      	mov	r2, r3
 8001d44:	2310      	movs	r3, #16
 8001d46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	335d      	adds	r3, #93	; 0x5d
 8001d58:	2208      	movs	r2, #8
 8001d5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d86:	d122      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	0151      	lsls	r1, r2, #5
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f86d 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dcc:	e29b      	b.n	8002306 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	f040 80c1 	bne.w	8001f68 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3348      	adds	r3, #72	; 0x48
 8001dfe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0159      	lsls	r1, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e12:	1ad1      	subs	r1, r2, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4403      	add	r3, r0
 8001e22:	334c      	adds	r3, #76	; 0x4c
 8001e24:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	335d      	adds	r3, #93	; 0x5d
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3358      	adds	r3, #88	; 0x58
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	333f      	adds	r3, #63	; 0x3f
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	333f      	adds	r3, #63	; 0x3f
 8001e86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d121      	bne.n	8001ed0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	0151      	lsls	r1, r2, #5
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	440a      	add	r2, r1
 8001ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 ffeb 	bl	8004e92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2310      	movs	r3, #16
 8001ecc:	6093      	str	r3, [r2, #8]
 8001ece:	e034      	b.n	8001f3a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	333f      	adds	r3, #63	; 0x3f
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d129      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	0151      	lsls	r1, r2, #5
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	440a      	add	r2, r1
 8001efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f04:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	335c      	adds	r3, #92	; 0x5c
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	b2d8      	uxtb	r0, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	335c      	adds	r3, #92	; 0x5c
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4601      	mov	r1, r0
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f005 f821 	bl	8006f7c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3350      	adds	r3, #80	; 0x50
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2d8      	uxtb	r0, r3
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3350      	adds	r3, #80	; 0x50
 8001f62:	4602      	mov	r2, r0
 8001f64:	701a      	strb	r2, [r3, #0]
}
 8001f66:	e1ce      	b.n	8002306 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 80f1 	bne.w	8002162 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	0151      	lsls	r1, r2, #5
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	440a      	add	r2, r1
 8001f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9a:	f023 0302 	bic.w	r3, r3, #2
 8001f9e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	335d      	adds	r3, #93	; 0x5d
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10a      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	335c      	adds	r3, #92	; 0x5c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e0b0      	b.n	800212e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	335d      	adds	r3, #93	; 0x5d
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10a      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	335c      	adds	r3, #92	; 0x5c
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e09a      	b.n	800212e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	335d      	adds	r3, #93	; 0x5d
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d00a      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	335d      	adds	r3, #93	; 0x5d
 800201e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002020:	2b08      	cmp	r3, #8
 8002022:	d156      	bne.n	80020d2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3358      	adds	r3, #88	; 0x58
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4403      	add	r3, r0
 8002046:	3358      	adds	r3, #88	; 0x58
 8002048:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3358      	adds	r3, #88	; 0x58
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d914      	bls.n	800208a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	335c      	adds	r3, #92	; 0x5c
 8002084:	2204      	movs	r2, #4
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e009      	b.n	800209e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02d      	b.n	800212e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	335d      	adds	r3, #93	; 0x5d
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d122      	bne.n	800212e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335c      	adds	r3, #92	; 0x5c
 80020f8:	2202      	movs	r2, #2
 80020fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002112:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	461a      	mov	r2, r3
 800213c:	2302      	movs	r3, #2
 800213e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	b2d8      	uxtb	r0, r3
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	4601      	mov	r1, r0
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f004 ff0e 	bl	8006f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002160:	e0d1      	b.n	8002306 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d13e      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	0151      	lsls	r1, r2, #5
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	440a      	add	r2, r1
 800218e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3358      	adds	r3, #88	; 0x58
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4403      	add	r3, r0
 80021ba:	3358      	adds	r3, #88	; 0x58
 80021bc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	335d      	adds	r3, #93	; 0x5d
 80021ce:	2206      	movs	r2, #6
 80021d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 fe58 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	461a      	mov	r2, r3
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	6093      	str	r3, [r2, #8]
}
 80021f4:	e087      	b.n	8002306 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	d17c      	bne.n	8002306 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	333f      	adds	r3, #63	; 0x3f
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d122      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3358      	adds	r3, #88	; 0x58
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	0151      	lsls	r1, r2, #5
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	440a      	add	r2, r1
 800224c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fe16 	bl	8004e92 <USB_HC_Halt>
 8002266:	e045      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	333f      	adds	r3, #63	; 0x3f
 800228e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002290:	2b02      	cmp	r3, #2
 8002292:	d12f      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3358      	adds	r3, #88	; 0x58
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d121      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	335d      	adds	r3, #93	; 0x5d
 80022c0:	2203      	movs	r2, #3
 80022c2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	0151      	lsls	r1, r2, #5
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	440a      	add	r2, r1
 80022da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fdcf 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	2310      	movs	r3, #16
 8002304:	6093      	str	r3, [r2, #8]
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d119      	bne.n	8002372 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2304      	movs	r3, #4
 800234e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f043 0302 	orr.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002370:	e33e      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d141      	bne.n	800240c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2320      	movs	r3, #32
 8002398:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	333d      	adds	r3, #61	; 0x3d
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	f040 831f 	bne.w	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	333d      	adds	r3, #61	; 0x3d
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	335c      	adds	r3, #92	; 0x5c
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	0151      	lsls	r1, r2, #5
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	440a      	add	r2, r1
 80023f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fd44 	bl	8004e92 <USB_HC_Halt>
}
 800240a:	e2f1      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d13f      	bne.n	80024a2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	335d      	adds	r3, #93	; 0x5d
 8002432:	2204      	movs	r2, #4
 8002434:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	333d      	adds	r3, #61	; 0x3d
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3358      	adds	r3, #88	; 0x58
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	0151      	lsls	r1, r2, #5
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	440a      	add	r2, r1
 8002474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fd02 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	461a      	mov	r2, r3
 800249c:	2340      	movs	r3, #64	; 0x40
 800249e:	6093      	str	r3, [r2, #8]
}
 80024a0:	e2a6      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b8:	d122      	bne.n	8002500 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fcd4 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	6093      	str	r3, [r2, #8]
}
 80024fe:	e277      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d135      	bne.n	8002582 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3358      	adds	r3, #88	; 0x58
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	0151      	lsls	r1, r2, #5
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	440a      	add	r2, r1
 8002540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fc9c 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	335d      	adds	r3, #93	; 0x5d
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
}
 8002580:	e236      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d12b      	bne.n	80025f0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	2308      	movs	r3, #8
 80025a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	0151      	lsls	r1, r2, #5
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	440a      	add	r2, r1
 80025c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fc5c 	bl	8004e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	335d      	adds	r3, #93	; 0x5d
 80025ea:	2205      	movs	r2, #5
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	e1ff      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b10      	cmp	r3, #16
 8002604:	d155      	bne.n	80026b2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3358      	adds	r3, #88	; 0x58
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	335d      	adds	r3, #93	; 0x5d
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	333d      	adds	r3, #61	; 0x3d
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d114      	bne.n	800266e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	333c      	adds	r3, #60	; 0x3c
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	333d      	adds	r3, #61	; 0x3d
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	440a      	add	r2, r1
 8002684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fbfa 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	461a      	mov	r2, r3
 80026ac:	2310      	movs	r3, #16
 80026ae:	6093      	str	r3, [r2, #8]
}
 80026b0:	e19e      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d12b      	bne.n	8002720 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fbcd 	bl	8004e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	335d      	adds	r3, #93	; 0x5d
 8002708:	2206      	movs	r2, #6
 800270a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	6093      	str	r3, [r2, #8]
}
 800271e:	e167      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d135      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002752:	f043 0302 	orr.w	r3, r3, #2
 8002756:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fb95 	bl	8004e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2310      	movs	r3, #16
 8002778:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	335d      	adds	r3, #93	; 0x5d
 800279e:	2208      	movs	r2, #8
 80027a0:	701a      	strb	r2, [r3, #0]
}
 80027a2:	e125      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 811a 	bne.w	80029f0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d6:	f023 0302 	bic.w	r3, r3, #2
 80027da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	335d      	adds	r3, #93	; 0x5d
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d137      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	335c      	adds	r3, #92	; 0x5c
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	333f      	adds	r3, #63	; 0x3f
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d00b      	beq.n	8002834 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	f040 80c5 	bne.w	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	3351      	adds	r3, #81	; 0x51
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	3351      	adds	r3, #81	; 0x51
 800285c:	4602      	mov	r2, r0
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e0ad      	b.n	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	335d      	adds	r3, #93	; 0x5d
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d10a      	bne.n	800288e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e097      	b.n	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335d      	adds	r3, #93	; 0x5d
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d10a      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	335c      	adds	r3, #92	; 0x5c
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e081      	b.n	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	335d      	adds	r3, #93	; 0x5d
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10a      	bne.n	80028e6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	335c      	adds	r3, #92	; 0x5c
 80028e0:	2205      	movs	r2, #5
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e06b      	b.n	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	335d      	adds	r3, #93	; 0x5d
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d00a      	beq.n	8002912 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	335d      	adds	r3, #93	; 0x5d
 800290c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800290e:	2b08      	cmp	r3, #8
 8002910:	d155      	bne.n	80029be <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3358      	adds	r3, #88	; 0x58
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	3358      	adds	r3, #88	; 0x58
 8002936:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3358      	adds	r3, #88	; 0x58
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d914      	bls.n	8002978 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	3358      	adds	r3, #88	; 0x58
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e009      	b.n	800298c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	335c      	adds	r3, #92	; 0x5c
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	2302      	movs	r3, #2
 80029ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	b2d8      	uxtb	r0, r3
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4601      	mov	r1, r0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f004 fac6 	bl	8006f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0c5b      	lsrs	r3, r3, #17
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d003      	beq.n	8002a3c <HCD_RXQLVL_IRQHandler+0x44>
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	f000 8082 	beq.w	8002b3e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a3a:	e083      	b.n	8002b44 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d07f      	beq.n	8002b42 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3344      	adds	r3, #68	; 0x44
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d074      	beq.n	8002b42 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	3344      	adds	r3, #68	; 0x44
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	b292      	uxth	r2, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f001 fdad 	bl	80045d2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	3344      	adds	r3, #68	; 0x44
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	18d1      	adds	r1, r2, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4403      	add	r3, r0
 8002a9c:	3344      	adds	r3, #68	; 0x44
 8002a9e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	334c      	adds	r3, #76	; 0x4c
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	18d1      	adds	r1, r2, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4403      	add	r3, r0
 8002ac4:	334c      	adds	r3, #76	; 0x4c
 8002ac6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HCD_RXQLVL_IRQHandler+0x154>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d031      	beq.n	8002b42 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002af4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002afc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3350      	adds	r3, #80	; 0x50
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3350      	adds	r3, #80	; 0x50
 8002b38:	4602      	mov	r2, r0
 8002b3a:	701a      	strb	r2, [r3, #0]
      break;
 8002b3c:	e001      	b.n	8002b42 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b42:	bf00      	nop
  }
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	1ff80000 	.word	0x1ff80000

08002b50 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b7c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d113      	bne.n	8002bb0 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10a      	bne.n	8002ba8 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002ba0:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f004 f9ce 	bl	8006f44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d147      	bne.n	8002c4a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d129      	bne.n	8002c20 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d113      	bne.n	8002bfc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bde:	d106      	bne.n	8002bee <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fe2e 	bl	8004848 <USB_InitFSLSPClkSel>
 8002bec:	e011      	b.n	8002c12 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fe27 	bl	8004848 <USB_InitFSLSPClkSel>
 8002bfa:	e00a      	b.n	8002c12 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c10:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f004 f9c0 	bl	8006f98 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f004 f993 	bl	8006f44 <HAL_HCD_Connect_Callback>
 8002c1e:	e014      	b.n	8002c4a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f004 f9c7 	bl	8006fb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c38:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d103      	bne.n	8002c5c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f043 0320 	orr.w	r3, r3, #32
 8002c5a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e10f      	b.n	8002ea2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fe6e 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f001 f9ac 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x64>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_I2C_Init+0x240>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x72>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_I2C_Init+0x244>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0db      	b.n	8002ea2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <HAL_I2C_Init+0x248>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a64      	ldr	r2, [pc, #400]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xb4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xc8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_I2C_Init+0x24c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4956      	ldr	r1, [pc, #344]	; (8002eac <HAL_I2C_Init+0x23c>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d80d      	bhi.n	8002d74 <HAL_I2C_Init+0x104>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	bf38      	it	cc
 8002d70:	2304      	movcc	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x130>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x156>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x15e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x184>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1a4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e128      	b.n	8003124 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a90      	ldr	r2, [pc, #576]	; (800312c <HAL_I2S_Init+0x26c>)
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fd fd8b 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f08:	f023 030f 	bic.w	r3, r3, #15
 8002f0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d060      	beq.n	8002fe0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f26:	2310      	movs	r3, #16
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e001      	b.n	8002f30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d802      	bhi.n	8002f3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f001 f95c 	bl	80041fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4e:	d125      	bne.n	8002f9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	3305      	adds	r3, #5
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e01f      	b.n	8002fba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	3305      	adds	r3, #5
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e00e      	b.n	8002fba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	3305      	adds	r3, #5
 8002fb8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4a5c      	ldr	r2, [pc, #368]	; (8003130 <HAL_I2S_Init+0x270>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	08db      	lsrs	r3, r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d902      	bls.n	8002ff4 <HAL_I2S_Init+0x134>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d907      	bls.n	8003004 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e08f      	b.n	8003124 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	ea42 0103 	orr.w	r1, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	430a      	orrs	r2, r1
 8003016:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6851      	ldr	r1, [r2, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6892      	ldr	r2, [r2, #8]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68d2      	ldr	r2, [r2, #12]
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6992      	ldr	r2, [r2, #24]
 800303a:	430a      	orrs	r2, r1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003046:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d161      	bne.n	8003114 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_I2S_Init+0x274>)
 8003054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a37      	ldr	r2, [pc, #220]	; (8003138 <HAL_I2S_Init+0x278>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_I2S_Init+0x1a4>
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_I2S_Init+0x27c>)
 8003062:	e001      	b.n	8003068 <HAL_I2S_Init+0x1a8>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	4932      	ldr	r1, [pc, #200]	; (8003138 <HAL_I2S_Init+0x278>)
 8003070:	428a      	cmp	r2, r1
 8003072:	d101      	bne.n	8003078 <HAL_I2S_Init+0x1b8>
 8003074:	4a31      	ldr	r2, [pc, #196]	; (800313c <HAL_I2S_Init+0x27c>)
 8003076:	e001      	b.n	800307c <HAL_I2S_Init+0x1bc>
 8003078:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800307c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003080:	f023 030f 	bic.w	r3, r3, #15
 8003084:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <HAL_I2S_Init+0x278>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_I2S_Init+0x1d4>
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_I2S_Init+0x27c>)
 8003092:	e001      	b.n	8003098 <HAL_I2S_Init+0x1d8>
 8003094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003098:	2202      	movs	r2, #2
 800309a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_I2S_Init+0x278>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_I2S_Init+0x1ea>
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_I2S_Init+0x27c>)
 80030a8:	e001      	b.n	80030ae <HAL_I2S_Init+0x1ee>
 80030aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d003      	beq.n	80030c4 <HAL_I2S_Init+0x204>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	b299      	uxth	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030e6:	4303      	orrs	r3, r0
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	430b      	orrs	r3, r1
 80030ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_I2S_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_I2S_Init+0x24c>
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_I2S_Init+0x27c>)
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x250>
 800310c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003110:	897a      	ldrh	r2, [r7, #10]
 8003112:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08003237 	.word	0x08003237
 8003130:	cccccccd 	.word	0xcccccccd
 8003134:	0800334d 	.word	0x0800334d
 8003138:	40003800 	.word	0x40003800
 800313c:	40003400 	.word	0x40003400

08003140 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffb8 	bl	8003140 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	b292      	uxth	r2, r2
 80031ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	1c9a      	adds	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10e      	bne.n	800322e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800321e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff93 	bl	8003154 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b04      	cmp	r3, #4
 8003250:	d13a      	bne.n	80032c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d109      	bne.n	8003270 <I2S_IRQHandler+0x3a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d102      	bne.n	8003270 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffb4 	bl	80031d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d126      	bne.n	80032c8 <I2S_IRQHandler+0x92>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d11f      	bne.n	80032c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003296:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f043 0202 	orr.w	r2, r3, #2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ff50 	bl	8003168 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d136      	bne.n	8003342 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d109      	bne.n	80032f2 <I2S_IRQHandler+0xbc>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d102      	bne.n	80032f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff45 	bl	800317c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d122      	bne.n	8003342 <I2S_IRQHandler+0x10c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d11b      	bne.n	8003342 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003318:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff13 	bl	8003168 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4aa2      	ldr	r2, [pc, #648]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003366:	4ba2      	ldr	r3, [pc, #648]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003368:	e001      	b.n	800336e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800336a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a9b      	ldr	r2, [pc, #620]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003384:	4b9a      	ldr	r3, [pc, #616]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003386:	e001      	b.n	800338c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d004      	beq.n	80033a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 8099 	bne.w	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d107      	bne.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f925 	bl	8003608 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9c8 	bl	8003768 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d13a      	bne.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d035      	beq.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a7e      	ldr	r2, [pc, #504]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033f6:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f8:	e001      	b.n	80033fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4979      	ldr	r1, [pc, #484]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003406:	428b      	cmp	r3, r1
 8003408:	d101      	bne.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800340c:	e001      	b.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800340e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003416:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003426:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fe88 	bl	8003168 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	f040 80be 	bne.w	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80b8 	beq.w	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800348a:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800348c:	e001      	b.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800348e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4954      	ldr	r1, [pc, #336]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800349a:	428b      	cmp	r3, r1
 800349c:	d101      	bne.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800349e:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034a0:	e001      	b.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f043 0204 	orr.w	r2, r3, #4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fe4a 	bl	8003168 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d4:	e084      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d107      	bne.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8be 	bl	800366c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8fd 	bl	8003704 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d12f      	bne.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02a      	beq.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800352c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800353a:	e001      	b.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800353c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4929      	ldr	r1, [pc, #164]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003548:	428b      	cmp	r3, r1
 800354a:	d101      	bne.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800354c:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800354e:	e001      	b.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003558:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0202 	orr.w	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fdfa 	bl	8003168 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d131      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d02c      	beq.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003594:	e001      	b.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4912      	ldr	r1, [pc, #72]	; (80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035a2:	428b      	cmp	r3, r1
 80035a4:	d101      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a8:	e001      	b.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0204 	orr.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fdc5 	bl	8003168 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035de:	e000      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035e0:	bf00      	nop
}
 80035e2:	bf00      	nop
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40003800 	.word	0x40003800
 80035f0:	40003400 	.word	0x40003400

080035f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c99      	adds	r1, r3, #2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6251      	str	r1, [r2, #36]	; 0x24
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d113      	bne.n	8003662 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003648:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ffc9 	bl	80035f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c99      	adds	r1, r3, #2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6251      	str	r1, [r2, #36]	; 0x24
 800367e:	8819      	ldrh	r1, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <I2SEx_TxISR_I2SExt+0x90>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <I2SEx_TxISR_I2SExt+0x22>
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <I2SEx_TxISR_I2SExt+0x94>)
 800368c:	e001      	b.n	8003692 <I2SEx_TxISR_I2SExt+0x26>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	460a      	mov	r2, r1
 8003694:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d121      	bne.n	80036f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <I2SEx_TxISR_I2SExt+0x90>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <I2SEx_TxISR_I2SExt+0x50>
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <I2SEx_TxISR_I2SExt+0x94>)
 80036ba:	e001      	b.n	80036c0 <I2SEx_TxISR_I2SExt+0x54>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	490d      	ldr	r1, [pc, #52]	; (80036fc <I2SEx_TxISR_I2SExt+0x90>)
 80036c8:	428b      	cmp	r3, r1
 80036ca:	d101      	bne.n	80036d0 <I2SEx_TxISR_I2SExt+0x64>
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <I2SEx_TxISR_I2SExt+0x94>)
 80036ce:	e001      	b.n	80036d4 <I2SEx_TxISR_I2SExt+0x68>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff81 	bl	80035f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40003800 	.word	0x40003800
 8003700:	40003400 	.word	0x40003400

08003704 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68d8      	ldr	r0, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	1c99      	adds	r1, r3, #2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800371c:	b282      	uxth	r2, r0
 800371e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d113      	bne.n	8003760 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003746:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff4a 	bl	80035f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <I2SEx_RxISR_I2SExt+0x90>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <I2SEx_RxISR_I2SExt+0x16>
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <I2SEx_RxISR_I2SExt+0x94>)
 800377c:	e001      	b.n	8003782 <I2SEx_RxISR_I2SExt+0x1a>
 800377e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003782:	68d8      	ldr	r0, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	1c99      	adds	r1, r3, #2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800378e:	b282      	uxth	r2, r0
 8003790:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d121      	bne.n	80037ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <I2SEx_RxISR_I2SExt+0x90>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <I2SEx_RxISR_I2SExt+0x50>
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <I2SEx_RxISR_I2SExt+0x94>)
 80037b6:	e001      	b.n	80037bc <I2SEx_RxISR_I2SExt+0x54>
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <I2SEx_RxISR_I2SExt+0x90>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d101      	bne.n	80037cc <I2SEx_RxISR_I2SExt+0x64>
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <I2SEx_RxISR_I2SExt+0x94>)
 80037ca:	e001      	b.n	80037d0 <I2SEx_RxISR_I2SExt+0x68>
 80037cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff03 	bl	80035f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40003800 	.word	0x40003800
 80037fc:	40003400 	.word	0x40003400

08003800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e22d      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381e:	4ba3      	ldr	r3, [pc, #652]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00c      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	2b08      	cmp	r3, #8
 8003834:	d112      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b99      	ldr	r3, [pc, #612]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e208      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b91      	ldr	r3, [pc, #580]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a90      	ldr	r2, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a83      	ldr	r2, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a80      	ldr	r2, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd fa80 	bl	8000dbc <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fd fa7c 	bl	8000dbc <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1cd      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd fa6c 	bl	8000dbc <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd fa68 	bl	8000dbc <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e1b9      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b62      	ldr	r3, [pc, #392]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d116      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e18d      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b56      	ldr	r3, [pc, #344]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4952      	ldr	r1, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	e03a      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x2b0>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fd fa21 	bl	8000dbc <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397e:	f7fd fa1d 	bl	8000dbc <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e16e      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4940      	ldr	r1, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x2b0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd fa00 	bl	8000dbc <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fd f9fc 	bl	8000dbc <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e14d      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d030      	beq.n	8003a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_OscConfig+0x2b4>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd f9e0 	bl	8000dbc <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fd f9dc 	bl	8000dbc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e12d      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
 8003a1e:	e015      	b.n	8003a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a20:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <HAL_RCC_OscConfig+0x2b4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fd f9c9 	bl	8000dbc <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fd f9c5 	bl	8000dbc <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e116      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a0 	beq.w	8003b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d121      	bne.n	8003ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fd f98b 	bl	8000dbc <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	e011      	b.n	8003ace <HAL_RCC_OscConfig+0x2ce>
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	42470000 	.word	0x42470000
 8003ab4:	42470e80 	.word	0x42470e80
 8003ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fd f97e 	bl	8000dbc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0cf      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2f0>
 8003ae2:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	e01c      	b.n	8003b2a <HAL_RCC_OscConfig+0x32a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x312>
 8003af8:	4b60      	ldr	r3, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a5f      	ldr	r2, [pc, #380]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	4b5d      	ldr	r3, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	e00b      	b.n	8003b2a <HAL_RCC_OscConfig+0x32a>
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a59      	ldr	r2, [pc, #356]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a56      	ldr	r2, [pc, #344]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd f943 	bl	8000dbc <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd f93f 	bl	8000dbc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e08e      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCC_OscConfig+0x33a>
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd f92d 	bl	8000dbc <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd f929 	bl	8000dbc <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e078      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ee      	bne.n	8003b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a3a      	ldr	r2, [pc, #232]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d064      	beq.n	8003c6c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d05c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d141      	bne.n	8003c3a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCC_OscConfig+0x480>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd f8fe 	bl	8000dbc <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd f8fa 	bl	8000dbc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04b      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	491d      	ldr	r1, [pc, #116]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_RCC_OscConfig+0x480>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fd f8d3 	bl	8000dbc <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fd f8cf 	bl	8000dbc <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e020      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x41a>
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_OscConfig+0x480>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f8bc 	bl	8000dbc <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd f8b8 	bl	8000dbc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e009      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_OscConfig+0x47c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x448>
 8003c66:	e001      	b.n	8003c6c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	42470060 	.word	0x42470060

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0ca      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b64      	ldr	r3, [pc, #400]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b62      	ldr	r3, [pc, #392]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b6      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	494c      	ldr	r1, [pc, #304]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d044      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d119      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07d      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06d      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e065      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4933      	ldr	r1, [pc, #204]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fd f822 	bl	8000dbc <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7c:	f7fd f81e 	bl	8000dbc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04d      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 020c 	and.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d1eb      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_ClockConfig+0x1b4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e030      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4915      	ldr	r1, [pc, #84]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	490d      	ldr	r1, [pc, #52]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e0a:	f000 f81d 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	5cd3      	ldrb	r3, [r2, r3]
 8003e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7fc ff84 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	080075cc 	.word	0x080075cc
 8003e44:	20000000 	.word	0x20000000

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	2300      	movs	r3, #0
 8003e58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d007      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x32>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x38>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b4 	bne.w	8003fdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e76:	60bb      	str	r3, [r7, #8]
       break;
 8003e78:	e0b3      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7a:	4b5e      	ldr	r3, [pc, #376]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e7c:	60bb      	str	r3, [r7, #8]
      break;
 8003e7e:	e0b0      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8a:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04a      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e96:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	f04f 0400 	mov.w	r4, #0
 8003ea0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	ea03 0501 	and.w	r5, r3, r1
 8003eac:	ea04 0602 	and.w	r6, r4, r2
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	0154      	lsls	r4, r2, #5
 8003ebe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ec2:	014b      	lsls	r3, r1, #5
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	1b49      	subs	r1, r1, r5
 8003eca:	eb62 0206 	sbc.w	r2, r2, r6
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	0194      	lsls	r4, r2, #6
 8003ed8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003edc:	018b      	lsls	r3, r1, #6
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	00e2      	lsls	r2, r4, #3
 8003eee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ef2:	00d9      	lsls	r1, r3, #3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	195b      	adds	r3, r3, r5
 8003efa:	eb44 0406 	adc.w	r4, r4, r6
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	0262      	lsls	r2, r4, #9
 8003f08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f0c:	0259      	lsls	r1, r3, #9
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	4621      	mov	r1, r4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f04f 0400 	mov.w	r4, #0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f7fc f952 	bl	80001c8 <__aeabi_uldivmod>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e049      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea03 0501 	and.w	r5, r3, r1
 8003f42:	ea04 0602 	and.w	r6, r4, r2
 8003f46:	4629      	mov	r1, r5
 8003f48:	4632      	mov	r2, r6
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	0154      	lsls	r4, r2, #5
 8003f54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f58:	014b      	lsls	r3, r1, #5
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	1b49      	subs	r1, r1, r5
 8003f60:	eb62 0206 	sbc.w	r2, r2, r6
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	0194      	lsls	r4, r2, #6
 8003f6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f72:	018b      	lsls	r3, r1, #6
 8003f74:	1a5b      	subs	r3, r3, r1
 8003f76:	eb64 0402 	sbc.w	r4, r4, r2
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	00e2      	lsls	r2, r4, #3
 8003f84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f88:	00d9      	lsls	r1, r3, #3
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	195b      	adds	r3, r3, r5
 8003f90:	eb44 0406 	adc.w	r4, r4, r6
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	02a2      	lsls	r2, r4, #10
 8003f9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fa2:	0299      	lsls	r1, r3, #10
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4621      	mov	r1, r4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f04f 0400 	mov.w	r4, #0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	f7fc f907 	bl	80001c8 <__aeabi_uldivmod>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fde:	60bb      	str	r3, [r7, #8]
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	007a1200 	.word	0x007a1200

08003ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000000 	.word	0x20000000

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004014:	f7ff fff0 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004018:	4601      	mov	r1, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0a9b      	lsrs	r3, r3, #10
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4a03      	ldr	r2, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	080075dc 	.word	0x080075dc

08004038 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800405c:	2b00      	cmp	r3, #0
 800405e:	d035      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004060:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004066:	f7fc fea9 	bl	8000dbc <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800406e:	f7fc fea5 	bl	8000dbc <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0b0      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004080:	4b5b      	ldr	r3, [pc, #364]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	019a      	lsls	r2, r3, #6
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	071b      	lsls	r3, r3, #28
 8004098:	4955      	ldr	r1, [pc, #340]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a6:	f7fc fe89 	bl	8000dbc <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ae:	f7fc fe85 	bl	8000dbc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e090      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8083 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b44      	ldr	r3, [pc, #272]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a43      	ldr	r2, [pc, #268]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040f6:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3e      	ldr	r2, [pc, #248]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004102:	f7fc fe5b 	bl	8000dbc <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fc fe57 	bl	8000dbc <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e062      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004130:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02f      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d028      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004146:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004150:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d114      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800416e:	f7fc fe25 	bl	8000dbc <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fc fe21 	bl	8000dbc <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e02a      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ee      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a4:	d10d      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ba:	490d      	ldr	r1, [pc, #52]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
 80041c0:	e005      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041cc:	6093      	str	r3, [r2, #8]
 80041ce:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	4905      	ldr	r1, [pc, #20]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	42470068 	.word	0x42470068
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40007000 	.word	0x40007000
 80041f8:	42470e40 	.word	0x42470e40

080041fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d13d      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004222:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d004      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800422a:	2b01      	cmp	r3, #1
 800422c:	d12f      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004230:	617b      	str	r3, [r7, #20]
          break;
 8004232:	e02f      	b.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004240:	d108      	bne.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e007      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800427a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427e:	0f1b      	lsrs	r3, r3, #28
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	617b      	str	r3, [r7, #20]
          break;
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
          break;
 8004292:	bf00      	nop
        }
      }
      break;
 8004294:	bf00      	nop
    }
  }
  return frequency;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00bb8000 	.word	0x00bb8000
 80042ac:	007a1200 	.word	0x007a1200
 80042b0:	00f42400 	.word	0x00f42400

080042b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e056      	b.n	8004374 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fc fbf9 	bl	8000ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	ea42 0103 	orr.w	r1, r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	f003 0104 	and.w	r1, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004362:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800437c:	b084      	sub	sp, #16
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	f107 001c 	add.w	r0, r7, #28
 800438a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	2b01      	cmp	r3, #1
 8004392:	d122      	bne.n	80043da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f94a 	bl	8004668 <USB_CoreReset>
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]
 80043d8:	e01a      	b.n	8004410 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f93e 	bl	8004668 <USB_CoreReset>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	639a      	str	r2, [r3, #56]	; 0x38
 8004402:	e005      	b.n	8004410 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10b      	bne.n	800442e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f043 0206 	orr.w	r2, r3, #6
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800443a:	b004      	add	sp, #16
 800443c:	4770      	bx	lr

0800443e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 0201 	bic.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e00b      	b.n	80044c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e001      	b.n	80044c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e003      	b.n	80044ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f7fc fc84 	bl	8000dd4 <HAL_Delay>

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <USB_FlushTxFifo+0x48>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d0f0      	beq.n	80044f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	00030d40 	.word	0x00030d40

08004524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2210      	movs	r2, #16
 8004534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <USB_FlushRxFifo+0x40>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d0f0      	beq.n	8004536 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	00030d40 	.word	0x00030d40

08004568 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	460b      	mov	r3, r1
 8004578:	71fb      	strb	r3, [r7, #7]
 800457a:	4613      	mov	r3, r2
 800457c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004586:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11a      	bne.n	80045c4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800458e:	88bb      	ldrh	r3, [r7, #4]
 8004590:	3303      	adds	r3, #3
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e00f      	b.n	80045bc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	031a      	lsls	r2, r3, #12
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a8:	461a      	mov	r2, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3304      	adds	r3, #4
 80045b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d3eb      	bcc.n	800459c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b089      	sub	sp, #36	; 0x24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	3303      	adds	r3, #3
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e00b      	b.n	800460e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	601a      	str	r2, [r3, #0]
    pDest++;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3304      	adds	r3, #4
 8004606:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	3301      	adds	r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3ef      	bcc.n	80045f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004616:	69fb      	ldr	r3, [r7, #28]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3724      	adds	r7, #36	; 0x24
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4013      	ands	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0301 	and.w	r3, r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <USB_CoreReset+0x64>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e01b      	b.n	80046be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	daf2      	bge.n	8004674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <USB_CoreReset+0x64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d0f0      	beq.n	800469e <USB_CoreReset+0x36>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	00030d40 	.word	0x00030d40

080046d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 001c 	add.w	r0, r7, #28
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b03      	cmp	r3, #3
 8004726:	d10a      	bne.n	800473e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e014      	b.n	8004768 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e009      	b.n	8004768 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004762:	f023 0304 	bic.w	r3, r3, #4
 8004766:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004768:	2110      	movs	r1, #16
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff feb4 	bl	80044d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fed7 	bl	8004524 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e015      	b.n	80047a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3e5      	bcc.n	800477c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80047b0:	2101      	movs	r1, #1
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8ac 	bl	8004910 <USB_DriveVbus>

  HAL_Delay(200U);
 80047b8:	20c8      	movs	r0, #200	; 0xc8
 80047ba:	f7fc fb0b 	bl	8000dd4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a14      	ldr	r2, [pc, #80]	; (8004834 <USB_HostInit+0x164>)
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a13      	ldr	r2, [pc, #76]	; (8004838 <USB_HostInit+0x168>)
 80047ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80047ee:	e009      	b.n	8004804 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a10      	ldr	r2, [pc, #64]	; (800483c <USB_HostInit+0x16c>)
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <USB_HostInit+0x170>)
 8004800:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f043 0210 	orr.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <USB_HostInit+0x174>)
 800481c:	4313      	orrs	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482e:	b004      	add	sp, #16
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	01000200 	.word	0x01000200
 8004838:	00e00300 	.word	0x00e00300
 800483c:	00600080 	.word	0x00600080
 8004840:	004000e0 	.word	0x004000e0
 8004844:	a3200008 	.word	0xa3200008

08004848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004890:	461a      	mov	r2, r3
 8004892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	e009      	b.n	80048ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d106      	bne.n	80048ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a6:	461a      	mov	r2, r3
 80048a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80048ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80048ec:	2064      	movs	r0, #100	; 0x64
 80048ee:	f7fc fa71 	bl	8000dd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004900:	200a      	movs	r0, #10
 8004902:	f7fc fa67 	bl	8000dd4 <HAL_Delay>

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <USB_DriveVbus+0x44>
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800494e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004952:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d109      	bne.n	8004974 <USB_DriveVbus+0x64>
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800496e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004972:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	0c5b      	lsrs	r3, r3, #17
 80049a0:	f003 0303 	and.w	r3, r3, #3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	b29b      	uxth	r3, r3
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	70fb      	strb	r3, [r7, #3]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70bb      	strb	r3, [r7, #2]
 80049ea:	4613      	mov	r3, r2
 80049ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
 8004a08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d87e      	bhi.n	8004b10 <USB_HC_Init+0x13c>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <USB_HC_Init+0x44>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004ad3 	.word	0x08004ad3
 8004a20:	08004a29 	.word	0x08004a29
 8004a24:	08004a95 	.word	0x08004a95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da10      	bge.n	8004a66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004a64:	e057      	b.n	8004b16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d051      	beq.n	8004b16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a90:	60d3      	str	r3, [r2, #12]
      break;
 8004a92:	e040      	b.n	8004b16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004aa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da34      	bge.n	8004b1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ace:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004ad0:	e023      	b.n	8004b1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f240 2325 	movw	r3, #549	; 0x225
 8004ae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da17      	bge.n	8004b1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b0e:	e006      	b.n	8004b1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
      break;
 8004b14:	e004      	b.n	8004b20 <USB_HC_Init+0x14c>
      break;
 8004b16:	bf00      	nop
 8004b18:	e002      	b.n	8004b20 <USB_HC_Init+0x14c>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <USB_HC_Init+0x14c>
      break;
 8004b1e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da03      	bge.n	8004b5a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	e001      	b.n	8004b5e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d103      	bne.n	8004b6e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e001      	b.n	8004b72 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b72:	787b      	ldrb	r3, [r7, #1]
 8004b74:	059b      	lsls	r3, r3, #22
 8004b76:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b7a:	78bb      	ldrb	r3, [r7, #2]
 8004b7c:	02db      	lsls	r3, r3, #11
 8004b7e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b82:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b88:	049b      	lsls	r3, r3, #18
 8004b8a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004b8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004b96:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bae:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d10f      	bne.n	8004bd8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bd6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop

08004be8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <USB_HC_StartXfer+0x7c>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	791b      	ldrb	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d124      	bne.n	8004c64 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <USB_HC_StartXfer+0x50>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	795b      	ldrb	r3, [r3, #5]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa2e 	bl	8005090 <USB_DoPing>
      return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e112      	b.n	8004e5e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d112      	bne.n	8004c64 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	6a3a      	ldr	r2, [r7, #32]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c58:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c5c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2200      	movs	r2, #0
 8004c62:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d018      	beq.n	8004c9e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	8912      	ldrh	r2, [r2, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	3b01      	subs	r3, #1
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	8912      	ldrh	r2, [r2, #8]
 8004c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c80:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004c82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c84:	8b7b      	ldrh	r3, [r7, #26]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90b      	bls.n	8004ca2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004c8a:	8b7b      	ldrh	r3, [r7, #26]
 8004c8c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	8912      	ldrh	r2, [r2, #8]
 8004c94:	fb02 f203 	mul.w	r2, r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	611a      	str	r2, [r3, #16]
 8004c9c:	e001      	b.n	8004ca2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d006      	beq.n	8004cb8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	8912      	ldrh	r2, [r2, #8]
 8004cb0:	fb02 f203 	mul.w	r2, r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cc2:	04d9      	lsls	r1, r3, #19
 8004cc4:	4b68      	ldr	r3, [pc, #416]	; (8004e68 <USB_HC_StartXfer+0x280>)
 8004cc6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cc8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	7a9b      	ldrb	r3, [r3, #10]
 8004cce:	075b      	lsls	r3, r3, #29
 8004cd0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004cd4:	69f9      	ldr	r1, [r7, #28]
 8004cd6:	0148      	lsls	r0, r1, #5
 8004cd8:	6a39      	ldr	r1, [r7, #32]
 8004cda:	4401      	add	r1, r0
 8004cdc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ce0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ce2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	7e7b      	ldrb	r3, [r7, #25]
 8004d46:	075b      	lsls	r3, r3, #29
 8004d48:	69f9      	ldr	r1, [r7, #28]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d68:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d6a:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d72:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d74:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	78db      	ldrb	r3, [r3, #3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	4a39      	ldr	r2, [pc, #228]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e005      	b.n	8004d98 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004d8c:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d94:	4a35      	ldr	r2, [pc, #212]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d96:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004da0:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004da2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <USB_HC_StartXfer+0x284>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d14e      	bne.n	8004e5c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d14a      	bne.n	8004e5c <USB_HC_StartXfer+0x274>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d046      	beq.n	8004e5c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	79db      	ldrb	r3, [r3, #7]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d830      	bhi.n	8004e38 <USB_HC_StartXfer+0x250>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <USB_HC_StartXfer+0x1f4>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004ded 	.word	0x08004ded
 8004de8:	08004e11 	.word	0x08004e11
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	3303      	adds	r3, #3
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004df6:	8afa      	ldrh	r2, [r7, #22]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d91c      	bls.n	8004e3c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e0e:	e015      	b.n	8004e3c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	3303      	adds	r3, #3
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e1a:	8afa      	ldrh	r2, [r7, #22]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90a      	bls.n	8004e40 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e36:	e003      	b.n	8004e40 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <USB_HC_StartXfer+0x25a>
          break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <USB_HC_StartXfer+0x25a>
          break;
 8004e40:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	785a      	ldrb	r2, [r3, #1]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	b298      	uxth	r0, r3
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	4603      	mov	r3, r0
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff fb86 	bl	8004568 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	1ff80000 	.word	0x1ff80000
 8004e6c:	200000b0 	.word	0x200000b0

08004e70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	b29b      	uxth	r3, r3
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b087      	sub	sp, #28
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	0c9b      	lsrs	r3, r3, #18
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <USB_HC_Halt+0x3a>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d16c      	bne.n	8004fa6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d143      	bne.n	8004f80 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f64:	d81d      	bhi.n	8004fa2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f7c:	d0ec      	beq.n	8004f58 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f7e:	e080      	b.n	8005082 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fa0:	e06f      	b.n	8005082 <USB_HC_Halt+0x1f0>
          break;
 8004fa2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fa4:	e06d      	b.n	8005082 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d143      	bne.n	800505e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	440a      	add	r2, r1
 800500c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005014:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	440a      	add	r2, r1
 800502c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005034:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3301      	adds	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005042:	d81d      	bhi.n	8005080 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505a:	d0ec      	beq.n	8005036 <USB_HC_Halt+0x1a4>
 800505c:	e011      	b.n	8005082 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	440a      	add	r2, r1
 8005074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e000      	b.n	8005082 <USB_HC_Halt+0x1f0>
          break;
 8005080:	bf00      	nop
    }
  }

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	04da      	lsls	r2, r3, #19
 80050ac:	4b15      	ldr	r3, [pc, #84]	; (8005104 <USB_DoPing+0x74>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	1ff80000 	.word	0x1ff80000

08005108 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff f9a1 	bl	8004460 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800511e:	2110      	movs	r1, #16
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff f9d9 	bl	80044d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff f9fc 	bl	8004524 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e01f      	b.n	8005172 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005148:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005150:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005158:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b0f      	cmp	r3, #15
 8005176:	d9dc      	bls.n	8005132 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e034      	b.n	80051e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005194:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3301      	adds	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c4:	d80c      	bhi.n	80051e0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051dc:	d0ec      	beq.n	80051b8 <USB_StopHost+0xb0>
 80051de:	e000      	b.n	80051e2 <USB_StopHost+0xda>
        break;
 80051e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3301      	adds	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d9c7      	bls.n	800517e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f4:	461a      	mov	r2, r3
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff f91a 	bl	800443e <USB_EnableGlobalInt>

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b089      	sub	sp, #36	; 0x24
 8005218:	af04      	add	r7, sp, #16
 800521a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800521c:	2302      	movs	r3, #2
 800521e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005220:	2301      	movs	r3, #1
 8005222:	2202      	movs	r2, #2
 8005224:	2102      	movs	r1, #2
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fc3a 	bl	8005aa0 <USBH_FindInterface>
 800522c:	4603      	mov	r3, r0
 800522e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2bff      	cmp	r3, #255	; 0xff
 8005234:	f000 812a 	beq.w	800548c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc13 	bl	8005a68 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005248:	2050      	movs	r0, #80	; 0x50
 800524a:	f002 f8df 	bl	800740c <malloc>
 800524e:	4603      	mov	r3, r0
 8005250:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	211a      	movs	r1, #26
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b25b      	sxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	da15      	bge.n	80052a0 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	211a      	movs	r1, #26
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	4413      	add	r3, r2
 8005280:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	211a      	movs	r1, #26
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fd21 	bl	8006cee <USBH_AllocPipe>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	7819      	ldrb	r1, [r3, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	7858      	ldrb	r0, [r3, #1]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	8952      	ldrh	r2, [r2, #10]
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	2203      	movs	r2, #3
 80052d0:	9201      	str	r2, [sp, #4]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4623      	mov	r3, r4
 80052d6:	4602      	mov	r2, r0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fcd9 	bl	8006c90 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2200      	movs	r2, #0
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 ffe0 	bl	80072ac <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	210a      	movs	r1, #10
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fbd4 	bl	8005aa0 <USBH_FindInterface>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	2bff      	cmp	r3, #255	; 0xff
 8005300:	f000 80c4 	beq.w	800548c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	211a      	movs	r1, #26
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b25b      	sxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	da16      	bge.n	800534a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	211a      	movs	r1, #26
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005332:	7bbb      	ldrb	r3, [r7, #14]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	211a      	movs	r1, #26
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	4413      	add	r3, r2
 800533e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	835a      	strh	r2, [r3, #26]
 8005348:	e015      	b.n	8005376 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	211a      	movs	r1, #26
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	4413      	add	r3, r2
 8005356:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	211a      	movs	r1, #26
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005370:	881a      	ldrh	r2, [r3, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	211a      	movs	r1, #26
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b25b      	sxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	da16      	bge.n	80053bc <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	211a      	movs	r1, #26
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	211a      	movs	r1, #26
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	835a      	strh	r2, [r3, #26]
 80053ba:	e015      	b.n	80053e8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	211a      	movs	r1, #26
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	211a      	movs	r1, #26
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	7b9b      	ldrb	r3, [r3, #14]
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fc7d 	bl	8006cee <USBH_AllocPipe>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	7bdb      	ldrb	r3, [r3, #15]
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fc73 	bl	8006cee <USBH_AllocPipe>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	7b59      	ldrb	r1, [r3, #13]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	7b98      	ldrb	r0, [r3, #14]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	8b12      	ldrh	r2, [r2, #24]
 8005428:	9202      	str	r2, [sp, #8]
 800542a:	2202      	movs	r2, #2
 800542c:	9201      	str	r2, [sp, #4]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	4623      	mov	r3, r4
 8005432:	4602      	mov	r2, r0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fc2b 	bl	8006c90 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	7b19      	ldrb	r1, [r3, #12]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	7bd8      	ldrb	r0, [r3, #15]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	8b52      	ldrh	r2, [r2, #26]
 8005452:	9202      	str	r2, [sp, #8]
 8005454:	2202      	movs	r2, #2
 8005456:	9201      	str	r2, [sp, #4]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	4623      	mov	r3, r4
 800545c:	4602      	mov	r2, r0
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 fc16 	bl	8006c90 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	7b5b      	ldrb	r3, [r3, #13]
 8005470:	2200      	movs	r2, #0
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 ff19 	bl	80072ac <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	7b1b      	ldrb	r3, [r3, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 ff12 	bl	80072ac <USBH_LL_SetToggle>
      status = USBH_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bd90      	pop	{r4, r7, pc}

08005496 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fc09 	bl	8006cce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fc31 	bl	8006d2a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	7b1b      	ldrb	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	7b1b      	ldrb	r3, [r3, #12]
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fbf6 	bl	8006cce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	7b1b      	ldrb	r3, [r3, #12]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fc1e 	bl	8006d2a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	7b5b      	ldrb	r3, [r3, #13]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	7b5b      	ldrb	r3, [r3, #13]
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fbe3 	bl	8006cce <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	7b5b      	ldrb	r3, [r3, #13]
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fc0b 	bl	8006d2a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4618      	mov	r0, r3
 8005530:	f001 ff74 	bl	800741c <free>
    phost->pActiveClass->pData = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005550:	2302      	movs	r3, #2
 8005552:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3340      	adds	r3, #64	; 0x40
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8b2 	bl	80056ce <GetLineCoding>
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800557a:	2102      	movs	r1, #2
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
  }
  return status;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d877      	bhi.n	80056a0 <USBH_CDC_Process+0x114>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <USBH_CDC_Process+0x2c>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055d3 	.word	0x080055d3
 80055c0:	08005603 	.word	0x08005603
 80055c4:	08005677 	.word	0x08005677
 80055c8:	08005685 	.word	0x08005685
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
    break;
 80055d0:	e06d      	b.n	80056ae <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f897 	bl	800570c <SetLineCoding>
 80055de:	4603      	mov	r3, r0
 80055e0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80055f0:	e058      	b.n	80056a4 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80055f2:	7bbb      	ldrb	r3, [r7, #14]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d055      	beq.n	80056a4 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2204      	movs	r2, #4
 80055fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005600:	e050      	b.n	80056a4 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3340      	adds	r3, #64	; 0x40
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f860 	bl	80056ce <GetLineCoding>
 800560e:	4603      	mov	r3, r0
 8005610:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d126      	bne.n	8005666 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	791b      	ldrb	r3, [r3, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d13b      	bne.n	80056a8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800563c:	429a      	cmp	r2, r3
 800563e:	d133      	bne.n	80056a8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800564c:	429a      	cmp	r2, r3
 800564e:	d12b      	bne.n	80056a8 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005658:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800565a:	429a      	cmp	r2, r3
 800565c:	d124      	bne.n	80056a8 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f95a 	bl	8005918 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005664:	e020      	b.n	80056a8 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d01d      	beq.n	80056a8 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2204      	movs	r2, #4
 8005670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005674:	e018      	b.n	80056a8 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f867 	bl	800574a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8dc 	bl	800583a <CDC_ProcessReception>
    break;
 8005682:	e014      	b.n	80056ae <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005684:	2100      	movs	r1, #0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fece 	bl	8006428 <USBH_ClrFeature>
 800568c:	4603      	mov	r3, r0
 800568e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800569e:	e005      	b.n	80056ac <USBH_CDC_Process+0x120>

  default:
    break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <USBH_CDC_Process+0x122>
    break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <USBH_CDC_Process+0x122>
    break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <USBH_CDC_Process+0x122>
    break;
 80056ac:	bf00      	nop

  }

  return status;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	22a1      	movs	r2, #161	; 0xa1
 80056dc:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2207      	movs	r2, #7
 80056f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2207      	movs	r2, #7
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 f873 	bl	80067e8 <USBH_CtlReq>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2221      	movs	r2, #33	; 0x21
 800571a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2207      	movs	r2, #7
 8005732:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2207      	movs	r2, #7
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 f854 	bl	80067e8 <USBH_CtlReq>
 8005740:	4603      	mov	r3, r0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af02      	add	r7, sp, #8
 8005750:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800575c:	2300      	movs	r3, #0
 800575e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005766:	2b01      	cmp	r3, #1
 8005768:	d002      	beq.n	8005770 <CDC_ProcessTransmission+0x26>
 800576a:	2b02      	cmp	r3, #2
 800576c:	d025      	beq.n	80057ba <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800576e:	e060      	b.n	8005832 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	8b12      	ldrh	r2, [r2, #24]
 8005778:	4293      	cmp	r3, r2
 800577a:	d90c      	bls.n	8005796 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8b1a      	ldrh	r2, [r3, #24]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	7b58      	ldrb	r0, [r3, #13]
 8005788:	2301      	movs	r3, #1
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4603      	mov	r3, r0
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fa3b 	bl	8006c0a <USBH_BulkSendData>
 8005794:	e00c      	b.n	80057b0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	7b58      	ldrb	r0, [r3, #13]
 80057a4:	2301      	movs	r3, #1
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 fa2d 	bl	8006c0a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80057b8:	e03b      	b.n	8005832 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	7b5b      	ldrb	r3, [r3, #13]
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fd49 	bl	8007258 <USBH_LL_GetURBState>
 80057c6:	4603      	mov	r3, r0
 80057c8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d128      	bne.n	8005822 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	8b12      	ldrh	r2, [r2, #24]
 80057d8:	4293      	cmp	r3, r2
 80057da:	d90e      	bls.n	80057fa <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	8b12      	ldrh	r2, [r2, #24]
 80057e4:	1a9a      	subs	r2, r3, r2
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	8b12      	ldrh	r2, [r2, #24]
 80057f2:	441a      	add	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]
 80057f8:	e002      	b.n	8005800 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005810:	e00e      	b.n	8005830 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f868 	bl	80058f0 <USBH_CDC_TransmitCallback>
    break;
 8005820:	e006      	b.n	8005830 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d103      	bne.n	8005830 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005830:	bf00      	nop
  }
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800584c:	2300      	movs	r3, #0
 800584e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005856:	2b03      	cmp	r3, #3
 8005858:	d002      	beq.n	8005860 <CDC_ProcessReception+0x26>
 800585a:	2b04      	cmp	r3, #4
 800585c:	d00e      	beq.n	800587c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800585e:	e043      	b.n	80058e8 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	6a19      	ldr	r1, [r3, #32]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	8b5a      	ldrh	r2, [r3, #26]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 f9f1 	bl	8006c54 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2204      	movs	r2, #4
 8005876:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800587a:	e035      	b.n	80058e8 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	7b1b      	ldrb	r3, [r3, #12]
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fce8 	bl	8007258 <USBH_LL_GetURBState>
 8005888:	4603      	mov	r3, r0
 800588a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d129      	bne.n	80058e6 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	7b1b      	ldrb	r3, [r3, #12]
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fc4b 	bl	8007134 <USBH_LL_GetLastXferSize>
 800589e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d016      	beq.n	80058d8 <CDC_ProcessReception+0x9e>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	8b5b      	ldrh	r3, [r3, #26]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d910      	bls.n	80058d8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad2      	subs	r2, r2, r3
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	441a      	add	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2203      	movs	r2, #3
 80058d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80058d6:	e006      	b.n	80058e6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f80f 	bl	8005904 <USBH_CDC_ReceiveCallback>
    break;
 80058e6:	bf00      	nop
  }
}
 80058e8:	bf00      	nop
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005940:	2302      	movs	r3, #2
 8005942:	e019      	b.n	8005978 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	79fa      	ldrb	r2, [r7, #7]
 8005948:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f80f 	bl	8005980 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f001 fb2d 	bl	8006fd0 <USBH_LL_Init>

  return USBH_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800598c:	e008      	b.n	80059a0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	32e0      	adds	r2, #224	; 0xe0
 8005994:	2100      	movs	r1, #0
 8005996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b0e      	cmp	r3, #14
 80059a4:	d9f3      	bls.n	800598e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e009      	b.n	80059c0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3301      	adds	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c6:	d3f1      	bcc.n	80059ac <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2240      	movs	r2, #64	; 0x40
 80059ec:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a36:	1c59      	adds	r1, r3, #1
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	33dc      	adds	r3, #220	; 0xdc
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e004      	b.n	8005a5a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a50:	2302      	movs	r3, #2
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e001      	b.n	8005a5a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a56:	2302      	movs	r3, #2
 8005a58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d204      	bcs.n	8005a8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005a8c:	e001      	b.n	8005a92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	70fb      	strb	r3, [r7, #3]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70bb      	strb	r3, [r7, #2]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005ac8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aca:	e025      	b.n	8005b18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	221a      	movs	r2, #26
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3302      	adds	r3, #2
 8005adc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	795b      	ldrb	r3, [r3, #5]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d002      	beq.n	8005aee <USBH_FindInterface+0x4e>
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	2bff      	cmp	r3, #255	; 0xff
 8005aec:	d111      	bne.n	8005b12 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005af2:	78ba      	ldrb	r2, [r7, #2]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d002      	beq.n	8005afe <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005af8:	78bb      	ldrb	r3, [r7, #2]
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d109      	bne.n	8005b12 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b02:	787a      	ldrb	r2, [r7, #1]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d002      	beq.n	8005b0e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b08:	787b      	ldrb	r3, [r7, #1]
 8005b0a:	2bff      	cmp	r3, #255	; 0xff
 8005b0c:	d101      	bne.n	8005b12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	e006      	b.n	8005b20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	3301      	adds	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d9d6      	bls.n	8005acc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b1e:	23ff      	movs	r3, #255	; 0xff
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fa87 	bl	8007048 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 fb9e 	bl	800727e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b54:	2302      	movs	r3, #2
 8005b56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 faec 	bl	800613a <USBH_IsPortEnabled>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10c      	bne.n	8005b82 <USBH_Process+0x36>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d002      	beq.n	8005b82 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b0b      	cmp	r3, #11
 8005b8a:	f200 814c 	bhi.w	8005e26 <USBH_Process+0x2da>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <USBH_Process+0x48>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bc5 	.word	0x08005bc5
 8005b98:	08005be7 	.word	0x08005be7
 8005b9c:	08005bfb 	.word	0x08005bfb
 8005ba0:	08005e01 	.word	0x08005e01
 8005ba4:	08005e27 	.word	0x08005e27
 8005ba8:	08005c89 	.word	0x08005c89
 8005bac:	08005db7 	.word	0x08005db7
 8005bb0:	08005cb9 	.word	0x08005cb9
 8005bb4:	08005cd9 	.word	0x08005cd9
 8005bb8:	08005cf9 	.word	0x08005cf9
 8005bbc:	08005d27 	.word	0x08005d27
 8005bc0:	08005de9 	.word	0x08005de9
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 812c 	beq.w	8005e2a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005bd8:	20c8      	movs	r0, #200	; 0xc8
 8005bda:	f001 fb9a 	bl	8007312 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fa8d 	bl	80070fe <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005be4:	e121      	b.n	8005e2a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 811e 	bne.w	8005e2e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005bf8:	e119      	b.n	8005e2e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005bfa:	2064      	movs	r0, #100	; 0x64
 8005bfc:	f001 fb89 	bl	8007312 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fa57 	bl	80070b4 <USBH_LL_GetSpeed>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2205      	movs	r2, #5
 8005c14:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005c16:	2100      	movs	r1, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f868 	bl	8006cee <USBH_AllocPipe>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f860 	bl	8006cee <USBH_AllocPipe>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	7919      	ldrb	r1, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c4a:	b292      	uxth	r2, r2
 8005c4c:	9202      	str	r2, [sp, #8]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	9201      	str	r2, [sp, #4]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4603      	mov	r3, r0
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f819 	bl	8006c90 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7959      	ldrb	r1, [r3, #5]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005c72:	b292      	uxth	r2, r2
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f805 	bl	8006c90 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005c86:	e0e3      	b.n	8005e50 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8e7 	bl	8005e5c <USBH_HandleEnum>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 80ce 	bne.w	8005e32 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d103      	bne.n	8005cb0 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2208      	movs	r2, #8
 8005cac:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005cae:	e0c0      	b.n	8005e32 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2207      	movs	r2, #7
 8005cb4:	701a      	strb	r2, [r3, #0]
    break;
 8005cb6:	e0bc      	b.n	8005e32 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80b9 	beq.w	8005e36 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cca:	2101      	movs	r1, #1
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005cd6:	e0ae      	b.n	8005e36 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fb59 	bl	800639a <USBH_SetCfg>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 80a5 	bne.w	8005e3a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2209      	movs	r2, #9
 8005cf4:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005cf6:	e0a0      	b.n	8005e3a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d06:	2101      	movs	r1, #1
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fb69 	bl	80063e0 <USBH_SetFeature>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 8094 	bne.w	8005e3e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	220a      	movs	r2, #10
 8005d1a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d1c:	e08f      	b.n	8005e3e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	220a      	movs	r2, #10
 8005d22:	701a      	strb	r2, [r3, #0]
    break;
 8005d24:	e08b      	b.n	8005e3e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8088 	beq.w	8005e42 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
 8005d3e:	e017      	b.n	8005d70 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	33dc      	adds	r3, #220	; 0xdc
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	791a      	ldrb	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d108      	bne.n	8005d6a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	33dc      	adds	r3, #220	; 0xdc
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0e4      	beq.n	8005d40 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2206      	movs	r2, #6
 8005d96:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d9e:	2103      	movs	r1, #3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005da4:	e04d      	b.n	8005e42 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	220d      	movs	r2, #13
 8005daa:	701a      	strb	r2, [r3, #0]
    break;
 8005dac:	e049      	b.n	8005e42 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	220d      	movs	r2, #13
 8005db2:	701a      	strb	r2, [r3, #0]
    break;
 8005db4:	e045      	b.n	8005e42 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d136      	bne.n	8005e46 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220b      	movs	r2, #11
 8005ddc:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005dde:	e032      	b.n	8005e46 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	220d      	movs	r2, #13
 8005de4:	701a      	strb	r2, [r3, #0]
    break;
 8005de6:	e02e      	b.n	8005e46 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02b      	beq.n	8005e4a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
    }
    break;
 8005dfe:	e024      	b.n	8005e4a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fdbd 	bl	8005980 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01e      	beq.n	8005e4e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005e24:	e013      	b.n	8005e4e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8005e26:	bf00      	nop
 8005e28:	e012      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e2a:	bf00      	nop
 8005e2c:	e010      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e2e:	bf00      	nop
 8005e30:	e00e      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e32:	bf00      	nop
 8005e34:	e00c      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e36:	bf00      	nop
 8005e38:	e00a      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e3a:	bf00      	nop
 8005e3c:	e008      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e3e:	bf00      	nop
 8005e40:	e006      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e42:	bf00      	nop
 8005e44:	e004      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e46:	bf00      	nop
 8005e48:	e002      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <USBH_Process+0x304>
    break;
 8005e4e:	bf00      	nop
  }
 return USBH_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop

08005e5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af04      	add	r7, sp, #16
 8005e62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b07      	cmp	r3, #7
 8005e6e:	f200 80f8 	bhi.w	8006062 <USBH_HandleEnum+0x206>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <USBH_HandleEnum+0x1c>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005f0b 	.word	0x08005f0b
 8005e80:	08005f23 	.word	0x08005f23
 8005e84:	08005f99 	.word	0x08005f99
 8005e88:	08005faf 	.word	0x08005faf
 8005e8c:	08005fcb 	.word	0x08005fcb
 8005e90:	08005fff 	.word	0x08005fff
 8005e94:	08006033 	.word	0x08006033
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005e98:	2108      	movs	r1, #8
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9ad 	bl	80061fa <USBH_Get_DevDesc>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 80df 	bne.w	8006066 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7919      	ldrb	r1, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	9201      	str	r2, [sp, #4]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fed8 	bl	8006c90 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7959      	ldrb	r1, [r3, #5]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005ef4:	b292      	uxth	r2, r2
 8005ef6:	9202      	str	r2, [sp, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	9201      	str	r2, [sp, #4]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4603      	mov	r3, r0
 8005f00:	2200      	movs	r2, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fec4 	bl	8006c90 <USBH_OpenPipe>

    }
    break;
 8005f08:	e0ad      	b.n	8006066 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f974 	bl	80061fa <USBH_Get_DevDesc>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 80a8 	bne.w	800606a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8005f20:	e0a3      	b.n	800606a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fa14 	bl	8006352 <USBH_SetAddress>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 809e 	bne.w	800606e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8005f32:	2002      	movs	r0, #2
 8005f34:	f001 f9ed 	bl	8007312 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2203      	movs	r2, #3
 8005f44:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	7919      	ldrb	r1, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	9202      	str	r2, [sp, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	9201      	str	r2, [sp, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	4603      	mov	r3, r0
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fe91 	bl	8006c90 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7959      	ldrb	r1, [r3, #5]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005f82:	b292      	uxth	r2, r2
 8005f84:	9202      	str	r2, [sp, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2200      	movs	r2, #0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fe7d 	bl	8006c90 <USBH_OpenPipe>
    }
    break;
 8005f96:	e06a      	b.n	800606e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8005f98:	2109      	movs	r1, #9
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f955 	bl	800624a <USBH_Get_CfgDesc>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d165      	bne.n	8006072 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005fac:	e061      	b.n	8006072 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f947 	bl	800624a <USBH_Get_CfgDesc>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d159      	bne.n	8006076 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2205      	movs	r2, #5
 8005fc6:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005fc8:	e055      	b.n	8006076 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8005fe0:	23ff      	movs	r3, #255	; 0xff
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f955 	bl	8006292 <USBH_Get_StringDesc>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d145      	bne.n	800607a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2206      	movs	r2, #6
 8005ff2:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ff4:	e041      	b.n	800607a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2206      	movs	r2, #6
 8005ffa:	705a      	strb	r2, [r3, #1]
    break;
 8005ffc:	e03d      	b.n	800607a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006004:	2b00      	cmp	r3, #0
 8006006:	d010      	beq.n	800602a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006014:	23ff      	movs	r3, #255	; 0xff
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f93b 	bl	8006292 <USBH_Get_StringDesc>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d12d      	bne.n	800607e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2207      	movs	r2, #7
 8006026:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006028:	e029      	b.n	800607e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2207      	movs	r2, #7
 800602e:	705a      	strb	r2, [r3, #1]
    break;
 8006030:	e025      	b.n	800607e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00f      	beq.n	800605c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006048:	23ff      	movs	r3, #255	; 0xff
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f921 	bl	8006292 <USBH_Get_StringDesc>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d115      	bne.n	8006082 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800605a:	e012      	b.n	8006082 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
    break;
 8006060:	e00f      	b.n	8006082 <USBH_HandleEnum+0x226>

  default:
    break;
 8006062:	bf00      	nop
 8006064:	e00e      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 8006066:	bf00      	nop
 8006068:	e00c      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 800606a:	bf00      	nop
 800606c:	e00a      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 800606e:	bf00      	nop
 8006070:	e008      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 8006072:	bf00      	nop
 8006074:	e006      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <USBH_HandleEnum+0x228>
    break;
 8006082:	bf00      	nop
  }
  return Status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f804 	bl	80060d2 <USBH_HandleSof>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b0b      	cmp	r3, #11
 80060e2:	d10a      	bne.n	80060fa <USBH_HandleSof+0x28>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
  }
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006112:	bf00      	nop
}
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800612e:	bf00      	nop
}
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800617e:	2104      	movs	r1, #4
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
 8006184:	e007      	b.n	8006196 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800618c:	2b01      	cmp	r3, #1
 800618e:	d102      	bne.n	8006196 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 ff68 	bl	800707e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fdb8 	bl	8006d2a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	795b      	ldrb	r3, [r3, #5]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fdb2 	bl	8006d2a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061de:	2105      	movs	r1, #5
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 ff2f 	bl	8007048 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2203      	movs	r2, #3
 80061ee:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af02      	add	r7, sp, #8
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	b29b      	uxth	r3, r3
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f864 	bl	80062e8 <USBH_GetDescriptor>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	b292      	uxth	r2, r2
 800623a:	4619      	mov	r1, r3
 800623c:	f000 f918 	bl	8006470 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af02      	add	r7, sp, #8
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	331c      	adds	r3, #28
 800625a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006266:	2100      	movs	r1, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f83d 	bl	80062e8 <USBH_GetDescriptor>
 800626e:	4603      	mov	r3, r0
 8006270:	72fb      	strb	r3, [r7, #11]
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	68f9      	ldr	r1, [r7, #12]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f964 	bl	8006550 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006288:	7afb      	ldrb	r3, [r7, #11]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b088      	sub	sp, #32
 8006296:	af02      	add	r7, sp, #8
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	461a      	mov	r2, r3
 800629e:	460b      	mov	r3, r1
 80062a0:	72fb      	strb	r3, [r7, #11]
 80062a2:	4613      	mov	r3, r2
 80062a4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062ae:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80062b6:	893b      	ldrh	r3, [r7, #8]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	460b      	mov	r3, r1
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f812 	bl	80062e8 <USBH_GetDescriptor>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062d4:	893a      	ldrh	r2, [r7, #8]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fa37 	bl	800674c <USBH_ParseStringDesc>
  }
  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	72fb      	strb	r3, [r7, #11]
 80062f6:	4613      	mov	r3, r2
 80062f8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	789b      	ldrb	r3, [r3, #2]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d11c      	bne.n	800633c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006308:	b2da      	uxtb	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2206      	movs	r2, #6
 8006312:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	893a      	ldrh	r2, [r7, #8]
 8006318:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800631a:	893b      	ldrh	r3, [r7, #8]
 800631c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006324:	d104      	bne.n	8006330 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f240 4209 	movw	r2, #1033	; 0x409
 800632c:	829a      	strh	r2, [r3, #20]
 800632e:	e002      	b.n	8006336 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8b3a      	ldrh	r2, [r7, #24]
 800633a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800633c:	8b3b      	ldrh	r3, [r7, #24]
 800633e:	461a      	mov	r2, r3
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fa50 	bl	80067e8 <USBH_CtlReq>
 8006348:	4603      	mov	r3, r0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	789b      	ldrb	r3, [r3, #2]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d10f      	bne.n	8006386 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2205      	movs	r2, #5
 8006370:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa2c 	bl	80067e8 <USBH_CtlReq>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	789b      	ldrb	r3, [r3, #2]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d10e      	bne.n	80063cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2209      	movs	r2, #9
 80063b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	887a      	ldrh	r2, [r7, #2]
 80063be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fa09 	bl	80067e8 <USBH_CtlReq>
 80063d6:	4603      	mov	r3, r0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	789b      	ldrb	r3, [r3, #2]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10f      	bne.n	8006414 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2203      	movs	r2, #3
 80063fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f9e5 	bl	80067e8 <USBH_CtlReq>
 800641e:	4603      	mov	r3, r0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	789b      	ldrb	r3, [r3, #2]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10f      	bne.n	800645c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800645c:	2200      	movs	r2, #0
 800645e:	2100      	movs	r1, #0
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9c1 	bl	80067e8 <USBH_CtlReq>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	785a      	ldrb	r2, [r3, #1]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3302      	adds	r3, #2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3303      	adds	r3, #3
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	791a      	ldrb	r2, [r3, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	795a      	ldrb	r2, [r3, #5]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	799a      	ldrb	r2, [r3, #6]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	79da      	ldrb	r2, [r3, #7]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d939      	bls.n	8006544 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	3308      	adds	r3, #8
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3309      	adds	r3, #9
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	330a      	adds	r3, #10
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	330b      	adds	r3, #11
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	330c      	adds	r3, #12
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	330d      	adds	r3, #13
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	b29b      	uxth	r3, r3
 800651c:	4313      	orrs	r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	7b9a      	ldrb	r2, [r3, #14]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	7bda      	ldrb	r2, [r3, #15]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	7c1a      	ldrb	r2, [r3, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	7c5a      	ldrb	r2, [r3, #17]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	745a      	strb	r2, [r3, #17]
  }
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	785a      	ldrb	r2, [r3, #1]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3302      	adds	r3, #2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	3303      	adds	r3, #3
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	b29b      	uxth	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	791a      	ldrb	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	795a      	ldrb	r2, [r3, #5]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	799a      	ldrb	r2, [r3, #6]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	79da      	ldrb	r2, [r3, #7]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7a1a      	ldrb	r2, [r3, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d95f      	bls.n	800668c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80065cc:	2309      	movs	r3, #9
 80065ce:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80065d4:	e051      	b.n	800667a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80065d6:	f107 0316 	add.w	r3, r7, #22
 80065da:	4619      	mov	r1, r3
 80065dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065de:	f000 f8e8 	bl	80067b2 <USBH_GetNextDesc>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d146      	bne.n	800667a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80065ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065f0:	221a      	movs	r2, #26
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	3308      	adds	r3, #8
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	3302      	adds	r3, #2
 80065fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006602:	69f8      	ldr	r0, [r7, #28]
 8006604:	f000 f846 	bl	8006694 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006612:	e022      	b.n	800665a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006614:	f107 0316 	add.w	r3, r7, #22
 8006618:	4619      	mov	r1, r3
 800661a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800661c:	f000 f8c9 	bl	80067b2 <USBH_GetNextDesc>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d117      	bne.n	800665a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800662a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800662e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006632:	3201      	adds	r2, #1
 8006634:	00d2      	lsls	r2, r2, #3
 8006636:	211a      	movs	r1, #26
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	4413      	add	r3, r2
 800663e:	3308      	adds	r3, #8
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	3304      	adds	r3, #4
 8006646:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800664a:	69b8      	ldr	r0, [r7, #24]
 800664c:	f000 f851 	bl	80066f2 <USBH_ParseEPDesc>
            ep_ix++;
 8006650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006654:	3301      	adds	r3, #1
 8006656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006662:	429a      	cmp	r2, r3
 8006664:	d204      	bcs.n	8006670 <USBH_ParseCfgDesc+0x120>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	885a      	ldrh	r2, [r3, #2]
 800666a:	8afb      	ldrh	r3, [r7, #22]
 800666c:	429a      	cmp	r2, r3
 800666e:	d8d1      	bhi.n	8006614 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006674:	3301      	adds	r3, #1
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800667a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800667e:	2b01      	cmp	r3, #1
 8006680:	d804      	bhi.n	800668c <USBH_ParseCfgDesc+0x13c>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	885a      	ldrh	r2, [r3, #2]
 8006686:	8afb      	ldrh	r3, [r7, #22]
 8006688:	429a      	cmp	r2, r3
 800668a:	d8a4      	bhi.n	80065d6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800668c:	bf00      	nop
 800668e:	3728      	adds	r7, #40	; 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	785a      	ldrb	r2, [r3, #1]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	789a      	ldrb	r2, [r3, #2]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	78da      	ldrb	r2, [r3, #3]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	791a      	ldrb	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	795a      	ldrb	r2, [r3, #5]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	799a      	ldrb	r2, [r3, #6]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	79da      	ldrb	r2, [r3, #7]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	7a1a      	ldrb	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	721a      	strb	r2, [r3, #8]
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	785a      	ldrb	r2, [r3, #1]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	789a      	ldrb	r2, [r3, #2]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	78da      	ldrb	r2, [r3, #3]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3304      	adds	r3, #4
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b29a      	uxth	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3305      	adds	r3, #5
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	b29b      	uxth	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	799a      	ldrb	r2, [r3, #6]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	719a      	strb	r2, [r3, #6]
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d120      	bne.n	80067a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	1e9a      	subs	r2, r3, #2
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	4293      	cmp	r3, r2
 800676e:	bf28      	it	cs
 8006770:	4613      	movcs	r3, r2
 8006772:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3302      	adds	r3, #2
 8006778:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800677a:	2300      	movs	r3, #0
 800677c:	82fb      	strh	r3, [r7, #22]
 800677e:	e00b      	b.n	8006798 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006780:	8afb      	ldrh	r3, [r7, #22]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3301      	adds	r3, #1
 8006790:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006792:	8afb      	ldrh	r3, [r7, #22]
 8006794:	3302      	adds	r3, #2
 8006796:	82fb      	strh	r3, [r7, #22]
 8006798:	8afa      	ldrh	r2, [r7, #22]
 800679a:	8abb      	ldrh	r3, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d3ef      	bcc.n	8006780 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  }
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80067da:	68fb      	ldr	r3, [r7, #12]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	789b      	ldrb	r3, [r3, #2]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d002      	beq.n	8006808 <USBH_CtlReq+0x20>
 8006802:	2b02      	cmp	r3, #2
 8006804:	d00f      	beq.n	8006826 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006806:	e034      	b.n	8006872 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2202      	movs	r2, #2
 800681e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
    break;
 8006824:	e025      	b.n	8006872 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f828 	bl	800687c <USBH_HandleControl>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]
    break;
 8006846:	e013      	b.n	8006870 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d108      	bne.n	8006860 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800685a:	2303      	movs	r3, #3
 800685c:	75fb      	strb	r3, [r7, #23]
    break;
 800685e:	e007      	b.n	8006870 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d104      	bne.n	8006870 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800686c:	2302      	movs	r3, #2
 800686e:	75fb      	strb	r3, [r7, #23]
    break;
 8006870:	bf00      	nop
  }
  return status;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006888:	2300      	movs	r3, #0
 800688a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7e1b      	ldrb	r3, [r3, #24]
 8006890:	3b01      	subs	r3, #1
 8006892:	2b0a      	cmp	r3, #10
 8006894:	f200 814c 	bhi.w	8006b30 <USBH_HandleControl+0x2b4>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <USBH_HandleControl+0x24>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	080068e7 	.word	0x080068e7
 80068a8:	08006951 	.word	0x08006951
 80068ac:	08006977 	.word	0x08006977
 80068b0:	080069af 	.word	0x080069af
 80068b4:	080069db 	.word	0x080069db
 80068b8:	08006a2d 	.word	0x08006a2d
 80068bc:	08006a4f 	.word	0x08006a4f
 80068c0:	08006a8b 	.word	0x08006a8b
 80068c4:	08006ab3 	.word	0x08006ab3
 80068c8:	08006af1 	.word	0x08006af1
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0110 	add.w	r1, r3, #16
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	795b      	ldrb	r3, [r3, #5]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f939 	bl	8006b50 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	761a      	strb	r2, [r3, #24]
    break;
 80068e4:	e12f      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	795b      	ldrb	r3, [r3, #5]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fcb3 	bl	8007258 <USBH_LL_GetURBState>
 80068f2:	4603      	mov	r3, r0
 80068f4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d11e      	bne.n	800693a <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7c1b      	ldrb	r3, [r3, #16]
 8006900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006904:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8adb      	ldrh	r3, [r3, #22]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800690e:	7b7b      	ldrb	r3, [r7, #13]
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d103      	bne.n	800691c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2203      	movs	r2, #3
 8006918:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800691a:	e10b      	b.n	8006b34 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2205      	movs	r2, #5
 8006920:	761a      	strb	r2, [r3, #24]
    break;
 8006922:	e107      	b.n	8006b34 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006924:	7b7b      	ldrb	r3, [r7, #13]
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d103      	bne.n	8006932 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2209      	movs	r2, #9
 800692e:	761a      	strb	r2, [r3, #24]
    break;
 8006930:	e100      	b.n	8006b34 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2207      	movs	r2, #7
 8006936:	761a      	strb	r2, [r3, #24]
    break;
 8006938:	e0fc      	b.n	8006b34 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d003      	beq.n	8006948 <USBH_HandleControl+0xcc>
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	2b02      	cmp	r3, #2
 8006944:	f040 80f6 	bne.w	8006b34 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	220b      	movs	r2, #11
 800694c:	761a      	strb	r2, [r3, #24]
    break;
 800694e:	e0f1      	b.n	8006b34 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6899      	ldr	r1, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	899a      	ldrh	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	791b      	ldrb	r3, [r3, #4]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f930 	bl	8006bce <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2204      	movs	r2, #4
 8006972:	761a      	strb	r2, [r3, #24]
    break;
 8006974:	e0e7      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc6b 	bl	8007258 <USBH_LL_GetURBState>
 8006982:	4603      	mov	r3, r0
 8006984:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2209      	movs	r2, #9
 8006990:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	2b05      	cmp	r3, #5
 8006996:	d102      	bne.n	800699e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006998:	2303      	movs	r3, #3
 800699a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800699c:	e0cc      	b.n	8006b38 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	f040 80c9 	bne.w	8006b38 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	220b      	movs	r2, #11
 80069aa:	761a      	strb	r2, [r3, #24]
    break;
 80069ac:	e0c4      	b.n	8006b38 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	899a      	ldrh	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7958      	ldrb	r0, [r3, #5]
 80069ba:	2301      	movs	r3, #1
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4603      	mov	r3, r0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8df 	bl	8006b84 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2206      	movs	r2, #6
 80069d6:	761a      	strb	r2, [r3, #24]
    break;
 80069d8:	e0b5      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	795b      	ldrb	r3, [r3, #5]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fc39 	bl	8007258 <USBH_LL_GetURBState>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d103      	bne.n	80069f8 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2207      	movs	r2, #7
 80069f4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069f6:	e0a1      	b.n	8006b3c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d105      	bne.n	8006a0a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220c      	movs	r2, #12
 8006a02:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006a04:	2303      	movs	r3, #3
 8006a06:	73fb      	strb	r3, [r7, #15]
    break;
 8006a08:	e098      	b.n	8006b3c <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d103      	bne.n	8006a18 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2205      	movs	r2, #5
 8006a14:	761a      	strb	r2, [r3, #24]
    break;
 8006a16:	e091      	b.n	8006b3c <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	f040 808e 	bne.w	8006b3c <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	220b      	movs	r2, #11
 8006a24:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006a26:	2302      	movs	r3, #2
 8006a28:	73fb      	strb	r3, [r7, #15]
    break;
 8006a2a:	e087      	b.n	8006b3c <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8ca 	bl	8006bce <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	761a      	strb	r2, [r3, #24]

    break;
 8006a4c:	e07b      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	791b      	ldrb	r3, [r3, #4]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fbff 	bl	8007258 <USBH_LL_GetURBState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	220d      	movs	r2, #13
 8006a68:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a6e:	e067      	b.n	8006b40 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d103      	bne.n	8006a7e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	220b      	movs	r2, #11
 8006a7a:	761a      	strb	r2, [r3, #24]
    break;
 8006a7c:	e060      	b.n	8006b40 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d15d      	bne.n	8006b40 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006a84:	2303      	movs	r3, #3
 8006a86:	73fb      	strb	r3, [r7, #15]
    break;
 8006a88:	e05a      	b.n	8006b40 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	795a      	ldrb	r2, [r3, #5]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f873 	bl	8006b84 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	220a      	movs	r2, #10
 8006aae:	761a      	strb	r2, [r3, #24]
    break;
 8006ab0:	e049      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	795b      	ldrb	r3, [r3, #5]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fbcd 	bl	8007258 <USBH_LL_GetURBState>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	220d      	movs	r2, #13
 8006ad0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006ad2:	e037      	b.n	8006b44 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d103      	bne.n	8006ae2 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2209      	movs	r2, #9
 8006ade:	761a      	strb	r2, [r3, #24]
    break;
 8006ae0:	e030      	b.n	8006b44 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d12d      	bne.n	8006b44 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	220b      	movs	r2, #11
 8006aec:	761a      	strb	r2, [r3, #24]
    break;
 8006aee:	e029      	b.n	8006b44 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7e5b      	ldrb	r3, [r3, #25]
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	765a      	strb	r2, [r3, #25]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7e5b      	ldrb	r3, [r3, #25]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d809      	bhi.n	8006b18 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 faba 	bl	800707e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006b16:	e016      	b.n	8006b46 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b1e:	2106      	movs	r1, #6
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b2e:	e00a      	b.n	8006b46 <USBH_HandleControl+0x2ca>

  default:
    break;
 8006b30:	bf00      	nop
 8006b32:	e008      	b.n	8006b46 <USBH_HandleControl+0x2ca>
    break;
 8006b34:	bf00      	nop
 8006b36:	e006      	b.n	8006b46 <USBH_HandleControl+0x2ca>
    break;
 8006b38:	bf00      	nop
 8006b3a:	e004      	b.n	8006b46 <USBH_HandleControl+0x2ca>
    break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <USBH_HandleControl+0x2ca>
    break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <USBH_HandleControl+0x2ca>
    break;
 8006b44:	bf00      	nop
  }
  return status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af04      	add	r7, sp, #16
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006b5e:	79f9      	ldrb	r1, [r7, #7]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9303      	str	r3, [sp, #12]
 8006b64:	2308      	movs	r3, #8
 8006b66:	9302      	str	r3, [sp, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fb3e 	bl	80071f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af04      	add	r7, sp, #16
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	460b      	mov	r3, r1
 8006b94:	80fb      	strh	r3, [r7, #6]
 8006b96:	4613      	mov	r3, r2
 8006b98:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ba8:	7979      	ldrb	r1, [r7, #5]
 8006baa:	7e3b      	ldrb	r3, [r7, #24]
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fb19 	bl	80071f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b088      	sub	sp, #32
 8006bd2:	af04      	add	r7, sp, #16
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	460b      	mov	r3, r1
 8006bde:	80fb      	strh	r3, [r7, #6]
 8006be0:	4613      	mov	r3, r2
 8006be2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006be4:	7979      	ldrb	r1, [r7, #5]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9303      	str	r3, [sp, #12]
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	9302      	str	r3, [sp, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fafb 	bl	80071f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c00:	2300      	movs	r3, #0

}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af04      	add	r7, sp, #16
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	4611      	mov	r1, r2
 8006c16:	461a      	mov	r2, r3
 8006c18:	460b      	mov	r3, r1
 8006c1a:	80fb      	strh	r3, [r7, #6]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c2e:	7979      	ldrb	r1, [r7, #5]
 8006c30:	7e3b      	ldrb	r3, [r7, #24]
 8006c32:	9303      	str	r3, [sp, #12]
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	9302      	str	r3, [sp, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2302      	movs	r3, #2
 8006c42:	2200      	movs	r2, #0
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fad6 	bl	80071f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af04      	add	r7, sp, #16
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	460b      	mov	r3, r1
 8006c64:	80fb      	strh	r3, [r7, #6]
 8006c66:	4613      	mov	r3, r2
 8006c68:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c6a:	7979      	ldrb	r1, [r7, #5]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9303      	str	r3, [sp, #12]
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	9302      	str	r3, [sp, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	2301      	movs	r3, #1
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	2201      	movs	r2, #1
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fab8 	bl	80071f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af04      	add	r7, sp, #16
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	70fb      	strb	r3, [r7, #3]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70bb      	strb	r3, [r7, #2]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006caa:	7878      	ldrb	r0, [r7, #1]
 8006cac:	78ba      	ldrb	r2, [r7, #2]
 8006cae:	78f9      	ldrb	r1, [r7, #3]
 8006cb0:	8b3b      	ldrh	r3, [r7, #24]
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	7d3b      	ldrb	r3, [r7, #20]
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	7c3b      	ldrb	r3, [r7, #16]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa4b 	bl	800715a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0

}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa6a 	bl	80071b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006ce4:	2300      	movs	r3, #0

}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f831 	bl	8006d62 <USBH_GetFreePipe>
 8006d00:	4603      	mov	r3, r0
 8006d02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d04:	89fb      	ldrh	r3, [r7, #14]
 8006d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d007      	beq.n	8006d1e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	89fa      	ldrh	r2, [r7, #14]
 8006d12:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32e0      	adds	r2, #224	; 0xe0
 8006d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
 8006d20:	b2db      	uxtb	r3, r3
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	2b0a      	cmp	r3, #10
 8006d3a:	d80b      	bhi.n	8006d54 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32e0      	adds	r2, #224	; 0xe0
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	32e0      	adds	r2, #224	; 0xe0
 8006d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e00e      	b.n	8006d92 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006d74:	7bfa      	ldrb	r2, [r7, #15]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32e0      	adds	r2, #224	; 0xe0
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	e007      	b.n	8006d9c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b0a      	cmp	r3, #10
 8006d96:	d9ed      	bls.n	8006d74 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006dac:	2201      	movs	r2, #1
 8006dae:	490e      	ldr	r1, [pc, #56]	; (8006de8 <MX_USB_HOST_Init+0x40>)
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <MX_USB_HOST_Init+0x44>)
 8006db2:	f7fe fdbb 	bl	800592c <USBH_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006dbc:	f7f9 fdac 	bl	8000918 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006dc0:	490b      	ldr	r1, [pc, #44]	; (8006df0 <MX_USB_HOST_Init+0x48>)
 8006dc2:	480a      	ldr	r0, [pc, #40]	; (8006dec <MX_USB_HOST_Init+0x44>)
 8006dc4:	f7fe fe25 	bl	8005a12 <USBH_RegisterClass>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006dce:	f7f9 fda3 	bl	8000918 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006dd2:	4806      	ldr	r0, [pc, #24]	; (8006dec <MX_USB_HOST_Init+0x44>)
 8006dd4:	f7fe feaa 	bl	8005b2c <USBH_Start>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006dde:	f7f9 fd9b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	200001b8 	.word	0x200001b8
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006df8:	4802      	ldr	r0, [pc, #8]	; (8006e04 <MX_USB_HOST_Process+0x10>)
 8006dfa:	f7fe fea7 	bl	8005b4c <USBH_Process>
}
 8006dfe:	bf00      	nop
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200001b8 	.word	0x200001b8

08006e08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d819      	bhi.n	8006e50 <USBH_UserProcess+0x48>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBH_UserProcess+0x1c>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e41 	.word	0x08006e41
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e49 	.word	0x08006e49
 8006e34:	08006e39 	.word	0x08006e39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006e38:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <USBH_UserProcess+0x58>)
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	701a      	strb	r2, [r3, #0]
  break;
 8006e3e:	e008      	b.n	8006e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <USBH_UserProcess+0x58>)
 8006e42:	2202      	movs	r2, #2
 8006e44:	701a      	strb	r2, [r3, #0]
  break;
 8006e46:	e004      	b.n	8006e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <USBH_UserProcess+0x58>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
  break;
 8006e4e:	e000      	b.n	8006e52 <USBH_UserProcess+0x4a>

  default:
  break;
 8006e50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	200000b4 	.word	0x200000b4

08006e64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e6c:	f107 0314 	add.w	r3, r7, #20
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e84:	d147      	bne.n	8006f16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e86:	2300      	movs	r3, #0
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	6313      	str	r3, [r2, #48]	; 0x30
 8006e96:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006eb0:	f107 0314 	add.w	r3, r7, #20
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	481b      	ldr	r0, [pc, #108]	; (8006f24 <HAL_HCD_MspInit+0xc0>)
 8006eb8:	f7fa f8c0 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ece:	230a      	movs	r3, #10
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed2:	f107 0314 	add.w	r3, r7, #20
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4812      	ldr	r0, [pc, #72]	; (8006f24 <HAL_HCD_MspInit+0xc0>)
 8006eda:	f7fa f8af 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee2:	4a0f      	ldr	r2, [pc, #60]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee8:	6353      	str	r3, [r2, #52]	; 0x34
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_HCD_MspInit+0xbc>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	2043      	movs	r0, #67	; 0x43
 8006f0c:	f7fa f85f 	bl	8000fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f10:	2043      	movs	r0, #67	; 0x43
 8006f12:	f7fa f878 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f16:	bf00      	nop
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40020000 	.word	0x40020000

08006f28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff f8b9 	bl	80060ae <USBH_LL_IncTimer>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff f8fe 	bl	8006154 <USBH_LL_Connect>
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff f916 	bl	80061a0 <USBH_LL_Disconnect>
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff f8ab 	bl	8006102 <USBH_LL_PortEnabled>
} 
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff f8ab 	bl	800611e <USBH_LL_PortDisabled>
} 
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d12a      	bne.n	8007038 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <USBH_LL_Init+0x74>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <USBH_LL_Init+0x74>)
 8006fee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <USBH_LL_Init+0x74>)
 8006ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ff8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006ffa:	4b12      	ldr	r3, [pc, #72]	; (8007044 <USBH_LL_Init+0x74>)
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <USBH_LL_Init+0x74>)
 8007002:	2201      	movs	r2, #1
 8007004:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <USBH_LL_Init+0x74>)
 8007008:	2200      	movs	r2, #0
 800700a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <USBH_LL_Init+0x74>)
 800700e:	2202      	movs	r2, #2
 8007010:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <USBH_LL_Init+0x74>)
 8007014:	2200      	movs	r2, #0
 8007016:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007018:	480a      	ldr	r0, [pc, #40]	; (8007044 <USBH_LL_Init+0x74>)
 800701a:	f7fa f9c2 	bl	80013a2 <HAL_HCD_Init>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007024:	f7f9 fc78 	bl	8000918 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007028:	4806      	ldr	r0, [pc, #24]	; (8007044 <USBH_LL_Init+0x74>)
 800702a:	f7fa fdbd 	bl	8001ba8 <HAL_HCD_GetCurrentFrame>
 800702e:	4603      	mov	r3, r0
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff f82c 	bl	8006090 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000584 	.word	0x20000584

08007048 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800705e:	4618      	mov	r0, r3
 8007060:	f7fa fd2a 	bl	8001ab8 <HAL_HCD_Start>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f95c 	bl	8007328 <USBH_Get_USB_Status>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007094:	4618      	mov	r0, r3
 8007096:	f7fa fd32 	bl	8001afe <HAL_HCD_Stop>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f941 	bl	8007328 <USBH_Get_USB_Status>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fa fd7c 	bl	8001bc4 <HAL_HCD_GetCurrentSpeed>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d007      	beq.n	80070e2 <USBH_LL_GetSpeed+0x2e>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d302      	bcc.n	80070dc <USBH_LL_GetSpeed+0x28>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d006      	beq.n	80070e8 <USBH_LL_GetSpeed+0x34>
 80070da:	e008      	b.n	80070ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
    break;
 80070e0:	e008      	b.n	80070f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
    break;
 80070e6:	e005      	b.n	80070f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80070e8:	2302      	movs	r3, #2
 80070ea:	73fb      	strb	r3, [r7, #15]
    break;
 80070ec:	e002      	b.n	80070f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80070ee:	2301      	movs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
    break;
 80070f2:	bf00      	nop
  }
  return  speed;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007114:	4618      	mov	r0, r3
 8007116:	f7fa fd0f 	bl	8001b38 <HAL_HCD_ResetPort>
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f901 	bl	8007328 <USBH_Get_USB_Status>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800712a:	7bbb      	ldrb	r3, [r7, #14]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f7fa fd17 	bl	8001b7e <HAL_HCD_HC_GetXferCount>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800715a:	b590      	push	{r4, r7, lr}
 800715c:	b089      	sub	sp, #36	; 0x24
 800715e:	af04      	add	r7, sp, #16
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	461a      	mov	r2, r3
 8007168:	4603      	mov	r3, r0
 800716a:	70fb      	strb	r3, [r7, #3]
 800716c:	460b      	mov	r3, r1
 800716e:	70bb      	strb	r3, [r7, #2]
 8007170:	4613      	mov	r3, r2
 8007172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007182:	787c      	ldrb	r4, [r7, #1]
 8007184:	78ba      	ldrb	r2, [r7, #2]
 8007186:	78f9      	ldrb	r1, [r7, #3]
 8007188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800718a:	9302      	str	r3, [sp, #8]
 800718c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4623      	mov	r3, r4
 800719a:	f7fa f964 	bl	8001466 <HAL_HCD_HC_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f8bf 	bl	8007328 <USBH_Get_USB_Status>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fa f9dd 	bl	8001596 <HAL_HCD_HC_Halt>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f8a0 	bl	8007328 <USBH_Get_USB_Status>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80071f6:	b590      	push	{r4, r7, lr}
 80071f8:	b089      	sub	sp, #36	; 0x24
 80071fa:	af04      	add	r7, sp, #16
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	461a      	mov	r2, r3
 8007204:	4603      	mov	r3, r0
 8007206:	70fb      	strb	r3, [r7, #3]
 8007208:	460b      	mov	r3, r1
 800720a:	70bb      	strb	r3, [r7, #2]
 800720c:	4613      	mov	r3, r2
 800720e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800721e:	787c      	ldrb	r4, [r7, #1]
 8007220:	78ba      	ldrb	r2, [r7, #2]
 8007222:	78f9      	ldrb	r1, [r7, #3]
 8007224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4623      	mov	r3, r4
 800723a:	f7fa f9cf 	bl	80015dc <HAL_HCD_HC_SubmitRequest>
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 f86f 	bl	8007328 <USBH_Get_USB_Status>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800724e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fa fc70 	bl	8001b54 <HAL_HCD_HC_GetURBState>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007290:	2b01      	cmp	r3, #1
 8007292:	d103      	bne.n	800729c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f872 	bl	8007380 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800729c:	20c8      	movs	r0, #200	; 0xc8
 800729e:	f7f9 fd99 	bl	8000dd4 <HAL_Delay>
  return USBH_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
 80072b8:	4613      	mov	r3, r2
 80072ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	440b      	add	r3, r1
 80072d2:	333b      	adds	r3, #59	; 0x3b
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	68f9      	ldr	r1, [r7, #12]
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	3350      	adds	r3, #80	; 0x50
 80072ea:	78ba      	ldrb	r2, [r7, #2]
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e009      	b.n	8007304 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3351      	adds	r3, #81	; 0x51
 8007300:	78ba      	ldrb	r2, [r7, #2]
 8007302:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7f9 fd5a 	bl	8000dd4 <HAL_Delay>
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d817      	bhi.n	800736c <USBH_Get_USB_Status+0x44>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <USBH_Get_USB_Status+0x1c>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007355 	.word	0x08007355
 8007348:	0800735b 	.word	0x0800735b
 800734c:	08007361 	.word	0x08007361
 8007350:	08007367 	.word	0x08007367
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
    break;
 8007358:	e00b      	b.n	8007372 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800735a:	2302      	movs	r3, #2
 800735c:	73fb      	strb	r3, [r7, #15]
    break;
 800735e:	e008      	b.n	8007372 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e005      	b.n	8007372 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007366:	2302      	movs	r3, #2
 8007368:	73fb      	strb	r3, [r7, #15]
    break;
 800736a:	e002      	b.n	8007372 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800736c:	2302      	movs	r3, #2
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	bf00      	nop
  }
  return usb_status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e001      	b.n	800739e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	461a      	mov	r2, r3
 80073a2:	2101      	movs	r1, #1
 80073a4:	4803      	ldr	r0, [pc, #12]	; (80073b4 <MX_DriverVbusFS+0x34>)
 80073a6:	f7f9 ffe3 	bl	8001370 <HAL_GPIO_WritePin>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40020800 	.word	0x40020800

080073b8 <__errno>:
 80073b8:	4b01      	ldr	r3, [pc, #4]	; (80073c0 <__errno+0x8>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	2000002c 	.word	0x2000002c

080073c4 <__libc_init_array>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	4e0d      	ldr	r6, [pc, #52]	; (80073fc <__libc_init_array+0x38>)
 80073c8:	4c0d      	ldr	r4, [pc, #52]	; (8007400 <__libc_init_array+0x3c>)
 80073ca:	1ba4      	subs	r4, r4, r6
 80073cc:	10a4      	asrs	r4, r4, #2
 80073ce:	2500      	movs	r5, #0
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	d109      	bne.n	80073e8 <__libc_init_array+0x24>
 80073d4:	4e0b      	ldr	r6, [pc, #44]	; (8007404 <__libc_init_array+0x40>)
 80073d6:	4c0c      	ldr	r4, [pc, #48]	; (8007408 <__libc_init_array+0x44>)
 80073d8:	f000 f8ea 	bl	80075b0 <_init>
 80073dc:	1ba4      	subs	r4, r4, r6
 80073de:	10a4      	asrs	r4, r4, #2
 80073e0:	2500      	movs	r5, #0
 80073e2:	42a5      	cmp	r5, r4
 80073e4:	d105      	bne.n	80073f2 <__libc_init_array+0x2e>
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073ec:	4798      	blx	r3
 80073ee:	3501      	adds	r5, #1
 80073f0:	e7ee      	b.n	80073d0 <__libc_init_array+0xc>
 80073f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f6:	4798      	blx	r3
 80073f8:	3501      	adds	r5, #1
 80073fa:	e7f2      	b.n	80073e2 <__libc_init_array+0x1e>
 80073fc:	080075ec 	.word	0x080075ec
 8007400:	080075ec 	.word	0x080075ec
 8007404:	080075ec 	.word	0x080075ec
 8007408:	080075f0 	.word	0x080075f0

0800740c <malloc>:
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <malloc+0xc>)
 800740e:	4601      	mov	r1, r0
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	f000 b861 	b.w	80074d8 <_malloc_r>
 8007416:	bf00      	nop
 8007418:	2000002c 	.word	0x2000002c

0800741c <free>:
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <free+0xc>)
 800741e:	4601      	mov	r1, r0
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f000 b80b 	b.w	800743c <_free_r>
 8007426:	bf00      	nop
 8007428:	2000002c 	.word	0x2000002c

0800742c <memset>:
 800742c:	4402      	add	r2, r0
 800742e:	4603      	mov	r3, r0
 8007430:	4293      	cmp	r3, r2
 8007432:	d100      	bne.n	8007436 <memset+0xa>
 8007434:	4770      	bx	lr
 8007436:	f803 1b01 	strb.w	r1, [r3], #1
 800743a:	e7f9      	b.n	8007430 <memset+0x4>

0800743c <_free_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4605      	mov	r5, r0
 8007440:	2900      	cmp	r1, #0
 8007442:	d045      	beq.n	80074d0 <_free_r+0x94>
 8007444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007448:	1f0c      	subs	r4, r1, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfb8      	it	lt
 800744e:	18e4      	addlt	r4, r4, r3
 8007450:	f000 f8ac 	bl	80075ac <__malloc_lock>
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <_free_r+0x98>)
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	4610      	mov	r0, r2
 800745a:	b933      	cbnz	r3, 800746a <_free_r+0x2e>
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	6014      	str	r4, [r2, #0]
 8007460:	4628      	mov	r0, r5
 8007462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007466:	f000 b8a2 	b.w	80075ae <__malloc_unlock>
 800746a:	42a3      	cmp	r3, r4
 800746c:	d90c      	bls.n	8007488 <_free_r+0x4c>
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	1862      	adds	r2, r4, r1
 8007472:	4293      	cmp	r3, r2
 8007474:	bf04      	itt	eq
 8007476:	681a      	ldreq	r2, [r3, #0]
 8007478:	685b      	ldreq	r3, [r3, #4]
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	bf04      	itt	eq
 800747e:	1852      	addeq	r2, r2, r1
 8007480:	6022      	streq	r2, [r4, #0]
 8007482:	6004      	str	r4, [r0, #0]
 8007484:	e7ec      	b.n	8007460 <_free_r+0x24>
 8007486:	4613      	mov	r3, r2
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	b10a      	cbz	r2, 8007490 <_free_r+0x54>
 800748c:	42a2      	cmp	r2, r4
 800748e:	d9fa      	bls.n	8007486 <_free_r+0x4a>
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	1858      	adds	r0, r3, r1
 8007494:	42a0      	cmp	r0, r4
 8007496:	d10b      	bne.n	80074b0 <_free_r+0x74>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	4401      	add	r1, r0
 800749c:	1858      	adds	r0, r3, r1
 800749e:	4282      	cmp	r2, r0
 80074a0:	6019      	str	r1, [r3, #0]
 80074a2:	d1dd      	bne.n	8007460 <_free_r+0x24>
 80074a4:	6810      	ldr	r0, [r2, #0]
 80074a6:	6852      	ldr	r2, [r2, #4]
 80074a8:	605a      	str	r2, [r3, #4]
 80074aa:	4401      	add	r1, r0
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	e7d7      	b.n	8007460 <_free_r+0x24>
 80074b0:	d902      	bls.n	80074b8 <_free_r+0x7c>
 80074b2:	230c      	movs	r3, #12
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	e7d3      	b.n	8007460 <_free_r+0x24>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428a      	cmp	r2, r1
 80074be:	bf04      	itt	eq
 80074c0:	6811      	ldreq	r1, [r2, #0]
 80074c2:	6852      	ldreq	r2, [r2, #4]
 80074c4:	6062      	str	r2, [r4, #4]
 80074c6:	bf04      	itt	eq
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	605c      	str	r4, [r3, #4]
 80074ce:	e7c7      	b.n	8007460 <_free_r+0x24>
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	200000b8 	.word	0x200000b8

080074d8 <_malloc_r>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	1ccd      	adds	r5, r1, #3
 80074dc:	f025 0503 	bic.w	r5, r5, #3
 80074e0:	3508      	adds	r5, #8
 80074e2:	2d0c      	cmp	r5, #12
 80074e4:	bf38      	it	cc
 80074e6:	250c      	movcc	r5, #12
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	4606      	mov	r6, r0
 80074ec:	db01      	blt.n	80074f2 <_malloc_r+0x1a>
 80074ee:	42a9      	cmp	r1, r5
 80074f0:	d903      	bls.n	80074fa <_malloc_r+0x22>
 80074f2:	230c      	movs	r3, #12
 80074f4:	6033      	str	r3, [r6, #0]
 80074f6:	2000      	movs	r0, #0
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
 80074fa:	f000 f857 	bl	80075ac <__malloc_lock>
 80074fe:	4a21      	ldr	r2, [pc, #132]	; (8007584 <_malloc_r+0xac>)
 8007500:	6814      	ldr	r4, [r2, #0]
 8007502:	4621      	mov	r1, r4
 8007504:	b991      	cbnz	r1, 800752c <_malloc_r+0x54>
 8007506:	4c20      	ldr	r4, [pc, #128]	; (8007588 <_malloc_r+0xb0>)
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	b91b      	cbnz	r3, 8007514 <_malloc_r+0x3c>
 800750c:	4630      	mov	r0, r6
 800750e:	f000 f83d 	bl	800758c <_sbrk_r>
 8007512:	6020      	str	r0, [r4, #0]
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f838 	bl	800758c <_sbrk_r>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d124      	bne.n	800756a <_malloc_r+0x92>
 8007520:	230c      	movs	r3, #12
 8007522:	6033      	str	r3, [r6, #0]
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f842 	bl	80075ae <__malloc_unlock>
 800752a:	e7e4      	b.n	80074f6 <_malloc_r+0x1e>
 800752c:	680b      	ldr	r3, [r1, #0]
 800752e:	1b5b      	subs	r3, r3, r5
 8007530:	d418      	bmi.n	8007564 <_malloc_r+0x8c>
 8007532:	2b0b      	cmp	r3, #11
 8007534:	d90f      	bls.n	8007556 <_malloc_r+0x7e>
 8007536:	600b      	str	r3, [r1, #0]
 8007538:	50cd      	str	r5, [r1, r3]
 800753a:	18cc      	adds	r4, r1, r3
 800753c:	4630      	mov	r0, r6
 800753e:	f000 f836 	bl	80075ae <__malloc_unlock>
 8007542:	f104 000b 	add.w	r0, r4, #11
 8007546:	1d23      	adds	r3, r4, #4
 8007548:	f020 0007 	bic.w	r0, r0, #7
 800754c:	1ac3      	subs	r3, r0, r3
 800754e:	d0d3      	beq.n	80074f8 <_malloc_r+0x20>
 8007550:	425a      	negs	r2, r3
 8007552:	50e2      	str	r2, [r4, r3]
 8007554:	e7d0      	b.n	80074f8 <_malloc_r+0x20>
 8007556:	428c      	cmp	r4, r1
 8007558:	684b      	ldr	r3, [r1, #4]
 800755a:	bf16      	itet	ne
 800755c:	6063      	strne	r3, [r4, #4]
 800755e:	6013      	streq	r3, [r2, #0]
 8007560:	460c      	movne	r4, r1
 8007562:	e7eb      	b.n	800753c <_malloc_r+0x64>
 8007564:	460c      	mov	r4, r1
 8007566:	6849      	ldr	r1, [r1, #4]
 8007568:	e7cc      	b.n	8007504 <_malloc_r+0x2c>
 800756a:	1cc4      	adds	r4, r0, #3
 800756c:	f024 0403 	bic.w	r4, r4, #3
 8007570:	42a0      	cmp	r0, r4
 8007572:	d005      	beq.n	8007580 <_malloc_r+0xa8>
 8007574:	1a21      	subs	r1, r4, r0
 8007576:	4630      	mov	r0, r6
 8007578:	f000 f808 	bl	800758c <_sbrk_r>
 800757c:	3001      	adds	r0, #1
 800757e:	d0cf      	beq.n	8007520 <_malloc_r+0x48>
 8007580:	6025      	str	r5, [r4, #0]
 8007582:	e7db      	b.n	800753c <_malloc_r+0x64>
 8007584:	200000b8 	.word	0x200000b8
 8007588:	200000bc 	.word	0x200000bc

0800758c <_sbrk_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4c06      	ldr	r4, [pc, #24]	; (80075a8 <_sbrk_r+0x1c>)
 8007590:	2300      	movs	r3, #0
 8007592:	4605      	mov	r5, r0
 8007594:	4608      	mov	r0, r1
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	f7f9 fb1e 	bl	8000bd8 <_sbrk>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_sbrk_r+0x1a>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_sbrk_r+0x1a>
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000848 	.word	0x20000848

080075ac <__malloc_lock>:
 80075ac:	4770      	bx	lr

080075ae <__malloc_unlock>:
 80075ae:	4770      	bx	lr

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
