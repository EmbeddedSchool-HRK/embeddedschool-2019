
Lesson-1-Romanchuk-Vitaliy-HeartBeat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076fc  080076fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007704  08007704  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  0800779c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800779c  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c03  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000351e  00000000  00000000  00037cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  0003b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023760  00000000  00000000  0003d280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010dc6  00000000  00000000  000609e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca097  00000000  00000000  000717a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b83d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  0013b8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076c8 	.word	0x080076c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080076c8 	.word	0x080076c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc9c 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f89a 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9ae 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f918 	bl	800070c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f944 	bl	8000768 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f972 	bl	80007c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fcec 	bl	8006ec0 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f006 fd10 	bl	8006f0c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
  five_minutes_func(5500, 5000);
 80004ec:	f241 3188 	movw	r1, #5000	; 0x1388
 80004f0:	f241 507c 	movw	r0, #5500	; 0x157c
 80004f4:	f000 f808 	bl	8000508 <five_minutes_func>
  while (1) {
   cross_leds_blinking (1500, 750);
 80004f8:	f240 21ee 	movw	r1, #750	; 0x2ee
 80004fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000500:	f000 f822 	bl	8000548 <cross_leds_blinking>
 8000504:	e7f8      	b.n	80004f8 <main+0x30>
	...

08000508 <five_minutes_func>:
  }
}
  /* USER CODE END 3 */
}
void five_minutes_func(uint32_t period, uint32_t dutycycle) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
HAL_GPIO_WritePin(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15), GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <five_minutes_func+0x3c>)
 800051a:	f000 ffb5 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(dutycycle);
 800051e:	6838      	ldr	r0, [r7, #0]
 8000520:	f000 fce4 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, (GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15), GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <five_minutes_func+0x3c>)
 800052c:	f000 ffac 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(period - dutycycle);
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fcd8 	bl	8000eec <HAL_Delay>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020c00 	.word	0x40020c00

08000548 <cross_leds_blinking>:
void cross_leds_blinking (uint32_t period, uint32_t dutycycle) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	482a      	ldr	r0, [pc, #168]	; (8000604 <cross_leds_blinking+0xbc>)
 800055a:	f000 ff95 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(period - dutycycle);
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fcc1 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4824      	ldr	r0, [pc, #144]	; (8000604 <cross_leds_blinking+0xbc>)
 8000572:	f000 ff89 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(dutycycle);
 8000576:	6838      	ldr	r0, [r7, #0]
 8000578:	f000 fcb8 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <cross_leds_blinking+0xbc>)
 8000584:	f000 ff80 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(period - dutycycle);
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fcac 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	481a      	ldr	r0, [pc, #104]	; (8000604 <cross_leds_blinking+0xbc>)
 800059c:	f000 ff74 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(dutycycle);
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f000 fca3 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <cross_leds_blinking+0xbc>)
 80005ae:	f000 ff6b 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(period - dutycycle);
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fc97 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <cross_leds_blinking+0xbc>)
 80005c6:	f000 ff5f 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(dutycycle);
 80005ca:	6838      	ldr	r0, [r7, #0]
 80005cc:	f000 fc8e 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <cross_leds_blinking+0xbc>)
 80005d8:	f000 ff56 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(period - dutycycle);
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc82 	bl	8000eec <HAL_Delay>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <cross_leds_blinking+0xbc>)
 80005f0:	f000 ff4a 	bl	8001488 <HAL_GPIO_WritePin>
HAL_Delay(dutycycle);
 80005f4:	6838      	ldr	r0, [r7, #0]
 80005f6:	f000 fc79 	bl	8000eec <HAL_Delay>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020c00 	.word	0x40020c00

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b098      	sub	sp, #96	; 0x60
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 ff94 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <SystemClock_Config+0xfc>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <SystemClock_Config+0xfc>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <SystemClock_Config+0xfc>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <SystemClock_Config+0x100>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a2a      	ldr	r2, [pc, #168]	; (8000708 <SystemClock_Config+0x100>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0x100>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000672:	2301      	movs	r3, #1
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000686:	2308      	movs	r3, #8
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069c:	4618      	mov	r0, r3
 800069e:	f003 f93b 	bl	8003918 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a8:	f000 f9c2 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fb66 	bl	8003d9c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006d6:	f000 f9ab 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fd30 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006f6:	f000 f99b 	bl	8000a30 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3760      	adds	r7, #96	; 0x60
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f002 fb1d 	bl	8002d88 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f96c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000c0 	.word	0x200000c0
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_I2S3_Init+0x54>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MX_I2S3_Init+0x58>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2S3_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_I2S3_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_I2S3_Init+0x54>)
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <MX_I2S3_Init+0x5c>)
 8000792:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_I2S3_Init+0x54>)
 80007a8:	f002 fc16 	bl	8002fd8 <HAL_I2S_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007b2:	f000 f93d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000016c 	.word	0x2000016c
 80007c0:	40003c00 	.word	0x40003c00
 80007c4:	00017700 	.word	0x00017700

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_SPI1_Init+0x64>)
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <MX_SPI1_Init+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_SPI1_Init+0x64>)
 8000814:	220a      	movs	r2, #10
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_SPI1_Init+0x64>)
 800081a:	f003 fdd7 	bl	80043cc <HAL_SPI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 f904 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000114 	.word	0x20000114
 8000830:	40013000 	.word	0x40013000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b71      	ldr	r3, [pc, #452]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a70      	ldr	r2, [pc, #448]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b6e      	ldr	r3, [pc, #440]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a69      	ldr	r2, [pc, #420]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b63      	ldr	r3, [pc, #396]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a62      	ldr	r2, [pc, #392]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b5c      	ldr	r3, [pc, #368]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a5b      	ldr	r2, [pc, #364]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b59      	ldr	r3, [pc, #356]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b4e      	ldr	r3, [pc, #312]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4d      	ldr	r2, [pc, #308]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <MX_GPIO_Init+0x1e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4848      	ldr	r0, [pc, #288]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008f8:	f000 fdc6 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	4846      	ldr	r0, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fdc1 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000906:	2200      	movs	r2, #0
 8000908:	f24f 0110 	movw	r1, #61456	; 0xf010
 800090c:	4844      	ldr	r0, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 800090e:	f000 fdbb 	bl	8001488 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	483b      	ldr	r0, [pc, #236]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 800092a:	f000 fc13 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4835      	ldr	r0, [pc, #212]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 8000946:	f000 fc05 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800094a:	2308      	movs	r3, #8
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	482d      	ldr	r0, [pc, #180]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 8000966:	f000 fbf5 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x1f0>)
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482a      	ldr	r0, [pc, #168]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 800097e:	f000 fbe9 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000982:	2304      	movs	r3, #4
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 8000996:	f000 fbdd 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ac:	2305      	movs	r3, #5
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481d      	ldr	r0, [pc, #116]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 80009b8:	f000 fbcc 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 80009d6:	f000 fbbd 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009da:	2320      	movs	r3, #32
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 80009ee:	f000 fbb1 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x1f0>)
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000a06:	f000 fba5 	bl	8001154 <HAL_GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	10120000 	.word	0x10120000
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ace:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <HAL_I2C_MspInit+0x8c>)
 8000aec:	f000 fb32 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <HAL_I2S_MspInit+0xc0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d14a      	bne.n	8000bd8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <HAL_I2S_MspInit+0xc8>)
 8000bb2:	f000 facf 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_I2S_MspInit+0xcc>)
 8000bd4:	f000 fabe 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40003c00 	.word	0x40003c00
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020800 	.word	0x40020800

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fa75 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f8ea 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <OTG_FS_IRQHandler+0x10>)
 8000ce2:	f000 fe6f 	bl	80019c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000584 	.word	0x20000584

08000cf0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x50>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x16>
		heap_end = &end;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <_sbrk+0x50>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <_sbrk+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <_sbrk+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <_sbrk+0x50>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	466a      	mov	r2, sp
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d907      	bls.n	8000d2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d1a:	f006 fbd9 	bl	80074d0 <__errno>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	230c      	movs	r3, #12
 8000d22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	e006      	b.n	8000d38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_sbrk+0x50>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <_sbrk+0x50>)
 8000d34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	20000850 	.word	0x20000850

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SystemInit+0x60>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <SystemInit+0x60>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <SystemInit+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <SystemInit+0x64>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SystemInit+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <SystemInit+0x64>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SystemInit+0x64>)
 8000d74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <SystemInit+0x64>)
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <SystemInit+0x68>)
 8000d82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <SystemInit+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <SystemInit+0x64>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SystemInit+0x60>)
 8000d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	24003010 	.word	0x24003010

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffb3 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f006 fb7b 	bl	80074dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fb6f 	bl	80004c8 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df0:	0800770c 	.word	0x0800770c
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000dfc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e00:	2000084c 	.word	0x2000084c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe00 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f965 	bl	800113a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92d 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001b4 	.word	0x200001b4

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001b4 	.word	0x200001b4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e16b      	b.n	8001448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 815a 	bne.w	8001442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x4a>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b12      	cmp	r3, #18
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	69b9      	ldr	r1, [r7, #24]
 80011e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0203 	and.w	r2, r3, #3
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0xe6>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80b4 	beq.w	8001442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_GPIO_Init+0x308>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_GPIO_Init+0x308>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_GPIO_Init+0x308>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a5a      	ldr	r2, [pc, #360]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a51      	ldr	r2, [pc, #324]	; (8001464 <HAL_GPIO_Init+0x310>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_GPIO_Init+0x314>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4f      	ldr	r2, [pc, #316]	; (800146c <HAL_GPIO_Init+0x318>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_GPIO_Init+0x31c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_GPIO_Init+0x320>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_GPIO_Init+0x324>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_GPIO_Init+0x328>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_GPIO_Init+0x32c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x20a>
 800135a:	2307      	movs	r3, #7
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x228>
 800135e:	2308      	movs	r3, #8
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x228>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4934      	ldr	r1, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x30c>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_GPIO_Init+0x330>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013be:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_GPIO_Init+0x330>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x330>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_GPIO_Init+0x330>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_GPIO_Init+0x330>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <HAL_GPIO_Init+0x330>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x330>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_GPIO_Init+0x330>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae90 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	; 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014bc:	b08f      	sub	sp, #60	; 0x3c
 80014be:	af0a      	add	r7, sp, #40	; 0x28
 80014c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e054      	b.n	8001576 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f005 fd48 	bl	8006f7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2203      	movs	r2, #3
 80014f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f834 	bl	8004578 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	687e      	ldr	r6, [r7, #4]
 8001518:	466d      	mov	r5, sp
 800151a:	f106 0410 	add.w	r4, r6, #16
 800151e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152a:	e885 0003 	stmia.w	r5, {r0, r1}
 800152e:	1d33      	adds	r3, r6, #4
 8001530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f002 ffae 	bl	8004494 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f82b 	bl	800459a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	687e      	ldr	r6, [r7, #4]
 800154c:	466d      	mov	r5, sp
 800154e:	f106 0410 	add.w	r4, r6, #16
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001562:	1d33      	adds	r3, r6, #4
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f003 f93e 	bl	80047e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800157e:	b590      	push	{r4, r7, lr}
 8001580:	b089      	sub	sp, #36	; 0x24
 8001582:	af04      	add	r7, sp, #16
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	4608      	mov	r0, r1
 8001588:	4611      	mov	r1, r2
 800158a:	461a      	mov	r2, r3
 800158c:	4603      	mov	r3, r0
 800158e:	70fb      	strb	r3, [r7, #3]
 8001590:	460b      	mov	r3, r1
 8001592:	70bb      	strb	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_HCD_HC_Init+0x28>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e07f      	b.n	80016a6 <HAL_HCD_HC_Init+0x128>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	333d      	adds	r3, #61	; 0x3d
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	3338      	adds	r3, #56	; 0x38
 80015d2:	787a      	ldrb	r2, [r7, #1]
 80015d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	3340      	adds	r3, #64	; 0x40
 80015e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	3339      	adds	r3, #57	; 0x39
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	333f      	adds	r3, #63	; 0x3f
 800160e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	78bb      	ldrb	r3, [r7, #2]
 8001618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800161c:	b2d8      	uxtb	r0, r3
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	333a      	adds	r3, #58	; 0x3a
 800162c:	4602      	mov	r2, r0
 800162e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da0a      	bge.n	800164e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	333b      	adds	r3, #59	; 0x3b
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e009      	b.n	8001662 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	333b      	adds	r3, #59	; 0x3b
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	333c      	adds	r3, #60	; 0x3c
 8001672:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001676:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	787c      	ldrb	r4, [r7, #1]
 800167e:	78ba      	ldrb	r2, [r7, #2]
 8001680:	78f9      	ldrb	r1, [r7, #3]
 8001682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f003 fa2a 	bl	8004aec <USB_HC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}

080016ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_HCD_HC_Halt+0x1e>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e00f      	b.n	80016ec <HAL_HCD_HC_Halt+0x3e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fc64 	bl	8004faa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	70fb      	strb	r3, [r7, #3]
 8001706:	460b      	mov	r3, r1
 8001708:	70bb      	strb	r3, [r7, #2]
 800170a:	4613      	mov	r3, r2
 800170c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	333b      	adds	r3, #59	; 0x3b
 800171e:	78ba      	ldrb	r2, [r7, #2]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	333f      	adds	r3, #63	; 0x3f
 8001732:	787a      	ldrb	r2, [r7, #1]
 8001734:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001736:	7c3b      	ldrb	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10a      	bne.n	8001752 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3342      	adds	r3, #66	; 0x42
 800174c:	2203      	movs	r2, #3
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e009      	b.n	8001766 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3342      	adds	r3, #66	; 0x42
 8001762:	2202      	movs	r2, #2
 8001764:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001766:	787b      	ldrb	r3, [r7, #1]
 8001768:	2b03      	cmp	r3, #3
 800176a:	f200 80d6 	bhi.w	800191a <HAL_HCD_HC_SubmitRequest+0x226>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001785 	.word	0x08001785
 8001778:	08001905 	.word	0x08001905
 800177c:	080017f1 	.word	0x080017f1
 8001780:	0800187b 	.word	0x0800187b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001784:	7c3b      	ldrb	r3, [r7, #16]
 8001786:	2b01      	cmp	r3, #1
 8001788:	f040 80c9 	bne.w	800191e <HAL_HCD_HC_SubmitRequest+0x22a>
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80c5 	bne.w	800191e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001794:	8b3b      	ldrh	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3351      	adds	r3, #81	; 0x51
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3351      	adds	r3, #81	; 0x51
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10a      	bne.n	80017da <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3342      	adds	r3, #66	; 0x42
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017d8:	e0a1      	b.n	800191e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e096      	b.n	800191e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d120      	bne.n	8001838 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3351      	adds	r3, #81	; 0x51
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001820:	e07e      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e073      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3350      	adds	r3, #80	; 0x50
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10a      	bne.n	8001864 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
      break;
 8001862:	e05d      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3342      	adds	r3, #66	; 0x42
 8001874:	2202      	movs	r2, #2
 8001876:	701a      	strb	r2, [r3, #0]
      break;
 8001878:	e052      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d120      	bne.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3351      	adds	r3, #81	; 0x51
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018aa:	e039      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3342      	adds	r3, #66	; 0x42
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
      break;
 80018c0:	e02e      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3350      	adds	r3, #80	; 0x50
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3342      	adds	r3, #66	; 0x42
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
      break;
 80018ec:	e018      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
      break;
 8001902:	e00d      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
      break;
 8001918:	e002      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800191a:	bf00      	nop
 800191c:	e000      	b.n	8001920 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800191e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3344      	adds	r3, #68	; 0x44
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	8b39      	ldrh	r1, [r7, #24]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4403      	add	r3, r0
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	335c      	adds	r3, #92	; 0x5c
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	334c      	adds	r3, #76	; 0x4c
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3339      	adds	r3, #57	; 0x39
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	335d      	adds	r3, #93	; 0x5d
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	3338      	adds	r3, #56	; 0x38
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	18d1      	adds	r1, r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	f003 f9a4 	bl	8004d00 <USB_HC_StartXfer>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop

080019c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fec1 	bl	8004762 <USB_GetMode>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f040 80f1 	bne.w	8001bca <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fea5 	bl	800473c <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80e7 	beq.w	8001bc8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fe9c 	bl	800473c <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0e:	d104      	bne.n	8001a1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fe8c 	bl	800473c <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2e:	d104      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fe7c 	bl	800473c <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a4e:	d104      	bne.n	8001a5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fe6c 	bl	800473c <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d103      	bne.n	8001a76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2202      	movs	r2, #2
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fe5e 	bl	800473c <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a8a:	d117      	bne.n	8001abc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 fae9 	bl	8007078 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 ff57 	bl	8004960 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fe3b 	bl	800473c <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d102      	bne.n	8001ad8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f001 f8c8 	bl	8002c68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 fe2d 	bl	800473c <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d106      	bne.n	8001afa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f005 faa7 	bl	8007040 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2208      	movs	r2, #8
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fe1c 	bl	800473c <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b0e:	d138      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fa37 	bl	8004f88 <USB_HC_ReadInterrupt>
 8001b1a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e025      	b.n	8001b6e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d018      	beq.n	8001b68 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4c:	d106      	bne.n	8001b5c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8cf 	bl	8001cf8 <HCD_HC_IN_IRQHandler>
 8001b5a:	e005      	b.n	8001b68 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fc5f 	bl	8002426 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3d4      	bcc.n	8001b22 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fdd8 	bl	800473c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d101      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x1d6>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_HCD_IRQHandler+0x1d8>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d014      	beq.n	8001bca <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0210 	bic.w	r2, r2, #16
 8001bae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 ffad 	bl	8002b10 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0210 	orr.w	r2, r2, #16
 8001bc4:	619a      	str	r2, [r3, #24]
 8001bc6:	e000      	b.n	8001bca <HAL_HCD_IRQHandler+0x206>
      return;
 8001bc8:	bf00      	nop
    }
  }
}
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_HCD_Start+0x16>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e013      	b.n	8001c0e <HAL_HCD_Start+0x3e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fcaf 	bl	8004556 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 ff12 	bl	8004a28 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_HCD_Stop+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e00d      	b.n	8001c48 <HAL_HCD_Stop+0x32>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 faf1 	bl	8005220 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 feb9 	bl	80049d4 <USB_ResetPort>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	335c      	adds	r3, #92	; 0x5c
 8001c88:	781b      	ldrb	r3, [r3, #0]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	334c      	adds	r3, #76	; 0x4c
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fefb 	bl	8004ac8 <USB_GetCurrentFrame>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fed6 	bl	8004a9a <USB_GetHostSpeed>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d119      	bne.n	8001d5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	2304      	movs	r3, #4
 8001d38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	0151      	lsls	r1, r2, #5
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	440a      	add	r2, r1
 8001d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	60d3      	str	r3, [r2, #12]
 8001d5a:	e095      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d109      	bne.n	8001d86 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2320      	movs	r3, #32
 8001d82:	6093      	str	r3, [r2, #8]
 8001d84:	e080      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d134      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	0151      	lsls	r1, r2, #5
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	440a      	add	r2, r1
 8001db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	335d      	adds	r3, #93	; 0x5d
 8001dcc:	2205      	movs	r2, #5
 8001dce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2310      	movs	r3, #16
 8001de0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	2308      	movs	r3, #8
 8001df2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f8d3 	bl	8004faa <USB_HC_Halt>
 8001e04:	e040      	b.n	8001e88 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d134      	bne.n	8001e88 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	0151      	lsls	r1, r2, #5
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	440a      	add	r2, r1
 8001e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f8ae 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	335d      	adds	r3, #93	; 0x5d
 8001e70:	2208      	movs	r2, #8
 8001e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e86:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9e:	d122      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	0151      	lsls	r1, r2, #5
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 f86d 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	461a      	mov	r2, r3
 8001ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ee4:	e29b      	b.n	800241e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	f040 80c1 	bne.w	8002080 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01b      	beq.n	8001f3e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3348      	adds	r3, #72	; 0x48
 8001f16:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f2a:	1ad1      	subs	r1, r2, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4403      	add	r3, r0
 8001f3a:	334c      	adds	r3, #76	; 0x4c
 8001f3c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	335d      	adds	r3, #93	; 0x5d
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3358      	adds	r3, #88	; 0x58
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2301      	movs	r3, #1
 8001f76:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	333f      	adds	r3, #63	; 0x3f
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	333f      	adds	r3, #63	; 0x3f
 8001f9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d121      	bne.n	8001fe8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	0151      	lsls	r1, r2, #5
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	440a      	add	r2, r1
 8001fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 ffeb 	bl	8004faa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	6093      	str	r3, [r2, #8]
 8001fe6:	e034      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333f      	adds	r3, #63	; 0x3f
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d129      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	0151      	lsls	r1, r2, #5
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	440a      	add	r2, r1
 8002014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800201c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	335c      	adds	r3, #92	; 0x5c
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	b2d8      	uxtb	r0, r3
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	335c      	adds	r3, #92	; 0x5c
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4601      	mov	r1, r0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f005 f821 	bl	8007094 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3350      	adds	r3, #80	; 0x50
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2d8      	uxtb	r0, r3
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3350      	adds	r3, #80	; 0x50
 800207a:	4602      	mov	r2, r0
 800207c:	701a      	strb	r2, [r3, #0]
}
 800207e:	e1ce      	b.n	800241e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	f040 80f1 	bne.w	800227a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	0151      	lsls	r1, r2, #5
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	440a      	add	r2, r1
 80020ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b2:	f023 0302 	bic.w	r3, r3, #2
 80020b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	335d      	adds	r3, #93	; 0x5d
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10a      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	335c      	adds	r3, #92	; 0x5c
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	e0b0      	b.n	8002246 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	335d      	adds	r3, #93	; 0x5d
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d10a      	bne.n	8002110 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	335c      	adds	r3, #92	; 0x5c
 800210a:	2205      	movs	r2, #5
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e09a      	b.n	8002246 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	335d      	adds	r3, #93	; 0x5d
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b06      	cmp	r3, #6
 8002124:	d00a      	beq.n	800213c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	335d      	adds	r3, #93	; 0x5d
 8002136:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002138:	2b08      	cmp	r3, #8
 800213a:	d156      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3358      	adds	r3, #88	; 0x58
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4403      	add	r3, r0
 800215e:	3358      	adds	r3, #88	; 0x58
 8002160:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3358      	adds	r3, #88	; 0x58
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d914      	bls.n	80021a2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3358      	adds	r3, #88	; 0x58
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2204      	movs	r2, #4
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e009      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e02d      	b.n	8002246 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	335d      	adds	r3, #93	; 0x5d
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d122      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	335c      	adds	r3, #92	; 0x5c
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800222a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002232:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	2302      	movs	r3, #2
 8002256:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	335c      	adds	r3, #92	; 0x5c
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4601      	mov	r1, r0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f004 ff0e 	bl	8007094 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002278:	e0d1      	b.n	800241e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d13e      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	0151      	lsls	r1, r2, #5
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	440a      	add	r2, r1
 80022a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3358      	adds	r3, #88	; 0x58
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c59      	adds	r1, r3, #1
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4403      	add	r3, r0
 80022d2:	3358      	adds	r3, #88	; 0x58
 80022d4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	335d      	adds	r3, #93	; 0x5d
 80022e6:	2206      	movs	r2, #6
 80022e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fe58 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	6093      	str	r3, [r2, #8]
}
 800230c:	e087      	b.n	800241e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b10      	cmp	r3, #16
 8002322:	d17c      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	333f      	adds	r3, #63	; 0x3f
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d122      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	3358      	adds	r3, #88	; 0x58
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	0151      	lsls	r1, r2, #5
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	440a      	add	r2, r1
 8002364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fe16 	bl	8004faa <USB_HC_Halt>
 800237e:	e045      	b.n	800240c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	333f      	adds	r3, #63	; 0x3f
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	333f      	adds	r3, #63	; 0x3f
 80023a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d12f      	bne.n	800240c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	3358      	adds	r3, #88	; 0x58
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d121      	bne.n	800240c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	335d      	adds	r3, #93	; 0x5d
 80023d8:	2203      	movs	r2, #3
 80023da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	0151      	lsls	r1, r2, #5
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	440a      	add	r2, r1
 80023f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fdcf 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	461a      	mov	r2, r3
 800241a:	2310      	movs	r3, #16
 800241c:	6093      	str	r3, [r2, #8]
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d119      	bne.n	800248a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2304      	movs	r3, #4
 8002466:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	0151      	lsls	r1, r2, #5
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	440a      	add	r2, r1
 800247e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002488:	e33e      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d141      	bne.n	8002524 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2320      	movs	r3, #32
 80024b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	333d      	adds	r3, #61	; 0x3d
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 831f 	bne.w	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	333d      	adds	r3, #61	; 0x3d
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	335c      	adds	r3, #92	; 0x5c
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	0151      	lsls	r1, r2, #5
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	440a      	add	r2, r1
 8002508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fd44 	bl	8004faa <USB_HC_Halt>
}
 8002522:	e2f1      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d13f      	bne.n	80025ba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	335d      	adds	r3, #93	; 0x5d
 800254a:	2204      	movs	r2, #4
 800254c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	333d      	adds	r3, #61	; 0x3d
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	3358      	adds	r3, #88	; 0x58
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	0151      	lsls	r1, r2, #5
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	440a      	add	r2, r1
 800258c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fd02 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	e2a6      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d0:	d122      	bne.n	8002618 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	0151      	lsls	r1, r2, #5
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	440a      	add	r2, r1
 80025e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fcd4 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002614:	6093      	str	r3, [r2, #8]
}
 8002616:	e277      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d135      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3358      	adds	r3, #88	; 0x58
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fc9c 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	335d      	adds	r3, #93	; 0x5d
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
}
 8002698:	e236      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d12b      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2308      	movs	r3, #8
 80026c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fc5c 	bl	8004faa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	335d      	adds	r3, #93	; 0x5d
 8002702:	2205      	movs	r2, #5
 8002704:	701a      	strb	r2, [r3, #0]
}
 8002706:	e1ff      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d155      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	335d      	adds	r3, #93	; 0x5d
 8002742:	2203      	movs	r2, #3
 8002744:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	333d      	adds	r3, #61	; 0x3d
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d114      	bne.n	8002786 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	333c      	adds	r3, #60	; 0x3c
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	333d      	adds	r3, #61	; 0x3d
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	0151      	lsls	r1, r2, #5
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	440a      	add	r2, r1
 800279c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fbfa 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	e19e      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d12b      	bne.n	8002838 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fbcd 	bl	8004faa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335d      	adds	r3, #93	; 0x5d
 8002820:	2206      	movs	r2, #6
 8002822:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	6093      	str	r3, [r2, #8]
}
 8002836:	e167      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d135      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	440a      	add	r2, r1
 8002866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fb95 	bl	8004faa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2310      	movs	r3, #16
 8002890:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	335d      	adds	r3, #93	; 0x5d
 80028b6:	2208      	movs	r2, #8
 80028b8:	701a      	strb	r2, [r3, #0]
}
 80028ba:	e125      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 811a 	bne.w	8002b08 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	0151      	lsls	r1, r2, #5
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	440a      	add	r2, r1
 80028ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ee:	f023 0302 	bic.w	r3, r3, #2
 80028f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	335d      	adds	r3, #93	; 0x5d
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d137      	bne.n	800297a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	335c      	adds	r3, #92	; 0x5c
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d00b      	beq.n	800294c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	333f      	adds	r3, #63	; 0x3f
 8002944:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	f040 80c5 	bne.w	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3351      	adds	r3, #81	; 0x51
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2d8      	uxtb	r0, r3
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	3351      	adds	r3, #81	; 0x51
 8002974:	4602      	mov	r2, r0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e0ad      	b.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	335d      	adds	r3, #93	; 0x5d
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d10a      	bne.n	80029a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	335c      	adds	r3, #92	; 0x5c
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e097      	b.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	335d      	adds	r3, #93	; 0x5d
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d10a      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e081      	b.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	335d      	adds	r3, #93	; 0x5d
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d10a      	bne.n	80029fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	335c      	adds	r3, #92	; 0x5c
 80029f8:	2205      	movs	r2, #5
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e06b      	b.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	335d      	adds	r3, #93	; 0x5d
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	d00a      	beq.n	8002a2a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	335d      	adds	r3, #93	; 0x5d
 8002a24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d155      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3358      	adds	r3, #88	; 0x58
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c59      	adds	r1, r3, #1
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3358      	adds	r3, #88	; 0x58
 8002a4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3358      	adds	r3, #88	; 0x58
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d914      	bls.n	8002a90 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	3358      	adds	r3, #88	; 0x58
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	335c      	adds	r3, #92	; 0x5c
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e009      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	b2d8      	uxtb	r0, r3
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4601      	mov	r1, r0
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f004 fac6 	bl	8007094 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b08:	bf00      	nop
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	0c5b      	lsrs	r3, r3, #17
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b44:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <HCD_RXQLVL_IRQHandler+0x44>
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	f000 8082 	beq.w	8002c56 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b52:	e083      	b.n	8002c5c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d07f      	beq.n	8002c5a <HCD_RXQLVL_IRQHandler+0x14a>
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	3344      	adds	r3, #68	; 0x44
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d074      	beq.n	8002c5a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	3344      	adds	r3, #68	; 0x44
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f001 fdad 	bl	80046ea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3344      	adds	r3, #68	; 0x44
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	18d1      	adds	r1, r2, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4403      	add	r3, r0
 8002bb4:	3344      	adds	r3, #68	; 0x44
 8002bb6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	; 0x4c
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	18d1      	adds	r1, r2, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4403      	add	r3, r0
 8002bdc:	334c      	adds	r3, #76	; 0x4c
 8002bde:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HCD_RXQLVL_IRQHandler+0x154>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d031      	beq.n	8002c5a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c0c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3350      	adds	r3, #80	; 0x50
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	f083 0301 	eor.w	r3, r3, #1
 8002c3e:	b2d8      	uxtb	r0, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3350      	adds	r3, #80	; 0x50
 8002c50:	4602      	mov	r2, r0
 8002c52:	701a      	strb	r2, [r3, #0]
      break;
 8002c54:	e001      	b.n	8002c5a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c5a:	bf00      	nop
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	1ff80000 	.word	0x1ff80000

08002c68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d113      	bne.n	8002cc8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10a      	bne.n	8002cc0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002cb8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 f9ce 	bl	800705c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d147      	bne.n	8002d62 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d129      	bne.n	8002d38 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d113      	bne.n	8002d14 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf6:	d106      	bne.n	8002d06 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fe2e 	bl	8004960 <USB_InitFSLSPClkSel>
 8002d04:	e011      	b.n	8002d2a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fe27 	bl	8004960 <USB_InitFSLSPClkSel>
 8002d12:	e00a      	b.n	8002d2a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d22:	461a      	mov	r2, r3
 8002d24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d28:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f004 f9c0 	bl	80070b0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f004 f993 	bl	800705c <HAL_HCD_Connect_Callback>
 8002d36:	e014      	b.n	8002d62 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f004 f9c7 	bl	80070cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d50:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d60:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d103      	bne.n	8002d74 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f043 0320 	orr.w	r3, r3, #32
 8002d72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e10f      	b.n	8002fba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fe6e 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f001 f9ac 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a7b      	ldr	r2, [pc, #492]	; (8002fc4 <HAL_I2C_Init+0x23c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d807      	bhi.n	8002dec <HAL_I2C_Init+0x64>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a7a      	ldr	r2, [pc, #488]	; (8002fc8 <HAL_I2C_Init+0x240>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e006      	b.n	8002dfa <HAL_I2C_Init+0x72>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_I2C_Init+0x244>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0db      	b.n	8002fba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_I2C_Init+0x248>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a64      	ldr	r2, [pc, #400]	; (8002fc4 <HAL_I2C_Init+0x23c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <HAL_I2C_Init+0xb4>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	e009      	b.n	8002e50 <HAL_I2C_Init+0xc8>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_I2C_Init+0x24c>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	3301      	adds	r3, #1
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4956      	ldr	r1, [pc, #344]	; (8002fc4 <HAL_I2C_Init+0x23c>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d80d      	bhi.n	8002e8c <HAL_I2C_Init+0x104>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e59      	subs	r1, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	bf38      	it	cc
 8002e88:	2304      	movcc	r3, #4
 8002e8a:	e04f      	b.n	8002f2c <HAL_I2C_Init+0x1a4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_I2C_Init+0x130>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	440b      	add	r3, r1
 8002ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e012      	b.n	8002ede <HAL_I2C_Init+0x156>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	0099      	lsls	r1, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Init+0x15e>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e022      	b.n	8002f2c <HAL_I2C_Init+0x1a4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10e      	bne.n	8002f0c <HAL_I2C_Init+0x184>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e58      	subs	r0, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Init+0x1a4>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6911      	ldr	r1, [r2, #16]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	000186a0 	.word	0x000186a0
 8002fc8:	001e847f 	.word	0x001e847f
 8002fcc:	003d08ff 	.word	0x003d08ff
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e128      	b.n	800323c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a90      	ldr	r2, [pc, #576]	; (8003244 <HAL_I2S_Init+0x26c>)
 8003002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd fd8b 	bl	8000b20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003020:	f023 030f 	bic.w	r3, r3, #15
 8003024:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2202      	movs	r2, #2
 800302c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d060      	beq.n	80030f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800303e:	2310      	movs	r3, #16
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e001      	b.n	8003048 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b20      	cmp	r3, #32
 800304e:	d802      	bhi.n	8003056 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003056:	2001      	movs	r0, #1
 8003058:	f001 f95c 	bl	8004314 <HAL_RCCEx_GetPeriphCLKFreq>
 800305c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003066:	d125      	bne.n	80030b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d010      	beq.n	8003092 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	fbb2 f2f3 	udiv	r2, r2, r3
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	3305      	adds	r3, #5
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	e01f      	b.n	80030d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	fbb2 f2f3 	udiv	r2, r2, r3
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	3305      	adds	r3, #5
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e00e      	b.n	80030d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	3305      	adds	r3, #5
 80030d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_I2S_Init+0x270>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	08db      	lsrs	r3, r3, #3
 80030dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	e003      	b.n	8003100 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d902      	bls.n	800310c <HAL_I2S_Init+0x134>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2bff      	cmp	r3, #255	; 0xff
 800310a:	d907      	bls.n	800311c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e08f      	b.n	800323c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	ea42 0103 	orr.w	r1, r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	430a      	orrs	r2, r1
 800312e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6851      	ldr	r1, [r2, #4]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68d2      	ldr	r2, [r2, #12]
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6992      	ldr	r2, [r2, #24]
 8003152:	430a      	orrs	r2, r1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d161      	bne.n	800322c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a38      	ldr	r2, [pc, #224]	; (800324c <HAL_I2S_Init+0x274>)
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a37      	ldr	r2, [pc, #220]	; (8003250 <HAL_I2S_Init+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_I2S_Init+0x1a4>
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_I2S_Init+0x27c>)
 800317a:	e001      	b.n	8003180 <HAL_I2S_Init+0x1a8>
 800317c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4932      	ldr	r1, [pc, #200]	; (8003250 <HAL_I2S_Init+0x278>)
 8003188:	428a      	cmp	r2, r1
 800318a:	d101      	bne.n	8003190 <HAL_I2S_Init+0x1b8>
 800318c:	4a31      	ldr	r2, [pc, #196]	; (8003254 <HAL_I2S_Init+0x27c>)
 800318e:	e001      	b.n	8003194 <HAL_I2S_Init+0x1bc>
 8003190:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003194:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003198:	f023 030f 	bic.w	r3, r3, #15
 800319c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_I2S_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_I2S_Init+0x1d4>
 80031a8:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_I2S_Init+0x27c>)
 80031aa:	e001      	b.n	80031b0 <HAL_I2S_Init+0x1d8>
 80031ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b0:	2202      	movs	r2, #2
 80031b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_I2S_Init+0x278>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_I2S_Init+0x1ea>
 80031be:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_I2S_Init+0x27c>)
 80031c0:	e001      	b.n	80031c6 <HAL_I2S_Init+0x1ee>
 80031c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d2:	d003      	beq.n	80031dc <HAL_I2S_Init+0x204>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e001      	b.n	80031e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	b299      	uxth	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031fe:	4303      	orrs	r3, r0
 8003200:	b29b      	uxth	r3, r3
 8003202:	430b      	orrs	r3, r1
 8003204:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003206:	4313      	orrs	r3, r2
 8003208:	b29a      	uxth	r2, r3
 800320a:	897b      	ldrh	r3, [r7, #10]
 800320c:	4313      	orrs	r3, r2
 800320e:	b29b      	uxth	r3, r3
 8003210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003214:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <HAL_I2S_Init+0x278>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_I2S_Init+0x24c>
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <HAL_I2S_Init+0x27c>)
 8003222:	e001      	b.n	8003228 <HAL_I2S_Init+0x250>
 8003224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003228:	897a      	ldrh	r2, [r7, #10]
 800322a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	0800334f 	.word	0x0800334f
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	08003465 	.word	0x08003465
 8003250:	40003800 	.word	0x40003800
 8003254:	40003400 	.word	0x40003400

08003258 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffb8 	bl	8003258 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	b292      	uxth	r2, r2
 8003304:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10e      	bne.n	8003346 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003336:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff93 	bl	800326c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b04      	cmp	r3, #4
 8003368:	d13a      	bne.n	80033e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d109      	bne.n	8003388 <I2S_IRQHandler+0x3a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	d102      	bne.n	8003388 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffb4 	bl	80032f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d126      	bne.n	80033e0 <I2S_IRQHandler+0x92>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b20      	cmp	r3, #32
 800339e:	d11f      	bne.n	80033e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff50 	bl	8003280 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d136      	bne.n	800345a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d109      	bne.n	800340a <I2S_IRQHandler+0xbc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d102      	bne.n	800340a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff45 	bl	8003294 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d122      	bne.n	800345a <I2S_IRQHandler+0x10c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d11b      	bne.n	800345a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003430:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f043 0204 	orr.w	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff13 	bl	8003280 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4aa2      	ldr	r2, [pc, #648]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800347e:	4ba2      	ldr	r3, [pc, #648]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a9b      	ldr	r2, [pc, #620]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800349c:	4b9a      	ldr	r3, [pc, #616]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800349e:	e001      	b.n	80034a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b0:	d004      	beq.n	80034bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 8099 	bne.w	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f925 	bl	8003720 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f9c8 	bl	8003880 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d13a      	bne.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d035      	beq.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7e      	ldr	r2, [pc, #504]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800350e:	4b7e      	ldr	r3, [pc, #504]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003510:	e001      	b.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4979      	ldr	r1, [pc, #484]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800351e:	428b      	cmp	r3, r1
 8003520:	d101      	bne.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003522:	4b79      	ldr	r3, [pc, #484]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003524:	e001      	b.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800352e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f043 0202 	orr.w	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe88 	bl	8003280 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	f040 80be 	bne.w	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80b8 	beq.w	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003596:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a59      	ldr	r2, [pc, #356]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035a2:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a4:	e001      	b.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4954      	ldr	r1, [pc, #336]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035b2:	428b      	cmp	r3, r1
 80035b4:	d101      	bne.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035b8:	e001      	b.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe4a 	bl	8003280 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ec:	e084      	b.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d107      	bne.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8be 	bl	8003784 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8fd 	bl	800381c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d12f      	bne.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02a      	beq.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003644:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003652:	e001      	b.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4929      	ldr	r1, [pc, #164]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003660:	428b      	cmp	r3, r1
 8003662:	d101      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003664:	4b28      	ldr	r3, [pc, #160]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003666:	e001      	b.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003670:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fdfa 	bl	8003280 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	d131      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02c      	beq.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036ac:	e001      	b.n	80036b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4912      	ldr	r1, [pc, #72]	; (8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ba:	428b      	cmp	r3, r1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c0:	e001      	b.n	80036c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80036c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fdc5 	bl	8003280 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	e000      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f8:	bf00      	nop
}
 80036fa:	bf00      	nop
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40003800 	.word	0x40003800
 8003708:	40003400 	.word	0x40003400

0800370c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c99      	adds	r1, r3, #2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6251      	str	r1, [r2, #36]	; 0x24
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d113      	bne.n	800377a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003760:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ffc9 	bl	800370c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c99      	adds	r1, r3, #2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6251      	str	r1, [r2, #36]	; 0x24
 8003796:	8819      	ldrh	r1, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <I2SEx_TxISR_I2SExt+0x90>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <I2SEx_TxISR_I2SExt+0x22>
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <I2SEx_TxISR_I2SExt+0x94>)
 80037a4:	e001      	b.n	80037aa <I2SEx_TxISR_I2SExt+0x26>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	460a      	mov	r2, r1
 80037ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d121      	bne.n	800380a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <I2SEx_TxISR_I2SExt+0x90>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <I2SEx_TxISR_I2SExt+0x50>
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <I2SEx_TxISR_I2SExt+0x94>)
 80037d2:	e001      	b.n	80037d8 <I2SEx_TxISR_I2SExt+0x54>
 80037d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	490d      	ldr	r1, [pc, #52]	; (8003814 <I2SEx_TxISR_I2SExt+0x90>)
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d101      	bne.n	80037e8 <I2SEx_TxISR_I2SExt+0x64>
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <I2SEx_TxISR_I2SExt+0x94>)
 80037e6:	e001      	b.n	80037ec <I2SEx_TxISR_I2SExt+0x68>
 80037e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff81 	bl	800370c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40003800 	.word	0x40003800
 8003818:	40003400 	.word	0x40003400

0800381c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68d8      	ldr	r0, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	1c99      	adds	r1, r3, #2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003834:	b282      	uxth	r2, r0
 8003836:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d113      	bne.n	8003878 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff4a 	bl	800370c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <I2SEx_RxISR_I2SExt+0x90>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <I2SEx_RxISR_I2SExt+0x16>
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <I2SEx_RxISR_I2SExt+0x94>)
 8003894:	e001      	b.n	800389a <I2SEx_RxISR_I2SExt+0x1a>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	68d8      	ldr	r0, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	1c99      	adds	r1, r3, #2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038a6:	b282      	uxth	r2, r0
 80038a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d121      	bne.n	8003906 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <I2SEx_RxISR_I2SExt+0x90>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <I2SEx_RxISR_I2SExt+0x50>
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <I2SEx_RxISR_I2SExt+0x94>)
 80038ce:	e001      	b.n	80038d4 <I2SEx_RxISR_I2SExt+0x54>
 80038d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	490d      	ldr	r1, [pc, #52]	; (8003910 <I2SEx_RxISR_I2SExt+0x90>)
 80038dc:	428b      	cmp	r3, r1
 80038de:	d101      	bne.n	80038e4 <I2SEx_RxISR_I2SExt+0x64>
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <I2SEx_RxISR_I2SExt+0x94>)
 80038e2:	e001      	b.n	80038e8 <I2SEx_RxISR_I2SExt+0x68>
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff03 	bl	800370c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40003800 	.word	0x40003800
 8003914:	40003400 	.word	0x40003400

08003918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e22d      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d075      	beq.n	8003a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003936:	4ba3      	ldr	r3, [pc, #652]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4ba0      	ldr	r3, [pc, #640]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394a:	2b08      	cmp	r3, #8
 800394c:	d112      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	4b9d      	ldr	r3, [pc, #628]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395a:	d10b      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	4b99      	ldr	r3, [pc, #612]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05b      	beq.n	8003a20 <HAL_RCC_OscConfig+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d157      	bne.n	8003a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e208      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d106      	bne.n	800398c <HAL_RCC_OscConfig+0x74>
 800397e:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x98>
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xb0>
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fd fa80 	bl	8000ed4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd fa7c 	bl	8000ed4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1cd      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xc0>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fd fa6c 	bl	8000ed4 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fd fa68 	bl	8000ed4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1b9      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0xe8>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e18d      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4952      	ldr	r1, [pc, #328]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fd fa21 	bl	8000ed4 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fd fa1d 	bl	8000ed4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e16e      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4940      	ldr	r1, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x2b0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fa00 	bl	8000ed4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fd f9fc 	bl	8000ed4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e14d      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d030      	beq.n	8003b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd f9e0 	bl	8000ed4 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fd f9dc 	bl	8000ed4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e12d      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x2b4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd f9c9 	bl	8000ed4 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fd f9c5 	bl	8000ed4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e116      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a0 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d121      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_RCC_OscConfig+0x2b8>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7fd f98b 	bl	8000ed4 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e011      	b.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	42470000 	.word	0x42470000
 8003bcc:	42470e80 	.word	0x42470e80
 8003bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd f97e 	bl	8000ed4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0cf      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x478>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003bfa:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x312>
 8003c10:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a5f      	ldr	r2, [pc, #380]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
 8003c2a:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a59      	ldr	r2, [pc, #356]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fd f943 	bl	8000ed4 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd f93f 	bl	8000ed4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e08e      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x33a>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f92d 	bl	8000ed4 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f929 	bl	8000ed4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e078      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d064      	beq.n	8003d84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d05c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d141      	bne.n	8003d52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_RCC_OscConfig+0x480>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd f8fe 	bl	8000ed4 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd f8fa 	bl	8000ed4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e04b      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	491d      	ldr	r1, [pc, #116]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <HAL_RCC_OscConfig+0x480>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fd f8d3 	bl	8000ed4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fd f8cf 	bl	8000ed4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e020      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x41a>
 8003d50:	e018      	b.n	8003d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_RCC_OscConfig+0x480>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f8bc 	bl	8000ed4 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd f8b8 	bl	8000ed4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e009      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCC_OscConfig+0x47c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x448>
 8003d7e:	e001      	b.n	8003d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470060 	.word	0x42470060

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0ca      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b67      	ldr	r3, [pc, #412]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b6      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b52      	ldr	r3, [pc, #328]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a51      	ldr	r2, [pc, #324]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494c      	ldr	r1, [pc, #304]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07d      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06d      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e065      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4933      	ldr	r1, [pc, #204]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd f822 	bl	8000ed4 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd f81e 	bl	8000ed4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04d      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e030      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4915      	ldr	r1, [pc, #84]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490d      	ldr	r1, [pc, #52]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f81d 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f26:	4601      	mov	r1, r0
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	5cd3      	ldrb	r3, [r2, r3]
 8003f36:	fa21 f303 	lsr.w	r3, r1, r3
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7fc ff84 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	080076e4 	.word	0x080076e4
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f76:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d007      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x32>
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d008      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x38>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 80b4 	bne.w	80040f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f8e:	60bb      	str	r3, [r7, #8]
       break;
 8003f90:	e0b3      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f92:	4b5e      	ldr	r3, [pc, #376]	; (800410c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f94:	60bb      	str	r3, [r7, #8]
      break;
 8003f96:	e0b0      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f98:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa2:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04a      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fae:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	099b      	lsrs	r3, r3, #6
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	ea03 0501 	and.w	r5, r3, r1
 8003fc4:	ea04 0602 	and.w	r6, r4, r2
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4632      	mov	r2, r6
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	0154      	lsls	r4, r2, #5
 8003fd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fda:	014b      	lsls	r3, r1, #5
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4622      	mov	r2, r4
 8003fe0:	1b49      	subs	r1, r1, r5
 8003fe2:	eb62 0206 	sbc.w	r2, r2, r6
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f04f 0400 	mov.w	r4, #0
 8003fee:	0194      	lsls	r4, r2, #6
 8003ff0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ff4:	018b      	lsls	r3, r1, #6
 8003ff6:	1a5b      	subs	r3, r3, r1
 8003ff8:	eb64 0402 	sbc.w	r4, r4, r2
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	00e2      	lsls	r2, r4, #3
 8004006:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800400a:	00d9      	lsls	r1, r3, #3
 800400c:	460b      	mov	r3, r1
 800400e:	4614      	mov	r4, r2
 8004010:	195b      	adds	r3, r3, r5
 8004012:	eb44 0406 	adc.w	r4, r4, r6
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	0262      	lsls	r2, r4, #9
 8004020:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004024:	0259      	lsls	r1, r3, #9
 8004026:	460b      	mov	r3, r1
 8004028:	4614      	mov	r4, r2
 800402a:	4618      	mov	r0, r3
 800402c:	4621      	mov	r1, r4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	461a      	mov	r2, r3
 8004036:	4623      	mov	r3, r4
 8004038:	f7fc f8c6 	bl	80001c8 <__aeabi_uldivmod>
 800403c:	4603      	mov	r3, r0
 800403e:	460c      	mov	r4, r1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e049      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004044:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea03 0501 	and.w	r5, r3, r1
 800405a:	ea04 0602 	and.w	r6, r4, r2
 800405e:	4629      	mov	r1, r5
 8004060:	4632      	mov	r2, r6
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	0154      	lsls	r4, r2, #5
 800406c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004070:	014b      	lsls	r3, r1, #5
 8004072:	4619      	mov	r1, r3
 8004074:	4622      	mov	r2, r4
 8004076:	1b49      	subs	r1, r1, r5
 8004078:	eb62 0206 	sbc.w	r2, r2, r6
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f04f 0400 	mov.w	r4, #0
 8004084:	0194      	lsls	r4, r2, #6
 8004086:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800408a:	018b      	lsls	r3, r1, #6
 800408c:	1a5b      	subs	r3, r3, r1
 800408e:	eb64 0402 	sbc.w	r4, r4, r2
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	00e2      	lsls	r2, r4, #3
 800409c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040a0:	00d9      	lsls	r1, r3, #3
 80040a2:	460b      	mov	r3, r1
 80040a4:	4614      	mov	r4, r2
 80040a6:	195b      	adds	r3, r3, r5
 80040a8:	eb44 0406 	adc.w	r4, r4, r6
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	02a2      	lsls	r2, r4, #10
 80040b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040ba:	0299      	lsls	r1, r3, #10
 80040bc:	460b      	mov	r3, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	4621      	mov	r1, r4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f04f 0400 	mov.w	r4, #0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	f7fc f87b 	bl	80001c8 <__aeabi_uldivmod>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	60bb      	str	r3, [r7, #8]
      break;
 80040f2:	e002      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040f6:	60bb      	str	r3, [r7, #8]
      break;
 80040f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fa:	68bb      	ldr	r3, [r7, #8]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4601      	mov	r1, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4a03      	ldr	r2, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	080076f4 	.word	0x080076f4

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d035      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004178:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800417e:	f7fc fea9 	bl	8000ed4 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004186:	f7fc fea5 	bl	8000ed4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0b0      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	019a      	lsls	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	071b      	lsls	r3, r3, #28
 80041b0:	4955      	ldr	r1, [pc, #340]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041b8:	4b52      	ldr	r3, [pc, #328]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041be:	f7fc fe89 	bl	8000ed4 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041c6:	f7fc fe85 	bl	8000ed4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e090      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8083 	beq.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a43      	ldr	r2, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3e      	ldr	r2, [pc, #248]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fc fe5b 	bl	8000ed4 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004222:	f7fc fe57 	bl	8000ed4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e062      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004248:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d028      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004274:	4a24      	ldr	r2, [pc, #144]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d114      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004286:	f7fc fe25 	bl	8000ed4 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	e00a      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fc fe21 	bl	8000ed4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e02a      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ee      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042bc:	d10d      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	490d      	ldr	r1, [pc, #52]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
 80042d8:	e005      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042e4:	6093      	str	r3, [r2, #8]
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	4905      	ldr	r1, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	42470068 	.word	0x42470068
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
 8004310:	42470e40 	.word	0x42470e40

08004314 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d13d      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004332:	4b22      	ldr	r3, [pc, #136]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004342:	2b01      	cmp	r3, #1
 8004344:	d12f      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004348:	617b      	str	r3, [r7, #20]
          break;
 800434a:	e02f      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004358:	d108      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004362:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e007      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004382:	099b      	lsrs	r3, r3, #6
 8004384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	0f1b      	lsrs	r3, r3, #28
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	617b      	str	r3, [r7, #20]
          break;
 80043a4:	e002      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
          break;
 80043aa:	bf00      	nop
        }
      }
      break;
 80043ac:	bf00      	nop
    }
  }
  return frequency;
 80043ae:	697b      	ldr	r3, [r7, #20]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00bb8000 	.word	0x00bb8000
 80043c4:	007a1200 	.word	0x007a1200
 80043c8:	00f42400 	.word	0x00f42400

080043cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e056      	b.n	800448c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fc fbf9 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004414:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	ea42 0103 	orr.w	r1, r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	f003 0104 	and.w	r1, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004494:	b084      	sub	sp, #16
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	f107 001c 	add.w	r0, r7, #28
 80044a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d122      	bne.n	80044f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f94a 	bl	8004780 <USB_CoreReset>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e01a      	b.n	8004528 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f93e 	bl	8004780 <USB_CoreReset>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
 800451a:	e005      	b.n	8004528 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10b      	bne.n	8004546 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0206 	orr.w	r2, r3, #6
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004552:	b004      	add	sp, #16
 8004554:	4770      	bx	lr

08004556 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 0201 	bic.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
 80045c4:	e00b      	b.n	80045de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	e001      	b.n	80045de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e003      	b.n	80045e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045de:	2032      	movs	r0, #50	; 0x32
 80045e0:	f7fc fc84 	bl	8000eec <HAL_Delay>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a09      	ldr	r2, [pc, #36]	; (8004638 <USB_FlushTxFifo+0x48>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e006      	b.n	800462a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b20      	cmp	r3, #32
 8004626:	d0f0      	beq.n	800460a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	00030d40 	.word	0x00030d40

0800463c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2210      	movs	r2, #16
 800464c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <USB_FlushRxFifo+0x40>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d0f0      	beq.n	800464e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	00030d40 	.word	0x00030d40

08004680 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	460b      	mov	r3, r1
 8004690:	71fb      	strb	r3, [r7, #7]
 8004692:	4613      	mov	r3, r2
 8004694:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800469e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11a      	bne.n	80046dc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	3303      	adds	r3, #3
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e00f      	b.n	80046d4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	031a      	lsls	r2, r3, #12
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	461a      	mov	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3304      	adds	r3, #4
 80046cc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3eb      	bcc.n	80046b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b089      	sub	sp, #36	; 0x24
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	3303      	adds	r3, #3
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e00b      	b.n	8004726 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	601a      	str	r2, [r3, #0]
    pDest++;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3304      	adds	r3, #4
 800471e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	3301      	adds	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d3ef      	bcc.n	800470e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800472e:	69fb      	ldr	r3, [r7, #28]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3724      	adds	r7, #36	; 0x24
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0301 	and.w	r3, r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3301      	adds	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <USB_CoreReset+0x64>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e01b      	b.n	80047d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	daf2      	bge.n	800478c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <USB_CoreReset+0x64>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e006      	b.n	80047d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d0f0      	beq.n	80047b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	00030d40 	.word	0x00030d40

080047e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e8:	b084      	sub	sp, #16
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	f107 001c 	add.w	r0, r7, #28
 80047f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004804:	461a      	mov	r2, r3
 8004806:	2300      	movs	r3, #0
 8004808:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b03      	cmp	r3, #3
 800483e:	d10a      	bne.n	8004856 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e014      	b.n	8004880 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e009      	b.n	8004880 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800487a:	f023 0304 	bic.w	r3, r3, #4
 800487e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004880:	2110      	movs	r1, #16
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff feb4 	bl	80045f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fed7 	bl	800463c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e015      	b.n	80048c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3e5      	bcc.n	8004894 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80048c8:	2101      	movs	r1, #1
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8ac 	bl	8004a28 <USB_DriveVbus>

  HAL_Delay(200U);
 80048d0:	20c8      	movs	r0, #200	; 0xc8
 80048d2:	f7fc fb0b 	bl	8000eec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f04f 32ff 	mov.w	r2, #4294967295
 80048e2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a14      	ldr	r2, [pc, #80]	; (800494c <USB_HostInit+0x164>)
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <USB_HostInit+0x168>)
 8004902:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004906:	e009      	b.n	800491c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a10      	ldr	r2, [pc, #64]	; (8004954 <USB_HostInit+0x16c>)
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <USB_HostInit+0x170>)
 8004918:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <USB_HostInit+0x174>)
 8004934:	4313      	orrs	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004946:	b004      	add	sp, #16
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	01000200 	.word	0x01000200
 8004950:	00e00300 	.word	0x00e00300
 8004954:	00600080 	.word	0x00600080
 8004958:	004000e0 	.word	0x004000e0
 800495c:	a3200008 	.word	0xa3200008

08004960 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a8:	461a      	mov	r2, r3
 80049aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049ae:	6053      	str	r3, [r2, #4]
 80049b0:	e009      	b.n	80049c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d106      	bne.n	80049c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049be:	461a      	mov	r2, r3
 80049c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80049c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a02:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a04:	2064      	movs	r0, #100	; 0x64
 8004a06:	f7fc fa71 	bl	8000eec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004a18:	200a      	movs	r0, #10
 8004a1a:	f7fc fa67 	bl	8000eec <HAL_Delay>

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <USB_DriveVbus+0x44>
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d106      	bne.n	8004a6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d109      	bne.n	8004a8c <USB_DriveVbus+0x64>
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	0c5b      	lsrs	r3, r3, #17
 8004ab8:	f003 0303 	and.w	r3, r3, #3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	b29b      	uxth	r3, r3
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	70fb      	strb	r3, [r7, #3]
 8004afe:	460b      	mov	r3, r1
 8004b00:	70bb      	strb	r3, [r7, #2]
 8004b02:	4613      	mov	r3, r2
 8004b04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d87e      	bhi.n	8004c28 <USB_HC_Init+0x13c>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <USB_HC_Init+0x44>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004beb 	.word	0x08004beb
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004bad 	.word	0x08004bad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da10      	bge.n	8004b7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004b7c:	e057      	b.n	8004c2e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d051      	beq.n	8004c2e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ba8:	60d3      	str	r3, [r2, #12]
      break;
 8004baa:	e040      	b.n	8004c2e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f240 639d 	movw	r3, #1693	; 0x69d
 8004bbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004bc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da34      	bge.n	8004c32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004be8:	e023      	b.n	8004c32 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f240 2325 	movw	r3, #549	; 0x225
 8004bfc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004bfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da17      	bge.n	8004c36 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c24:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c26:	e006      	b.n	8004c36 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	e004      	b.n	8004c38 <USB_HC_Init+0x14c>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <USB_HC_Init+0x14c>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <USB_HC_Init+0x14c>
      break;
 8004c36:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	2101      	movs	r1, #1
 8004c48:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c52:	4313      	orrs	r3, r2
 8004c54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004c62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da03      	bge.n	8004c72 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	e001      	b.n	8004c76 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d103      	bne.n	8004c86 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e001      	b.n	8004c8a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c8a:	787b      	ldrb	r3, [r7, #1]
 8004c8c:	059b      	lsls	r3, r3, #22
 8004c8e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c92:	78bb      	ldrb	r3, [r7, #2]
 8004c94:	02db      	lsls	r3, r3, #11
 8004c96:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c9a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ca0:	049b      	lsls	r3, r3, #18
 8004ca2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ca6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cc6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d10f      	bne.n	8004cf0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d028      	beq.n	8004d7c <USB_HC_StartXfer+0x7c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d124      	bne.n	8004d7c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <USB_HC_StartXfer+0x50>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	795b      	ldrb	r3, [r3, #5]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	4619      	mov	r1, r3
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa2e 	bl	80051a8 <USB_DoPing>
      return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e112      	b.n	8004f76 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d112      	bne.n	8004d7c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d70:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004d74:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	8912      	ldrh	r2, [r2, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	8912      	ldrh	r2, [r2, #8]
 8004d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d98:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004d9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d9c:	8b7b      	ldrh	r3, [r7, #26]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d90b      	bls.n	8004dba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004da2:	8b7b      	ldrh	r3, [r7, #26]
 8004da4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	8912      	ldrh	r2, [r2, #8]
 8004dac:	fb02 f203 	mul.w	r2, r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	611a      	str	r2, [r3, #16]
 8004db4:	e001      	b.n	8004dba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004db6:	2301      	movs	r3, #1
 8004db8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	78db      	ldrb	r3, [r3, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	8912      	ldrh	r2, [r2, #8]
 8004dc8:	fb02 f203 	mul.w	r2, r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dda:	04d9      	lsls	r1, r3, #19
 8004ddc:	4b68      	ldr	r3, [pc, #416]	; (8004f80 <USB_HC_StartXfer+0x280>)
 8004dde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004de0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	7a9b      	ldrb	r3, [r3, #10]
 8004de6:	075b      	lsls	r3, r3, #29
 8004de8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	0148      	lsls	r0, r1, #5
 8004df0:	6a39      	ldr	r1, [r7, #32]
 8004df2:	4401      	add	r1, r0
 8004df4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004df8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004dfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68d9      	ldr	r1, [r3, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e12:	460a      	mov	r2, r1
 8004e14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	6a3a      	ldr	r2, [r7, #32]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	7e7b      	ldrb	r3, [r7, #25]
 8004e5e:	075b      	lsls	r3, r3, #29
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	0148      	lsls	r0, r1, #5
 8004e64:	6a39      	ldr	r1, [r7, #32]
 8004e66:	4401      	add	r1, r0
 8004e68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a41      	ldr	r2, [pc, #260]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004e80:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e82:	4b40      	ldr	r3, [pc, #256]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e8a:	4a3e      	ldr	r2, [pc, #248]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004e8c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	78db      	ldrb	r3, [r3, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9e:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e005      	b.n	8004eb0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ea4:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004eae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eb8:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004eba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <USB_HC_StartXfer+0x284>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14e      	bne.n	8004f74 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	78db      	ldrb	r3, [r3, #3]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d14a      	bne.n	8004f74 <USB_HC_StartXfer+0x274>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d046      	beq.n	8004f74 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	79db      	ldrb	r3, [r3, #7]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d830      	bhi.n	8004f50 <USB_HC_StartXfer+0x250>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <USB_HC_StartXfer+0x1f4>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f29 	.word	0x08004f29
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f29 	.word	0x08004f29
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f0e:	8afa      	ldrh	r2, [r7, #22]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d91c      	bls.n	8004f54 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f26:	e015      	b.n	8004f54 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f32:	8afa      	ldrh	r2, [r7, #22]
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d90a      	bls.n	8004f58 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]
          }
          break;
 8004f4e:	e003      	b.n	8004f58 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004f50:	bf00      	nop
 8004f52:	e002      	b.n	8004f5a <USB_HC_StartXfer+0x25a>
          break;
 8004f54:	bf00      	nop
 8004f56:	e000      	b.n	8004f5a <USB_HC_StartXfer+0x25a>
          break;
 8004f58:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68d9      	ldr	r1, [r3, #12]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	785a      	ldrb	r2, [r3, #1]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	b298      	uxth	r0, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fb86 	bl	8004680 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	1ff80000 	.word	0x1ff80000
 8004f84:	200000b0 	.word	0x200000b0

08004f88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	b29b      	uxth	r3, r3
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0c9b      	lsrs	r3, r3, #18
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <USB_HC_Halt+0x3a>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d16c      	bne.n	80050be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005002:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d143      	bne.n	8005098 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	440a      	add	r2, r1
 8005026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800502e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	440a      	add	r2, r1
 8005046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800504e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	440a      	add	r2, r1
 8005066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800506e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507c:	d81d      	bhi.n	80050ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005094:	d0ec      	beq.n	8005070 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005096:	e080      	b.n	800519a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050b8:	e06f      	b.n	800519a <USB_HC_Halt+0x1f0>
          break;
 80050ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050bc:	e06d      	b.n	800519a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d143      	bne.n	8005176 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	440a      	add	r2, r1
 8005104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800510c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	440a      	add	r2, r1
 8005124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800512c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800514c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800515a:	d81d      	bhi.n	8005198 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800516e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005172:	d0ec      	beq.n	800514e <USB_HC_Halt+0x1a4>
 8005174:	e011      	b.n	800519a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	440a      	add	r2, r1
 800518c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e000      	b.n	800519a <USB_HC_Halt+0x1f0>
          break;
 8005198:	bf00      	nop
    }
  }

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80051bc:	2301      	movs	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	04da      	lsls	r2, r3, #19
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <USB_DoPing+0x74>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	461a      	mov	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	1ff80000 	.word	0x1ff80000

08005220 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff f9a1 	bl	8004578 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005236:	2110      	movs	r1, #16
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff f9d9 	bl	80045f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff f9fc 	bl	800463c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	e01f      	b.n	800528a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005260:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005268:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005270:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3301      	adds	r3, #1
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b0f      	cmp	r3, #15
 800528e:	d9dc      	bls.n	800524a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e034      	b.n	8005300 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3301      	adds	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052dc:	d80c      	bhi.n	80052f8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f4:	d0ec      	beq.n	80052d0 <USB_StopHost+0xb0>
 80052f6:	e000      	b.n	80052fa <USB_StopHost+0xda>
        break;
 80052f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3301      	adds	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d9c7      	bls.n	8005296 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 33ff 	mov.w	r3, #4294967295
 8005312:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 32ff 	mov.w	r2, #4294967295
 800531a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff f91a 	bl	8004556 <USB_EnableGlobalInt>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af04      	add	r7, sp, #16
 8005332:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005334:	2302      	movs	r3, #2
 8005336:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005338:	2301      	movs	r3, #1
 800533a:	2202      	movs	r2, #2
 800533c:	2102      	movs	r1, #2
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc3a 	bl	8005bb8 <USBH_FindInterface>
 8005344:	4603      	mov	r3, r0
 8005346:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	2bff      	cmp	r3, #255	; 0xff
 800534c:	f000 812a 	beq.w	80055a4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fc13 	bl	8005b80 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005360:	2050      	movs	r0, #80	; 0x50
 8005362:	f002 f8df 	bl	8007524 <malloc>
 8005366:	4603      	mov	r3, r0
 8005368:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005374:	7bbb      	ldrb	r3, [r7, #14]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	211a      	movs	r1, #26
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b25b      	sxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	da15      	bge.n	80053b8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800538c:	7bbb      	ldrb	r3, [r7, #14]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	211a      	movs	r1, #26
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	211a      	movs	r1, #26
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 fd21 	bl	8006e06 <USBH_AllocPipe>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	7819      	ldrb	r1, [r3, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	7858      	ldrb	r0, [r3, #1]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	8952      	ldrh	r2, [r2, #10]
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	2203      	movs	r2, #3
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4623      	mov	r3, r4
 80053ee:	4602      	mov	r2, r0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fcd9 	bl	8006da8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 ffe0 	bl	80073c4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005404:	2300      	movs	r3, #0
 8005406:	2200      	movs	r2, #0
 8005408:	210a      	movs	r1, #10
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fbd4 	bl	8005bb8 <USBH_FindInterface>
 8005410:	4603      	mov	r3, r0
 8005412:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	2bff      	cmp	r3, #255	; 0xff
 8005418:	f000 80c4 	beq.w	80055a4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	211a      	movs	r1, #26
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b25b      	sxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	da16      	bge.n	8005462 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	211a      	movs	r1, #26
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800544a:	7bbb      	ldrb	r3, [r7, #14]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	211a      	movs	r1, #26
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	835a      	strh	r2, [r3, #26]
 8005460:	e015      	b.n	800548e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	211a      	movs	r1, #26
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	211a      	movs	r1, #26
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	211a      	movs	r1, #26
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	da16      	bge.n	80054d4 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	211a      	movs	r1, #26
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	211a      	movs	r1, #26
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	835a      	strh	r2, [r3, #26]
 80054d2:	e015      	b.n	8005500 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	211a      	movs	r1, #26
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	f203 3352 	addw	r3, r3, #850	; 0x352
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	211a      	movs	r1, #26
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80054fa:	881a      	ldrh	r2, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	7b9b      	ldrb	r3, [r3, #14]
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fc7d 	bl	8006e06 <USBH_AllocPipe>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	7bdb      	ldrb	r3, [r3, #15]
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fc73 	bl	8006e06 <USBH_AllocPipe>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	7b59      	ldrb	r1, [r3, #13]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	7b98      	ldrb	r0, [r3, #14]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	8b12      	ldrh	r2, [r2, #24]
 8005540:	9202      	str	r2, [sp, #8]
 8005542:	2202      	movs	r2, #2
 8005544:	9201      	str	r2, [sp, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4623      	mov	r3, r4
 800554a:	4602      	mov	r2, r0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fc2b 	bl	8006da8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	7b19      	ldrb	r1, [r3, #12]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	7bd8      	ldrb	r0, [r3, #15]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	8b52      	ldrh	r2, [r2, #26]
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	2202      	movs	r2, #2
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4623      	mov	r3, r4
 8005574:	4602      	mov	r2, r0
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fc16 	bl	8006da8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	7b5b      	ldrb	r3, [r3, #13]
 8005588:	2200      	movs	r2, #0
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 ff19 	bl	80073c4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	7b1b      	ldrb	r3, [r3, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 ff12 	bl	80073c4 <USBH_LL_SetToggle>
      status = USBH_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd90      	pop	{r4, r7, pc}

080055ae <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fc09 	bl	8006de6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fc31 	bl	8006e42 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	7b1b      	ldrb	r3, [r3, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00e      	beq.n	800560c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fbf6 	bl	8006de6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	7b1b      	ldrb	r3, [r3, #12]
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 fc1e 	bl	8006e42 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	7b5b      	ldrb	r3, [r3, #13]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	7b5b      	ldrb	r3, [r3, #13]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fbe3 	bl	8006de6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	7b5b      	ldrb	r3, [r3, #13]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fc0b 	bl	8006e42 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4618      	mov	r0, r3
 8005648:	f001 ff74 	bl	8007534 <free>
    phost->pActiveClass->pData = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005652:	2200      	movs	r2, #0
 8005654:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005668:	2302      	movs	r3, #2
 800566a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3340      	adds	r3, #64	; 0x40
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8b2 	bl	80057e6 <GetLineCoding>
 8005682:	4603      	mov	r3, r0
 8005684:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005692:	2102      	movs	r1, #2
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
  }
  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d877      	bhi.n	80057b8 <USBH_CDC_Process+0x114>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <USBH_CDC_Process+0x2c>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056e5 	.word	0x080056e5
 80056d4:	080056eb 	.word	0x080056eb
 80056d8:	0800571b 	.word	0x0800571b
 80056dc:	0800578f 	.word	0x0800578f
 80056e0:	0800579d 	.word	0x0800579d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
    break;
 80056e8:	e06d      	b.n	80057c6 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f897 	bl	8005824 <SetLineCoding>
 80056f6:	4603      	mov	r3, r0
 80056f8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005708:	e058      	b.n	80057bc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800570a:	7bbb      	ldrb	r3, [r7, #14]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d055      	beq.n	80057bc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2204      	movs	r2, #4
 8005714:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005718:	e050      	b.n	80057bc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3340      	adds	r3, #64	; 0x40
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f860 	bl	80057e6 <GetLineCoding>
 8005726:	4603      	mov	r3, r0
 8005728:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800572a:	7bbb      	ldrb	r3, [r7, #14]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d126      	bne.n	800577e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	791b      	ldrb	r3, [r3, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d13b      	bne.n	80057c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005754:	429a      	cmp	r2, r3
 8005756:	d133      	bne.n	80057c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005762:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005764:	429a      	cmp	r2, r3
 8005766:	d12b      	bne.n	80057c0 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005770:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005772:	429a      	cmp	r2, r3
 8005774:	d124      	bne.n	80057c0 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f95a 	bl	8005a30 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800577c:	e020      	b.n	80057c0 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d01d      	beq.n	80057c0 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2204      	movs	r2, #4
 8005788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800578c:	e018      	b.n	80057c0 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f867 	bl	8005862 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8dc 	bl	8005952 <CDC_ProcessReception>
    break;
 800579a:	e014      	b.n	80057c6 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800579c:	2100      	movs	r1, #0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fece 	bl	8006540 <USBH_ClrFeature>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80057b6:	e005      	b.n	80057c4 <USBH_CDC_Process+0x120>

  default:
    break;
 80057b8:	bf00      	nop
 80057ba:	e004      	b.n	80057c6 <USBH_CDC_Process+0x122>
    break;
 80057bc:	bf00      	nop
 80057be:	e002      	b.n	80057c6 <USBH_CDC_Process+0x122>
    break;
 80057c0:	bf00      	nop
 80057c2:	e000      	b.n	80057c6 <USBH_CDC_Process+0x122>
    break;
 80057c4:	bf00      	nop

  }

  return status;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22a1      	movs	r2, #161	; 0xa1
 80057f4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2221      	movs	r2, #33	; 0x21
 80057fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2207      	movs	r2, #7
 800580c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2207      	movs	r2, #7
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 f873 	bl	8006900 <USBH_CtlReq>
 800581a:	4603      	mov	r3, r0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2207      	movs	r2, #7
 800584a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2207      	movs	r2, #7
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 f854 	bl	8006900 <USBH_CtlReq>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af02      	add	r7, sp, #8
 8005868:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005874:	2300      	movs	r3, #0
 8005876:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800587e:	2b01      	cmp	r3, #1
 8005880:	d002      	beq.n	8005888 <CDC_ProcessTransmission+0x26>
 8005882:	2b02      	cmp	r3, #2
 8005884:	d025      	beq.n	80058d2 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005886:	e060      	b.n	800594a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	8b12      	ldrh	r2, [r2, #24]
 8005890:	4293      	cmp	r3, r2
 8005892:	d90c      	bls.n	80058ae <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8b1a      	ldrh	r2, [r3, #24]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	7b58      	ldrb	r0, [r3, #13]
 80058a0:	2301      	movs	r3, #1
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	4603      	mov	r3, r0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fa3b 	bl	8006d22 <USBH_BulkSendData>
 80058ac:	e00c      	b.n	80058c8 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	7b58      	ldrb	r0, [r3, #13]
 80058bc:	2301      	movs	r3, #1
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4603      	mov	r3, r0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 fa2d 	bl	8006d22 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058d0:	e03b      	b.n	800594a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	7b5b      	ldrb	r3, [r3, #13]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fd49 	bl	8007370 <USBH_LL_GetURBState>
 80058de:	4603      	mov	r3, r0
 80058e0:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d128      	bne.n	800593a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	8b12      	ldrh	r2, [r2, #24]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d90e      	bls.n	8005912 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	8b12      	ldrh	r2, [r2, #24]
 80058fc:	1a9a      	subs	r2, r3, r2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	8b12      	ldrh	r2, [r2, #24]
 800590a:	441a      	add	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	61da      	str	r2, [r3, #28]
 8005910:	e002      	b.n	8005918 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005928:	e00e      	b.n	8005948 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f868 	bl	8005a08 <USBH_CDC_TransmitCallback>
    break;
 8005938:	e006      	b.n	8005948 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d103      	bne.n	8005948 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005948:	bf00      	nop
  }
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005964:	2300      	movs	r3, #0
 8005966:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800596e:	2b03      	cmp	r3, #3
 8005970:	d002      	beq.n	8005978 <CDC_ProcessReception+0x26>
 8005972:	2b04      	cmp	r3, #4
 8005974:	d00e      	beq.n	8005994 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005976:	e043      	b.n	8005a00 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	6a19      	ldr	r1, [r3, #32]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	8b5a      	ldrh	r2, [r3, #26]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 f9f1 	bl	8006d6c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2204      	movs	r2, #4
 800598e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005992:	e035      	b.n	8005a00 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	7b1b      	ldrb	r3, [r3, #12]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fce8 	bl	8007370 <USBH_LL_GetURBState>
 80059a0:	4603      	mov	r3, r0
 80059a2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d129      	bne.n	80059fe <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	7b1b      	ldrb	r3, [r3, #12]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fc4b 	bl	800724c <USBH_LL_GetLastXferSize>
 80059b6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d016      	beq.n	80059f0 <CDC_ProcessReception+0x9e>
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	8b5b      	ldrh	r3, [r3, #26]
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d910      	bls.n	80059f0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	441a      	add	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2203      	movs	r2, #3
 80059ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80059ee:	e006      	b.n	80059fe <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f80f 	bl	8005a1c <USBH_CDC_ReceiveCallback>
    break;
 80059fe:	bf00      	nop
  }
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e019      	b.n	8005a90 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	79fa      	ldrb	r2, [r7, #7]
 8005a60:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f80f 	bl	8005a98 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f001 fb2d 	bl	80070e8 <USBH_LL_Init>

  return USBH_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005aa4:	e008      	b.n	8005ab8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	32e0      	adds	r2, #224	; 0xe0
 8005aac:	2100      	movs	r1, #0
 8005aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b0e      	cmp	r3, #14
 8005abc:	d9f3      	bls.n	8005aa6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e009      	b.n	8005ad8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d3f1      	bcc.n	8005ac4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2240      	movs	r2, #64	; 0x40
 8005b04:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d017      	beq.n	8005b6e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	33dc      	adds	r3, #220	; 0xdc
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	e004      	b.n	8005b72 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e001      	b.n	8005b72 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d204      	bcs.n	8005ba6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005ba4:	e001      	b.n	8005baa <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	70fb      	strb	r3, [r7, #3]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70bb      	strb	r3, [r7, #2]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005be0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005be2:	e025      	b.n	8005c30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	221a      	movs	r2, #26
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	3308      	adds	r3, #8
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	795b      	ldrb	r3, [r3, #5]
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d002      	beq.n	8005c06 <USBH_FindInterface+0x4e>
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2bff      	cmp	r3, #255	; 0xff
 8005c04:	d111      	bne.n	8005c2a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005c0a:	78ba      	ldrb	r2, [r7, #2]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d002      	beq.n	8005c16 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c10:	78bb      	ldrb	r3, [r7, #2]
 8005c12:	2bff      	cmp	r3, #255	; 0xff
 8005c14:	d109      	bne.n	8005c2a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005c1a:	787a      	ldrb	r2, [r7, #1]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d002      	beq.n	8005c26 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c20:	787b      	ldrb	r3, [r7, #1]
 8005c22:	2bff      	cmp	r3, #255	; 0xff
 8005c24:	d101      	bne.n	8005c2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	e006      	b.n	8005c38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d9d6      	bls.n	8005be4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005c36:	23ff      	movs	r3, #255	; 0xff
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 fa87 	bl	8007160 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005c52:	2101      	movs	r1, #1
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fb9e 	bl	8007396 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 faec 	bl	8006252 <USBH_IsPortEnabled>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10c      	bne.n	8005c9a <USBH_Process+0x36>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d002      	beq.n	8005c9a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2203      	movs	r2, #3
 8005c98:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b0b      	cmp	r3, #11
 8005ca2:	f200 814c 	bhi.w	8005f3e <USBH_Process+0x2da>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <USBH_Process+0x48>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005cff 	.word	0x08005cff
 8005cb4:	08005d13 	.word	0x08005d13
 8005cb8:	08005f19 	.word	0x08005f19
 8005cbc:	08005f3f 	.word	0x08005f3f
 8005cc0:	08005da1 	.word	0x08005da1
 8005cc4:	08005ecf 	.word	0x08005ecf
 8005cc8:	08005dd1 	.word	0x08005dd1
 8005ccc:	08005df1 	.word	0x08005df1
 8005cd0:	08005e11 	.word	0x08005e11
 8005cd4:	08005e3f 	.word	0x08005e3f
 8005cd8:	08005f01 	.word	0x08005f01
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 812c 	beq.w	8005f42 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005cf0:	20c8      	movs	r0, #200	; 0xc8
 8005cf2:	f001 fb9a 	bl	800742a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fa8d 	bl	8007216 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005cfc:	e121      	b.n	8005f42 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	f040 811e 	bne.w	8005f46 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005d10:	e119      	b.n	8005f46 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005d12:	2064      	movs	r0, #100	; 0x64
 8005d14:	f001 fb89 	bl	800742a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fa57 	bl	80071cc <USBH_LL_GetSpeed>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f868 	bl	8006e06 <USBH_AllocPipe>
 8005d36:	4603      	mov	r3, r0
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 f860 	bl	8006e06 <USBH_AllocPipe>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	7919      	ldrb	r1, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005d62:	b292      	uxth	r2, r2
 8005d64:	9202      	str	r2, [sp, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f819 	bl	8006da8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7959      	ldrb	r1, [r3, #5]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	9202      	str	r2, [sp, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	9201      	str	r2, [sp, #4]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4603      	mov	r3, r0
 8005d96:	2200      	movs	r2, #0
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 f805 	bl	8006da8 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005d9e:	e0e3      	b.n	8005f68 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f8e7 	bl	8005f74 <USBH_HandleEnum>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f040 80ce 	bne.w	8005f4a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d103      	bne.n	8005dc8 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005dc6:	e0c0      	b.n	8005f4a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2207      	movs	r2, #7
 8005dcc:	701a      	strb	r2, [r3, #0]
    break;
 8005dce:	e0bc      	b.n	8005f4a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80b9 	beq.w	8005f4e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005de2:	2101      	movs	r1, #1
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2208      	movs	r2, #8
 8005dec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005dee:	e0ae      	b.n	8005f4e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fb59 	bl	80064b2 <USBH_SetCfg>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 80a5 	bne.w	8005f52 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2209      	movs	r2, #9
 8005e0c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e0e:	e0a0      	b.n	8005f52 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005e1e:	2101      	movs	r1, #1
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb69 	bl	80064f8 <USBH_SetFeature>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f040 8094 	bne.w	8005f56 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	220a      	movs	r2, #10
 8005e32:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e34:	e08f      	b.n	8005f56 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	220a      	movs	r2, #10
 8005e3a:	701a      	strb	r2, [r3, #0]
    break;
 8005e3c:	e08b      	b.n	8005f56 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8088 	beq.w	8005f5a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
 8005e56:	e017      	b.n	8005e88 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	33dc      	adds	r3, #220	; 0xdc
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	791a      	ldrb	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d108      	bne.n	8005e82 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	33dc      	adds	r3, #220	; 0xdc
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	3301      	adds	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0e4      	beq.n	8005e58 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d016      	beq.n	8005ec6 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	4798      	blx	r3
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2206      	movs	r2, #6
 8005eae:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005eb6:	2103      	movs	r1, #3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005ebc:	e04d      	b.n	8005f5a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	220d      	movs	r2, #13
 8005ec2:	701a      	strb	r2, [r3, #0]
    break;
 8005ec4:	e049      	b.n	8005f5a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	220d      	movs	r2, #13
 8005eca:	701a      	strb	r2, [r3, #0]
    break;
 8005ecc:	e045      	b.n	8005f5a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00f      	beq.n	8005ef8 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d136      	bne.n	8005f5e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	220b      	movs	r2, #11
 8005ef4:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8005ef6:	e032      	b.n	8005f5e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	220d      	movs	r2, #13
 8005efc:	701a      	strb	r2, [r3, #0]
    break;
 8005efe:	e02e      	b.n	8005f5e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02b      	beq.n	8005f62 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
    }
    break;
 8005f16:	e024      	b.n	8005f62 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fdbd 	bl	8005a98 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8005f3c:	e013      	b.n	8005f66 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8005f3e:	bf00      	nop
 8005f40:	e012      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f42:	bf00      	nop
 8005f44:	e010      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f46:	bf00      	nop
 8005f48:	e00e      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f4a:	bf00      	nop
 8005f4c:	e00c      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f4e:	bf00      	nop
 8005f50:	e00a      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f52:	bf00      	nop
 8005f54:	e008      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f56:	bf00      	nop
 8005f58:	e006      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <USBH_Process+0x304>
    break;
 8005f66:	bf00      	nop
  }
 return USBH_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af04      	add	r7, sp, #16
 8005f7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	f200 80f8 	bhi.w	800617a <USBH_HandleEnum+0x206>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <USBH_HandleEnum+0x1c>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fb1 	.word	0x08005fb1
 8005f94:	08006023 	.word	0x08006023
 8005f98:	0800603b 	.word	0x0800603b
 8005f9c:	080060b1 	.word	0x080060b1
 8005fa0:	080060c7 	.word	0x080060c7
 8005fa4:	080060e3 	.word	0x080060e3
 8005fa8:	08006117 	.word	0x08006117
 8005fac:	0800614b 	.word	0x0800614b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005fb0:	2108      	movs	r1, #8
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9ad 	bl	8006312 <USBH_Get_DevDesc>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 80df 	bne.w	800617e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7919      	ldrb	r1, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005fe4:	b292      	uxth	r2, r2
 8005fe6:	9202      	str	r2, [sp, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	9201      	str	r2, [sp, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2280      	movs	r2, #128	; 0x80
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fed8 	bl	8006da8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7959      	ldrb	r1, [r3, #5]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800600c:	b292      	uxth	r2, r2
 800600e:	9202      	str	r2, [sp, #8]
 8006010:	2200      	movs	r2, #0
 8006012:	9201      	str	r2, [sp, #4]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	4603      	mov	r3, r0
 8006018:	2200      	movs	r2, #0
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fec4 	bl	8006da8 <USBH_OpenPipe>

    }
    break;
 8006020:	e0ad      	b.n	800617e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006022:	2112      	movs	r1, #18
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f974 	bl	8006312 <USBH_Get_DevDesc>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 80a8 	bne.w	8006182 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006038:	e0a3      	b.n	8006182 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800603a:	2101      	movs	r1, #1
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fa14 	bl	800646a <USBH_SetAddress>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 809e 	bne.w	8006186 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800604a:	2002      	movs	r0, #2
 800604c:	f001 f9ed 	bl	800742a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2203      	movs	r2, #3
 800605c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	7919      	ldrb	r1, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006072:	b292      	uxth	r2, r2
 8006074:	9202      	str	r2, [sp, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	9201      	str	r2, [sp, #4]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4603      	mov	r3, r0
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fe91 	bl	8006da8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7959      	ldrb	r1, [r3, #5]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800609a:	b292      	uxth	r2, r2
 800609c:	9202      	str	r2, [sp, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	9201      	str	r2, [sp, #4]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4603      	mov	r3, r0
 80060a6:	2200      	movs	r2, #0
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fe7d 	bl	8006da8 <USBH_OpenPipe>
    }
    break;
 80060ae:	e06a      	b.n	8006186 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80060b0:	2109      	movs	r1, #9
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f955 	bl	8006362 <USBH_Get_CfgDesc>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d165      	bne.n	800618a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80060c4:	e061      	b.n	800618a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f947 	bl	8006362 <USBH_Get_CfgDesc>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d159      	bne.n	800618e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2205      	movs	r2, #5
 80060de:	705a      	strb	r2, [r3, #1]
    }
    break;
 80060e0:	e055      	b.n	800618e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80060f8:	23ff      	movs	r3, #255	; 0xff
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f955 	bl	80063aa <USBH_Get_StringDesc>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d145      	bne.n	8006192 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2206      	movs	r2, #6
 800610a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800610c:	e041      	b.n	8006192 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2206      	movs	r2, #6
 8006112:	705a      	strb	r2, [r3, #1]
    break;
 8006114:	e03d      	b.n	8006192 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800611c:	2b00      	cmp	r3, #0
 800611e:	d010      	beq.n	8006142 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800612c:	23ff      	movs	r3, #255	; 0xff
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f93b 	bl	80063aa <USBH_Get_StringDesc>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12d      	bne.n	8006196 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2207      	movs	r2, #7
 800613e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006140:	e029      	b.n	8006196 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2207      	movs	r2, #7
 8006146:	705a      	strb	r2, [r3, #1]
    break;
 8006148:	e025      	b.n	8006196 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00f      	beq.n	8006174 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006160:	23ff      	movs	r3, #255	; 0xff
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f921 	bl	80063aa <USBH_Get_StringDesc>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d115      	bne.n	800619a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006172:	e012      	b.n	800619a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
    break;
 8006178:	e00f      	b.n	800619a <USBH_HandleEnum+0x226>

  default:
    break;
 800617a:	bf00      	nop
 800617c:	e00e      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 800617e:	bf00      	nop
 8006180:	e00c      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 8006182:	bf00      	nop
 8006184:	e00a      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 8006186:	bf00      	nop
 8006188:	e008      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 800618a:	bf00      	nop
 800618c:	e006      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 800618e:	bf00      	nop
 8006190:	e004      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 8006192:	bf00      	nop
 8006194:	e002      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <USBH_HandleEnum+0x228>
    break;
 800619a:	bf00      	nop
  }
  return Status;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f804 	bl	80061ea <USBH_HandleSof>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b0b      	cmp	r3, #11
 80061fa:	d10a      	bne.n	8006212 <USBH_HandleSof+0x28>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
  }
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800622a:	bf00      	nop
}
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006246:	bf00      	nop
}
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10f      	bne.n	800629e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006296:	2104      	movs	r1, #4
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	e007      	b.n	80062ae <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 ff68 	bl	8007196 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	791b      	ldrb	r3, [r3, #4]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fdb8 	bl	8006e42 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	795b      	ldrb	r3, [r3, #5]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fdb2 	bl	8006e42 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062f6:	2105      	movs	r1, #5
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 ff2f 	bl	8007160 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2203      	movs	r2, #3
 8006306:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af02      	add	r7, sp, #8
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b29b      	uxth	r3, r3
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f864 	bl	8006400 <USBH_GetDescriptor>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	b292      	uxth	r2, r2
 8006352:	4619      	mov	r1, r3
 8006354:	f000 f918 	bl	8006588 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af02      	add	r7, sp, #8
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	331c      	adds	r3, #28
 8006372:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f83d 	bl	8006400 <USBH_GetDescriptor>
 8006386:	4603      	mov	r3, r0
 8006388:	72fb      	strb	r3, [r7, #11]
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006396:	887a      	ldrh	r2, [r7, #2]
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f964 	bl	8006668 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	461a      	mov	r2, r3
 80063b6:	460b      	mov	r3, r1
 80063b8:	72fb      	strb	r3, [r7, #11]
 80063ba:	4613      	mov	r3, r2
 80063bc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063c6:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80063ce:	893b      	ldrh	r3, [r7, #8]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	460b      	mov	r3, r1
 80063d4:	2100      	movs	r1, #0
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f812 	bl	8006400 <USBH_GetDescriptor>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063ec:	893a      	ldrh	r2, [r7, #8]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa37 	bl	8006864 <USBH_ParseStringDesc>
  }
  return status;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	72fb      	strb	r3, [r7, #11]
 800640e:	4613      	mov	r3, r2
 8006410:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	789b      	ldrb	r3, [r3, #2]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d11c      	bne.n	8006454 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2206      	movs	r2, #6
 800642a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	893a      	ldrh	r2, [r7, #8]
 8006430:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006432:	893b      	ldrh	r3, [r7, #8]
 8006434:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800643c:	d104      	bne.n	8006448 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f240 4209 	movw	r2, #1033	; 0x409
 8006444:	829a      	strh	r2, [r3, #20]
 8006446:	e002      	b.n	800644e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8b3a      	ldrh	r2, [r7, #24]
 8006452:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006454:	8b3b      	ldrh	r3, [r7, #24]
 8006456:	461a      	mov	r2, r3
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fa50 	bl	8006900 <USBH_CtlReq>
 8006460:	4603      	mov	r3, r0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	789b      	ldrb	r3, [r3, #2]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10f      	bne.n	800649e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2205      	movs	r2, #5
 8006488:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800649e:	2200      	movs	r2, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa2c 	bl	8006900 <USBH_CtlReq>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	789b      	ldrb	r3, [r3, #2]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10e      	bne.n	80064e4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2209      	movs	r2, #9
 80064d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	887a      	ldrh	r2, [r7, #2]
 80064d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80064e4:	2200      	movs	r2, #0
 80064e6:	2100      	movs	r1, #0
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa09 	bl	8006900 <USBH_CtlReq>
 80064ee:	4603      	mov	r3, r0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	789b      	ldrb	r3, [r3, #2]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10f      	bne.n	800652c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2203      	movs	r2, #3
 8006516:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800652c:	2200      	movs	r2, #0
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f9e5 	bl	8006900 <USBH_CtlReq>
 8006536:	4603      	mov	r3, r0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10f      	bne.n	8006574 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f9c1 	bl	8006900 <USBH_CtlReq>
 800657e:	4603      	mov	r3, r0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	785a      	ldrb	r2, [r3, #1]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3302      	adds	r3, #2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3303      	adds	r3, #3
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4313      	orrs	r3, r2
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	791a      	ldrb	r2, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	795a      	ldrb	r2, [r3, #5]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	799a      	ldrb	r2, [r3, #6]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	79da      	ldrb	r2, [r3, #7]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d939      	bls.n	800665c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	3308      	adds	r3, #8
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3309      	adds	r3, #9
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	330a      	adds	r3, #10
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	330b      	adds	r3, #11
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	b29b      	uxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	330c      	adds	r3, #12
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b29a      	uxth	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	330d      	adds	r3, #13
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	b29b      	uxth	r3, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	7b9a      	ldrb	r2, [r3, #14]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	7bda      	ldrb	r2, [r3, #15]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	7c1a      	ldrb	r2, [r3, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	7c5a      	ldrb	r2, [r3, #17]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	745a      	strb	r2, [r3, #17]
  }
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785a      	ldrb	r2, [r3, #1]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3302      	adds	r3, #2
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3303      	adds	r3, #3
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	791a      	ldrb	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	795a      	ldrb	r2, [r3, #5]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	799a      	ldrb	r2, [r3, #6]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	79da      	ldrb	r2, [r3, #7]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	7a1a      	ldrb	r2, [r3, #8]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	d95f      	bls.n	80067a4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80066e4:	2309      	movs	r3, #9
 80066e6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80066ec:	e051      	b.n	8006792 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80066ee:	f107 0316 	add.w	r3, r7, #22
 80066f2:	4619      	mov	r1, r3
 80066f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066f6:	f000 f8e8 	bl	80068ca <USBH_GetNextDesc>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b04      	cmp	r3, #4
 8006702:	d146      	bne.n	8006792 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006708:	221a      	movs	r2, #26
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	3308      	adds	r3, #8
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	3302      	adds	r3, #2
 8006716:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800671a:	69f8      	ldr	r0, [r7, #28]
 800671c:	f000 f846 	bl	80067ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800672a:	e022      	b.n	8006772 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800672c:	f107 0316 	add.w	r3, r7, #22
 8006730:	4619      	mov	r1, r3
 8006732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006734:	f000 f8c9 	bl	80068ca <USBH_GetNextDesc>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b05      	cmp	r3, #5
 8006740:	d117      	bne.n	8006772 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006746:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800674a:	3201      	adds	r2, #1
 800674c:	00d2      	lsls	r2, r2, #3
 800674e:	211a      	movs	r1, #26
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	4413      	add	r3, r2
 8006756:	3308      	adds	r3, #8
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006762:	69b8      	ldr	r0, [r7, #24]
 8006764:	f000 f851 	bl	800680a <USBH_ParseEPDesc>
            ep_ix++;
 8006768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800676c:	3301      	adds	r3, #1
 800676e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	791b      	ldrb	r3, [r3, #4]
 8006776:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800677a:	429a      	cmp	r2, r3
 800677c:	d204      	bcs.n	8006788 <USBH_ParseCfgDesc+0x120>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	885a      	ldrh	r2, [r3, #2]
 8006782:	8afb      	ldrh	r3, [r7, #22]
 8006784:	429a      	cmp	r2, r3
 8006786:	d8d1      	bhi.n	800672c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800678c:	3301      	adds	r3, #1
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006796:	2b01      	cmp	r3, #1
 8006798:	d804      	bhi.n	80067a4 <USBH_ParseCfgDesc+0x13c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	885a      	ldrh	r2, [r3, #2]
 800679e:	8afb      	ldrh	r3, [r7, #22]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d8a4      	bhi.n	80066ee <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80067a4:	bf00      	nop
 80067a6:	3728      	adds	r7, #40	; 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	785a      	ldrb	r2, [r3, #1]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	789a      	ldrb	r2, [r3, #2]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	78da      	ldrb	r2, [r3, #3]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	791a      	ldrb	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	795a      	ldrb	r2, [r3, #5]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	799a      	ldrb	r2, [r3, #6]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	79da      	ldrb	r2, [r3, #7]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	7a1a      	ldrb	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	721a      	strb	r2, [r3, #8]
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	785a      	ldrb	r2, [r3, #1]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	789a      	ldrb	r2, [r3, #2]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	78da      	ldrb	r2, [r3, #3]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b29a      	uxth	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	3305      	adds	r3, #5
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	b29b      	uxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	799a      	ldrb	r2, [r3, #6]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	719a      	strb	r2, [r3, #6]
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d120      	bne.n	80068be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	1e9a      	subs	r2, r3, #2
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	4293      	cmp	r3, r2
 8006886:	bf28      	it	cs
 8006888:	4613      	movcs	r3, r2
 800688a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3302      	adds	r3, #2
 8006890:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006892:	2300      	movs	r3, #0
 8006894:	82fb      	strh	r3, [r7, #22]
 8006896:	e00b      	b.n	80068b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006898:	8afb      	ldrh	r3, [r7, #22]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80068aa:	8afb      	ldrh	r3, [r7, #22]
 80068ac:	3302      	adds	r3, #2
 80068ae:	82fb      	strh	r3, [r7, #22]
 80068b0:	8afa      	ldrh	r2, [r7, #22]
 80068b2:	8abb      	ldrh	r3, [r7, #20]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3ef      	bcc.n	8006898 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
  }
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	4413      	add	r3, r2
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4413      	add	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80068f2:	68fb      	ldr	r3, [r7, #12]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800690e:	2301      	movs	r3, #1
 8006910:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	789b      	ldrb	r3, [r3, #2]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d002      	beq.n	8006920 <USBH_CtlReq+0x20>
 800691a:	2b02      	cmp	r3, #2
 800691c:	d00f      	beq.n	800693e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800691e:	e034      	b.n	800698a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2202      	movs	r2, #2
 8006936:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006938:	2301      	movs	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
    break;
 800693c:	e025      	b.n	800698a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f828 	bl	8006994 <USBH_HandleControl>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d108      	bne.n	8006960 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	75fb      	strb	r3, [r7, #23]
    break;
 800695e:	e013      	b.n	8006988 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d108      	bne.n	8006978 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006972:	2303      	movs	r3, #3
 8006974:	75fb      	strb	r3, [r7, #23]
    break;
 8006976:	e007      	b.n	8006988 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d104      	bne.n	8006988 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	75fb      	strb	r3, [r7, #23]
    break;
 8006988:	bf00      	nop
  }
  return status;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	7e1b      	ldrb	r3, [r3, #24]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b0a      	cmp	r3, #10
 80069ac:	f200 814c 	bhi.w	8006c48 <USBH_HandleControl+0x2b4>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <USBH_HandleControl+0x24>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069ff 	.word	0x080069ff
 80069c0:	08006a69 	.word	0x08006a69
 80069c4:	08006a8f 	.word	0x08006a8f
 80069c8:	08006ac7 	.word	0x08006ac7
 80069cc:	08006af3 	.word	0x08006af3
 80069d0:	08006b45 	.word	0x08006b45
 80069d4:	08006b67 	.word	0x08006b67
 80069d8:	08006ba3 	.word	0x08006ba3
 80069dc:	08006bcb 	.word	0x08006bcb
 80069e0:	08006c09 	.word	0x08006c09
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f103 0110 	add.w	r1, r3, #16
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f939 	bl	8006c68 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	761a      	strb	r2, [r3, #24]
    break;
 80069fc:	e12f      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	795b      	ldrb	r3, [r3, #5]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fcb3 	bl	8007370 <USBH_LL_GetURBState>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d11e      	bne.n	8006a52 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7c1b      	ldrb	r3, [r3, #16]
 8006a18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a1c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8adb      	ldrh	r3, [r3, #22]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006a26:	7b7b      	ldrb	r3, [r7, #13]
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d103      	bne.n	8006a34 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a32:	e10b      	b.n	8006c4c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2205      	movs	r2, #5
 8006a38:	761a      	strb	r2, [r3, #24]
    break;
 8006a3a:	e107      	b.n	8006c4c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006a3c:	7b7b      	ldrb	r3, [r7, #13]
 8006a3e:	2b80      	cmp	r3, #128	; 0x80
 8006a40:	d103      	bne.n	8006a4a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2209      	movs	r2, #9
 8006a46:	761a      	strb	r2, [r3, #24]
    break;
 8006a48:	e100      	b.n	8006c4c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2207      	movs	r2, #7
 8006a4e:	761a      	strb	r2, [r3, #24]
    break;
 8006a50:	e0fc      	b.n	8006c4c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d003      	beq.n	8006a60 <USBH_HandleControl+0xcc>
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	f040 80f6 	bne.w	8006c4c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	220b      	movs	r2, #11
 8006a64:	761a      	strb	r2, [r3, #24]
    break;
 8006a66:	e0f1      	b.n	8006c4c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	899a      	ldrh	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f930 	bl	8006ce6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	761a      	strb	r2, [r3, #24]
    break;
 8006a8c:	e0e7      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc6b 	bl	8007370 <USBH_LL_GetURBState>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d102      	bne.n	8006aaa <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2209      	movs	r2, #9
 8006aa8:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b05      	cmp	r3, #5
 8006aae:	d102      	bne.n	8006ab6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ab4:	e0cc      	b.n	8006c50 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	f040 80c9 	bne.w	8006c50 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	220b      	movs	r2, #11
 8006ac2:	761a      	strb	r2, [r3, #24]
    break;
 8006ac4:	e0c4      	b.n	8006c50 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6899      	ldr	r1, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	899a      	ldrh	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7958      	ldrb	r0, [r3, #5]
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8df 	bl	8006c9c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2206      	movs	r2, #6
 8006aee:	761a      	strb	r2, [r3, #24]
    break;
 8006af0:	e0b5      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	795b      	ldrb	r3, [r3, #5]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fc39 	bl	8007370 <USBH_LL_GetURBState>
 8006afe:	4603      	mov	r3, r0
 8006b00:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d103      	bne.n	8006b10 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b0e:	e0a1      	b.n	8006c54 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d105      	bne.n	8006b22 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220c      	movs	r2, #12
 8006b1a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b20:	e098      	b.n	8006c54 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d103      	bne.n	8006b30 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	761a      	strb	r2, [r3, #24]
    break;
 8006b2e:	e091      	b.n	8006c54 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	f040 808e 	bne.w	8006c54 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	220b      	movs	r2, #11
 8006b3c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	73fb      	strb	r3, [r7, #15]
    break;
 8006b42:	e087      	b.n	8006c54 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	791b      	ldrb	r3, [r3, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8ca 	bl	8006ce6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2208      	movs	r2, #8
 8006b62:	761a      	strb	r2, [r3, #24]

    break;
 8006b64:	e07b      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fbff 	bl	8007370 <USBH_LL_GetURBState>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d105      	bne.n	8006b88 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	220d      	movs	r2, #13
 8006b80:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b86:	e067      	b.n	8006c58 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d103      	bne.n	8006b96 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	220b      	movs	r2, #11
 8006b92:	761a      	strb	r2, [r3, #24]
    break;
 8006b94:	e060      	b.n	8006c58 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d15d      	bne.n	8006c58 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006ba0:	e05a      	b.n	8006c58 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	795a      	ldrb	r2, [r3, #5]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	2200      	movs	r2, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f873 	bl	8006c9c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	761a      	strb	r2, [r3, #24]
    break;
 8006bc8:	e049      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	795b      	ldrb	r3, [r3, #5]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fbcd 	bl	8007370 <USBH_LL_GetURBState>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	220d      	movs	r2, #13
 8006be8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006bea:	e037      	b.n	8006c5c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d103      	bne.n	8006bfa <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2209      	movs	r2, #9
 8006bf6:	761a      	strb	r2, [r3, #24]
    break;
 8006bf8:	e030      	b.n	8006c5c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d12d      	bne.n	8006c5c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	220b      	movs	r2, #11
 8006c04:	761a      	strb	r2, [r3, #24]
    break;
 8006c06:	e029      	b.n	8006c5c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7e5b      	ldrb	r3, [r3, #25]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	765a      	strb	r2, [r3, #25]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7e5b      	ldrb	r3, [r3, #25]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d809      	bhi.n	8006c30 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 faba 	bl	8007196 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006c2e:	e016      	b.n	8006c5e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c36:	2106      	movs	r1, #6
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	73fb      	strb	r3, [r7, #15]
    break;
 8006c46:	e00a      	b.n	8006c5e <USBH_HandleControl+0x2ca>

  default:
    break;
 8006c48:	bf00      	nop
 8006c4a:	e008      	b.n	8006c5e <USBH_HandleControl+0x2ca>
    break;
 8006c4c:	bf00      	nop
 8006c4e:	e006      	b.n	8006c5e <USBH_HandleControl+0x2ca>
    break;
 8006c50:	bf00      	nop
 8006c52:	e004      	b.n	8006c5e <USBH_HandleControl+0x2ca>
    break;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <USBH_HandleControl+0x2ca>
    break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <USBH_HandleControl+0x2ca>
    break;
 8006c5c:	bf00      	nop
  }
  return status;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af04      	add	r7, sp, #16
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006c76:	79f9      	ldrb	r1, [r7, #7]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2300      	movs	r3, #0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fb3e 	bl	800730e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af04      	add	r7, sp, #16
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	460b      	mov	r3, r1
 8006cac:	80fb      	strh	r3, [r7, #6]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cc0:	7979      	ldrb	r1, [r7, #5]
 8006cc2:	7e3b      	ldrb	r3, [r7, #24]
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	9302      	str	r3, [sp, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb19 	bl	800730e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b088      	sub	sp, #32
 8006cea:	af04      	add	r7, sp, #16
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	80fb      	strh	r3, [r7, #6]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006cfc:	7979      	ldrb	r1, [r7, #5]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9303      	str	r3, [sp, #12]
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	9302      	str	r3, [sp, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2201      	movs	r2, #1
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fafb 	bl	800730e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d18:	2300      	movs	r3, #0

}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b088      	sub	sp, #32
 8006d26:	af04      	add	r7, sp, #16
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	461a      	mov	r2, r3
 8006d30:	460b      	mov	r3, r1
 8006d32:	80fb      	strh	r3, [r7, #6]
 8006d34:	4613      	mov	r3, r2
 8006d36:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d46:	7979      	ldrb	r1, [r7, #5]
 8006d48:	7e3b      	ldrb	r3, [r7, #24]
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	2301      	movs	r3, #1
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fad6 	bl	800730e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af04      	add	r7, sp, #16
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	80fb      	strh	r3, [r7, #6]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006d82:	7979      	ldrb	r1, [r7, #5]
 8006d84:	2300      	movs	r3, #0
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	9302      	str	r3, [sp, #8]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	2301      	movs	r3, #1
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	2302      	movs	r3, #2
 8006d96:	2201      	movs	r2, #1
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fab8 	bl	800730e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af04      	add	r7, sp, #16
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	70fb      	strb	r3, [r7, #3]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70bb      	strb	r3, [r7, #2]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006dc2:	7878      	ldrb	r0, [r7, #1]
 8006dc4:	78ba      	ldrb	r2, [r7, #2]
 8006dc6:	78f9      	ldrb	r1, [r7, #3]
 8006dc8:	8b3b      	ldrh	r3, [r7, #24]
 8006dca:	9302      	str	r3, [sp, #8]
 8006dcc:	7d3b      	ldrb	r3, [r7, #20]
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	7c3b      	ldrb	r3, [r7, #16]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa4b 	bl	8007272 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006ddc:	2300      	movs	r3, #0

}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa6a 	bl	80072d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006dfc:	2300      	movs	r3, #0

}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f831 	bl	8006e7a <USBH_GetFreePipe>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	89fa      	ldrh	r2, [r7, #14]
 8006e2a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32e0      	adds	r2, #224	; 0xe0
 8006e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8006e36:	89fb      	ldrh	r3, [r7, #14]
 8006e38:	b2db      	uxtb	r3, r3
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	2b0a      	cmp	r3, #10
 8006e52:	d80b      	bhi.n	8006e6c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32e0      	adds	r2, #224	; 0xe0
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	78fa      	ldrb	r2, [r7, #3]
 8006e60:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	32e0      	adds	r2, #224	; 0xe0
 8006e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
 8006e8a:	e00e      	b.n	8006eaa <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32e0      	adds	r2, #224	; 0xe0
 8006e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	e007      	b.n	8006eb4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b0a      	cmp	r3, #10
 8006eae:	d9ed      	bls.n	8006e8c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	490e      	ldr	r1, [pc, #56]	; (8006f00 <MX_USB_HOST_Init+0x40>)
 8006ec8:	480e      	ldr	r0, [pc, #56]	; (8006f04 <MX_USB_HOST_Init+0x44>)
 8006eca:	f7fe fdbb 	bl	8005a44 <USBH_Init>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006ed4:	f7f9 fdac 	bl	8000a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006ed8:	490b      	ldr	r1, [pc, #44]	; (8006f08 <MX_USB_HOST_Init+0x48>)
 8006eda:	480a      	ldr	r0, [pc, #40]	; (8006f04 <MX_USB_HOST_Init+0x44>)
 8006edc:	f7fe fe25 	bl	8005b2a <USBH_RegisterClass>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006ee6:	f7f9 fda3 	bl	8000a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006eea:	4806      	ldr	r0, [pc, #24]	; (8006f04 <MX_USB_HOST_Init+0x44>)
 8006eec:	f7fe feaa 	bl	8005c44 <USBH_Start>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006ef6:	f7f9 fd9b 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	08006f21 	.word	0x08006f21
 8006f04:	200001b8 	.word	0x200001b8
 8006f08:	2000000c 	.word	0x2000000c

08006f0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f10:	4802      	ldr	r0, [pc, #8]	; (8006f1c <MX_USB_HOST_Process+0x10>)
 8006f12:	f7fe fea7 	bl	8005c64 <USBH_Process>
}
 8006f16:	bf00      	nop
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200001b8 	.word	0x200001b8

08006f20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d819      	bhi.n	8006f68 <USBH_UserProcess+0x48>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <USBH_UserProcess+0x1c>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f59 	.word	0x08006f59
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f61 	.word	0x08006f61
 8006f4c:	08006f51 	.word	0x08006f51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <USBH_UserProcess+0x58>)
 8006f52:	2203      	movs	r2, #3
 8006f54:	701a      	strb	r2, [r3, #0]
  break;
 8006f56:	e008      	b.n	8006f6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <USBH_UserProcess+0x58>)
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
  break;
 8006f5e:	e004      	b.n	8006f6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <USBH_UserProcess+0x58>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]
  break;
 8006f66:	e000      	b.n	8006f6a <USBH_UserProcess+0x4a>

  default:
  break;
 8006f68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	200000b4 	.word	0x200000b4

08006f7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f9c:	d147      	bne.n	800702e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	4b25      	ldr	r3, [pc, #148]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa6:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	6313      	str	r3, [r2, #48]	; 0x30
 8006fae:	4b22      	ldr	r3, [pc, #136]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	4619      	mov	r1, r3
 8006fce:	481b      	ldr	r0, [pc, #108]	; (800703c <HAL_HCD_MspInit+0xc0>)
 8006fd0:	f7fa f8c0 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006fd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4812      	ldr	r0, [pc, #72]	; (800703c <HAL_HCD_MspInit+0xc0>)
 8006ff2:	f7fa f8af 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ff6:	4b10      	ldr	r3, [pc, #64]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007000:	6353      	str	r3, [r2, #52]	; 0x34
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	4a0b      	ldr	r2, [pc, #44]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 800700c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007010:	6453      	str	r3, [r2, #68]	; 0x44
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <HAL_HCD_MspInit+0xbc>)
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	2043      	movs	r0, #67	; 0x43
 8007024:	f7fa f85f 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007028:	2043      	movs	r0, #67	; 0x43
 800702a:	f7fa f878 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800702e:	bf00      	nop
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800
 800703c:	40020000 	.word	0x40020000

08007040 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff f8b9 	bl	80061c6 <USBH_LL_IncTimer>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff f8fe 	bl	800626c <USBH_LL_Connect>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f916 	bl	80062b8 <USBH_LL_Disconnect>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
 80070a0:	4613      	mov	r3, r2
 80070a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff f8ab 	bl	800621a <USBH_LL_PortEnabled>
} 
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f8ab 	bl	8006236 <USBH_LL_PortDisabled>
} 
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d12a      	bne.n	8007150 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80070fa:	4a18      	ldr	r2, [pc, #96]	; (800715c <USBH_LL_Init+0x74>)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <USBH_LL_Init+0x74>)
 8007106:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <USBH_LL_Init+0x74>)
 800710c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007110:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <USBH_LL_Init+0x74>)
 8007114:	2208      	movs	r2, #8
 8007116:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <USBH_LL_Init+0x74>)
 800711a:	2201      	movs	r2, #1
 800711c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <USBH_LL_Init+0x74>)
 8007120:	2200      	movs	r2, #0
 8007122:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <USBH_LL_Init+0x74>)
 8007126:	2202      	movs	r2, #2
 8007128:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800712a:	4b0c      	ldr	r3, [pc, #48]	; (800715c <USBH_LL_Init+0x74>)
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007130:	480a      	ldr	r0, [pc, #40]	; (800715c <USBH_LL_Init+0x74>)
 8007132:	f7fa f9c2 	bl	80014ba <HAL_HCD_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800713c:	f7f9 fc78 	bl	8000a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007140:	4806      	ldr	r0, [pc, #24]	; (800715c <USBH_LL_Init+0x74>)
 8007142:	f7fa fdbd 	bl	8001cc0 <HAL_HCD_GetCurrentFrame>
 8007146:	4603      	mov	r3, r0
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff f82c 	bl	80061a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000584 	.word	0x20000584

08007160 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007176:	4618      	mov	r0, r3
 8007178:	f7fa fd2a 	bl	8001bd0 <HAL_HCD_Start>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f95c 	bl	8007440 <USBH_Get_USB_Status>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800718c:	7bbb      	ldrb	r3, [r7, #14]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fa fd32 	bl	8001c16 <HAL_HCD_Stop>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 f941 	bl	8007440 <USBH_Get_USB_Status>
 80071be:	4603      	mov	r3, r0
 80071c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa fd7c 	bl	8001cdc <HAL_HCD_GetCurrentSpeed>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d007      	beq.n	80071fa <USBH_LL_GetSpeed+0x2e>
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d302      	bcc.n	80071f4 <USBH_LL_GetSpeed+0x28>
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d006      	beq.n	8007200 <USBH_LL_GetSpeed+0x34>
 80071f2:	e008      	b.n	8007206 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
    break;
 80071f8:	e008      	b.n	800720c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
    break;
 80071fe:	e005      	b.n	800720c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007200:	2302      	movs	r3, #2
 8007202:	73fb      	strb	r3, [r7, #15]
    break;
 8007204:	e002      	b.n	800720c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
    break;
 800720a:	bf00      	nop
  }
  return  speed;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fa fd0f 	bl	8001c50 <HAL_HCD_ResetPort>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f901 	bl	8007440 <USBH_Get_USB_Status>
 800723e:	4603      	mov	r3, r0
 8007240:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007242:	7bbb      	ldrb	r3, [r7, #14]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800725e:	78fa      	ldrb	r2, [r7, #3]
 8007260:	4611      	mov	r1, r2
 8007262:	4618      	mov	r0, r3
 8007264:	f7fa fd17 	bl	8001c96 <HAL_HCD_HC_GetXferCount>
 8007268:	4603      	mov	r3, r0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007272:	b590      	push	{r4, r7, lr}
 8007274:	b089      	sub	sp, #36	; 0x24
 8007276:	af04      	add	r7, sp, #16
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	461a      	mov	r2, r3
 8007280:	4603      	mov	r3, r0
 8007282:	70fb      	strb	r3, [r7, #3]
 8007284:	460b      	mov	r3, r1
 8007286:	70bb      	strb	r3, [r7, #2]
 8007288:	4613      	mov	r3, r2
 800728a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800729a:	787c      	ldrb	r4, [r7, #1]
 800729c:	78ba      	ldrb	r2, [r7, #2]
 800729e:	78f9      	ldrb	r1, [r7, #3]
 80072a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072a2:	9302      	str	r3, [sp, #8]
 80072a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4623      	mov	r3, r4
 80072b2:	f7fa f964 	bl	800157e <HAL_HCD_HC_Init>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f8bf 	bl	8007440 <USBH_Get_USB_Status>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd90      	pop	{r4, r7, pc}

080072d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	4611      	mov	r1, r2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fa f9dd 	bl	80016ae <HAL_HCD_HC_Halt>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f8a0 	bl	8007440 <USBH_Get_USB_Status>
 8007300:	4603      	mov	r3, r0
 8007302:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007304:	7bbb      	ldrb	r3, [r7, #14]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800730e:	b590      	push	{r4, r7, lr}
 8007310:	b089      	sub	sp, #36	; 0x24
 8007312:	af04      	add	r7, sp, #16
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	4608      	mov	r0, r1
 8007318:	4611      	mov	r1, r2
 800731a:	461a      	mov	r2, r3
 800731c:	4603      	mov	r3, r0
 800731e:	70fb      	strb	r3, [r7, #3]
 8007320:	460b      	mov	r3, r1
 8007322:	70bb      	strb	r3, [r7, #2]
 8007324:	4613      	mov	r3, r2
 8007326:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007336:	787c      	ldrb	r4, [r7, #1]
 8007338:	78ba      	ldrb	r2, [r7, #2]
 800733a:	78f9      	ldrb	r1, [r7, #3]
 800733c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007340:	9303      	str	r3, [sp, #12]
 8007342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4623      	mov	r3, r4
 8007352:	f7fa f9cf 	bl	80016f4 <HAL_HCD_HC_SubmitRequest>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 f86f 	bl	8007440 <USBH_Get_USB_Status>
 8007362:	4603      	mov	r3, r0
 8007364:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007366:	7bbb      	ldrb	r3, [r7, #14]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f7fa fc70 	bl	8001c6c <HAL_HCD_HC_GetURBState>
 800738c:	4603      	mov	r3, r0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d103      	bne.n	80073b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f872 	bl	8007498 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80073b4:	20c8      	movs	r0, #200	; 0xc8
 80073b6:	f7f9 fd99 	bl	8000eec <HAL_Delay>
  return USBH_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
 80073d0:	4613      	mov	r3, r2
 80073d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	440b      	add	r3, r1
 80073ea:	333b      	adds	r3, #59	; 0x3b
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	68f9      	ldr	r1, [r7, #12]
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	440b      	add	r3, r1
 8007400:	3350      	adds	r3, #80	; 0x50
 8007402:	78ba      	ldrb	r2, [r7, #2]
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e009      	b.n	800741c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	440b      	add	r3, r1
 8007416:	3351      	adds	r3, #81	; 0x51
 8007418:	78ba      	ldrb	r2, [r7, #2]
 800741a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 fd5a 	bl	8000eec <HAL_Delay>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d817      	bhi.n	8007484 <USBH_Get_USB_Status+0x44>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBH_Get_USB_Status+0x1c>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007473 	.word	0x08007473
 8007464:	08007479 	.word	0x08007479
 8007468:	0800747f 	.word	0x0800747f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	e00b      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
    break;
 8007476:	e008      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	e005      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800747e:	2302      	movs	r3, #2
 8007480:	73fb      	strb	r3, [r7, #15]
    break;
 8007482:	e002      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007484:	2302      	movs	r3, #2
 8007486:	73fb      	strb	r3, [r7, #15]
    break;
 8007488:	bf00      	nop
  }
  return usb_status;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e001      	b.n	80074b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	461a      	mov	r2, r3
 80074ba:	2101      	movs	r1, #1
 80074bc:	4803      	ldr	r0, [pc, #12]	; (80074cc <MX_DriverVbusFS+0x34>)
 80074be:	f7f9 ffe3 	bl	8001488 <HAL_GPIO_WritePin>
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40020800 	.word	0x40020800

080074d0 <__errno>:
 80074d0:	4b01      	ldr	r3, [pc, #4]	; (80074d8 <__errno+0x8>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	2000002c 	.word	0x2000002c

080074dc <__libc_init_array>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	4e0d      	ldr	r6, [pc, #52]	; (8007514 <__libc_init_array+0x38>)
 80074e0:	4c0d      	ldr	r4, [pc, #52]	; (8007518 <__libc_init_array+0x3c>)
 80074e2:	1ba4      	subs	r4, r4, r6
 80074e4:	10a4      	asrs	r4, r4, #2
 80074e6:	2500      	movs	r5, #0
 80074e8:	42a5      	cmp	r5, r4
 80074ea:	d109      	bne.n	8007500 <__libc_init_array+0x24>
 80074ec:	4e0b      	ldr	r6, [pc, #44]	; (800751c <__libc_init_array+0x40>)
 80074ee:	4c0c      	ldr	r4, [pc, #48]	; (8007520 <__libc_init_array+0x44>)
 80074f0:	f000 f8ea 	bl	80076c8 <_init>
 80074f4:	1ba4      	subs	r4, r4, r6
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	2500      	movs	r5, #0
 80074fa:	42a5      	cmp	r5, r4
 80074fc:	d105      	bne.n	800750a <__libc_init_array+0x2e>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007504:	4798      	blx	r3
 8007506:	3501      	adds	r5, #1
 8007508:	e7ee      	b.n	80074e8 <__libc_init_array+0xc>
 800750a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800750e:	4798      	blx	r3
 8007510:	3501      	adds	r5, #1
 8007512:	e7f2      	b.n	80074fa <__libc_init_array+0x1e>
 8007514:	08007704 	.word	0x08007704
 8007518:	08007704 	.word	0x08007704
 800751c:	08007704 	.word	0x08007704
 8007520:	08007708 	.word	0x08007708

08007524 <malloc>:
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <malloc+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f000 b861 	b.w	80075f0 <_malloc_r>
 800752e:	bf00      	nop
 8007530:	2000002c 	.word	0x2000002c

08007534 <free>:
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <free+0xc>)
 8007536:	4601      	mov	r1, r0
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	f000 b80b 	b.w	8007554 <_free_r>
 800753e:	bf00      	nop
 8007540:	2000002c 	.word	0x2000002c

08007544 <memset>:
 8007544:	4402      	add	r2, r0
 8007546:	4603      	mov	r3, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <_free_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4605      	mov	r5, r0
 8007558:	2900      	cmp	r1, #0
 800755a:	d045      	beq.n	80075e8 <_free_r+0x94>
 800755c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007560:	1f0c      	subs	r4, r1, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfb8      	it	lt
 8007566:	18e4      	addlt	r4, r4, r3
 8007568:	f000 f8ac 	bl	80076c4 <__malloc_lock>
 800756c:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <_free_r+0x98>)
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	4610      	mov	r0, r2
 8007572:	b933      	cbnz	r3, 8007582 <_free_r+0x2e>
 8007574:	6063      	str	r3, [r4, #4]
 8007576:	6014      	str	r4, [r2, #0]
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800757e:	f000 b8a2 	b.w	80076c6 <__malloc_unlock>
 8007582:	42a3      	cmp	r3, r4
 8007584:	d90c      	bls.n	80075a0 <_free_r+0x4c>
 8007586:	6821      	ldr	r1, [r4, #0]
 8007588:	1862      	adds	r2, r4, r1
 800758a:	4293      	cmp	r3, r2
 800758c:	bf04      	itt	eq
 800758e:	681a      	ldreq	r2, [r3, #0]
 8007590:	685b      	ldreq	r3, [r3, #4]
 8007592:	6063      	str	r3, [r4, #4]
 8007594:	bf04      	itt	eq
 8007596:	1852      	addeq	r2, r2, r1
 8007598:	6022      	streq	r2, [r4, #0]
 800759a:	6004      	str	r4, [r0, #0]
 800759c:	e7ec      	b.n	8007578 <_free_r+0x24>
 800759e:	4613      	mov	r3, r2
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	b10a      	cbz	r2, 80075a8 <_free_r+0x54>
 80075a4:	42a2      	cmp	r2, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x4a>
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	1858      	adds	r0, r3, r1
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x74>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4401      	add	r1, r0
 80075b4:	1858      	adds	r0, r3, r1
 80075b6:	4282      	cmp	r2, r0
 80075b8:	6019      	str	r1, [r3, #0]
 80075ba:	d1dd      	bne.n	8007578 <_free_r+0x24>
 80075bc:	6810      	ldr	r0, [r2, #0]
 80075be:	6852      	ldr	r2, [r2, #4]
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	4401      	add	r1, r0
 80075c4:	6019      	str	r1, [r3, #0]
 80075c6:	e7d7      	b.n	8007578 <_free_r+0x24>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x7c>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d3      	b.n	8007578 <_free_r+0x24>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428a      	cmp	r2, r1
 80075d6:	bf04      	itt	eq
 80075d8:	6811      	ldreq	r1, [r2, #0]
 80075da:	6852      	ldreq	r2, [r2, #4]
 80075dc:	6062      	str	r2, [r4, #4]
 80075de:	bf04      	itt	eq
 80075e0:	1809      	addeq	r1, r1, r0
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	605c      	str	r4, [r3, #4]
 80075e6:	e7c7      	b.n	8007578 <_free_r+0x24>
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	200000b8 	.word	0x200000b8

080075f0 <_malloc_r>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	1ccd      	adds	r5, r1, #3
 80075f4:	f025 0503 	bic.w	r5, r5, #3
 80075f8:	3508      	adds	r5, #8
 80075fa:	2d0c      	cmp	r5, #12
 80075fc:	bf38      	it	cc
 80075fe:	250c      	movcc	r5, #12
 8007600:	2d00      	cmp	r5, #0
 8007602:	4606      	mov	r6, r0
 8007604:	db01      	blt.n	800760a <_malloc_r+0x1a>
 8007606:	42a9      	cmp	r1, r5
 8007608:	d903      	bls.n	8007612 <_malloc_r+0x22>
 800760a:	230c      	movs	r3, #12
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	2000      	movs	r0, #0
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	f000 f857 	bl	80076c4 <__malloc_lock>
 8007616:	4a21      	ldr	r2, [pc, #132]	; (800769c <_malloc_r+0xac>)
 8007618:	6814      	ldr	r4, [r2, #0]
 800761a:	4621      	mov	r1, r4
 800761c:	b991      	cbnz	r1, 8007644 <_malloc_r+0x54>
 800761e:	4c20      	ldr	r4, [pc, #128]	; (80076a0 <_malloc_r+0xb0>)
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	b91b      	cbnz	r3, 800762c <_malloc_r+0x3c>
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f83d 	bl	80076a4 <_sbrk_r>
 800762a:	6020      	str	r0, [r4, #0]
 800762c:	4629      	mov	r1, r5
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f838 	bl	80076a4 <_sbrk_r>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d124      	bne.n	8007682 <_malloc_r+0x92>
 8007638:	230c      	movs	r3, #12
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	4630      	mov	r0, r6
 800763e:	f000 f842 	bl	80076c6 <__malloc_unlock>
 8007642:	e7e4      	b.n	800760e <_malloc_r+0x1e>
 8007644:	680b      	ldr	r3, [r1, #0]
 8007646:	1b5b      	subs	r3, r3, r5
 8007648:	d418      	bmi.n	800767c <_malloc_r+0x8c>
 800764a:	2b0b      	cmp	r3, #11
 800764c:	d90f      	bls.n	800766e <_malloc_r+0x7e>
 800764e:	600b      	str	r3, [r1, #0]
 8007650:	50cd      	str	r5, [r1, r3]
 8007652:	18cc      	adds	r4, r1, r3
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f836 	bl	80076c6 <__malloc_unlock>
 800765a:	f104 000b 	add.w	r0, r4, #11
 800765e:	1d23      	adds	r3, r4, #4
 8007660:	f020 0007 	bic.w	r0, r0, #7
 8007664:	1ac3      	subs	r3, r0, r3
 8007666:	d0d3      	beq.n	8007610 <_malloc_r+0x20>
 8007668:	425a      	negs	r2, r3
 800766a:	50e2      	str	r2, [r4, r3]
 800766c:	e7d0      	b.n	8007610 <_malloc_r+0x20>
 800766e:	428c      	cmp	r4, r1
 8007670:	684b      	ldr	r3, [r1, #4]
 8007672:	bf16      	itet	ne
 8007674:	6063      	strne	r3, [r4, #4]
 8007676:	6013      	streq	r3, [r2, #0]
 8007678:	460c      	movne	r4, r1
 800767a:	e7eb      	b.n	8007654 <_malloc_r+0x64>
 800767c:	460c      	mov	r4, r1
 800767e:	6849      	ldr	r1, [r1, #4]
 8007680:	e7cc      	b.n	800761c <_malloc_r+0x2c>
 8007682:	1cc4      	adds	r4, r0, #3
 8007684:	f024 0403 	bic.w	r4, r4, #3
 8007688:	42a0      	cmp	r0, r4
 800768a:	d005      	beq.n	8007698 <_malloc_r+0xa8>
 800768c:	1a21      	subs	r1, r4, r0
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f808 	bl	80076a4 <_sbrk_r>
 8007694:	3001      	adds	r0, #1
 8007696:	d0cf      	beq.n	8007638 <_malloc_r+0x48>
 8007698:	6025      	str	r5, [r4, #0]
 800769a:	e7db      	b.n	8007654 <_malloc_r+0x64>
 800769c:	200000b8 	.word	0x200000b8
 80076a0:	200000bc 	.word	0x200000bc

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4c06      	ldr	r4, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4605      	mov	r5, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	f7f9 fb1e 	bl	8000cf0 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20000848 	.word	0x20000848

080076c4 <__malloc_lock>:
 80076c4:	4770      	bx	lr

080076c6 <__malloc_unlock>:
 80076c6:	4770      	bx	lr

080076c8 <_init>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr

080076d4 <_fini>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	bf00      	nop
 80076d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076da:	bc08      	pop	{r3}
 80076dc:	469e      	mov	lr, r3
 80076de:	4770      	bx	lr
